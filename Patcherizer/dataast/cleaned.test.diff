public final class CursorToBulkCursorAdaptor extends BulkCursorNative <nl> { public void close ( ) { <nl> maybeUnregisterObserverProxy ( ) ; <nl> - mCursor . deactivate ( ) ; <nl> - <nl> + mCursor . close ( ) ; <nl> } <nl> public int requery ( IContentObserver observer , CursorWindow window ) { <nl>   } } 
<nl> package groovy . util ; <nl> - import groovy . lang . Closure ; <nl> - import groovy . lang . GroovyObject ; <nl> import groovy . lang . GroovyObjectSupport ; <nl> import groovy . lang . Writable ; <nl> import org . codehaus . groovy . runtime . DefaultGroovyMethods ; <nl>   
import java . util . logging . Level ; <nl> <nl> <nl> <nl> + <nl> final class Closer implements Closeable { public void test ( ) { <nl> <nl>   } } 
public abstract class DockingStation { <nl> <nl> public boolean linkIsDocked ( ) { <nl> - if ( isTaken ( ) ) { <nl> + if ( robotTaking ( ) != null ) { <nl> return robotTaking ( ) . getDockingStation ( ) == this ; <nl> } else { <nl> return false ; <nl>   } } } } 
public class PImage implements PConstants , Cloneable { public void test ( ) { <nl> if ( y + h > height ) h = height - y ; <nl> PImage newbie = new PImage ( w , h , format ) ; <nl> + newbie . parent = parent ; <nl> int index = y * width + x ; <nl> int index2 = 0 ; <nl>   } } 
public class Solo { public void test ( ) { { <nl> robotiumUtils . sendKeyCode ( KeyEvent . KEYCODE_DEL ) ; <nl> break ; <nl> <nl> + robotiumUtils . sendKeyCode ( key ) ; <nl> break ; <nl> } <nl> } <nl>   } 
public class CassandraDaemon <nl> { public void test ( ) { { { <nl> keyspace . viewManager . buildAllViews ( ) ; <nl> } <nl> + logger . debug ( " Completed submission of build tasks for any materialized views defined at startup " ) ; <nl> } <nl> } ; <nl>   } 
public class GitRootScanner implements BulkFileListener , ModuleRootListener , Dis <nl> <nl> { public void dispose ( ) { { <nl> + myAlarm . cancelAllRequests ( ) ; <nl> } <nl> <nl>   } } 
public final class Crouton { <nl> <nl> private void initializeCroutonView ( ) { <nl> + <nl> Resources resources = this . activity . getResources ( ) ; <nl> <nl>   } } 
public class TridentTopologyBuilder { public void test ( ) { { { <nl> bd . allGrouping ( masterCoordinator ( batchGroup ) , MasterBatchCoordinator . COMMIT_STREAM_ID ) ; <nl> } <nl> for ( Map m : c . componentConfs ) { <nl> - scd . addConfigurations ( m ) ; <nl> + bd . addConfigurations ( m ) ; <nl> } <nl> } <nl> } <nl>   } 
import com . liferay . portlet . wiki . service . WikiPageLocalServiceUtil ; <nl> <nl> public class WikiDLStoreConvertProcess implements DLStoreConvertProcess { <nl> + <nl> public void migrate ( final DLStoreConverter dlStoreConverter ) <nl> throws PortalException { <nl>   } } 
public class Notification { <nl> <nl> <nl> public Type getType ( ) { <nl> - return isTriggered ( ) ? Type . TRIGGERED : Type . SCHEDULED ; <nl> + return isScheduled ( ) ? Type . SCHEDULED : Type . TRIGGERED ; <nl> } <nl> <nl>   } 
public class DataInfo extends Keyed { <nl> <nl> private DataInfo ( int nums ) { <nl> + _offset = false ; <nl> + _weights = false ; <nl> _nums = nums ; <nl> _catOffsets = new int [ ] { 0 } ; <nl> _predictor_transform = TransformType . NONE ; <nl>   } } 
import org . junit . Test ; <nl> import java . io . File ; <nl> import java . util . Arrays ; <nl> - import java . util . List ; <nl> <nl> <nl>   
public final class RemoteConnection { <nl> <nl> <nl> public boolean isRingbackRequested ( ) { <nl> - return false ; <nl> + return mRingbackRequested ; <nl> } <nl> <nl>   } 
import java . util . List ; <nl> <nl> <nl> <nl> + <nl> public class LineBufferTest extends IoTestCase { <nl> public void testProcess ( ) throws IOException { <nl>   } } 
public class WindowFrame extends Composite <nl> { public void test ( ) { <nl> if ( ! isVisible ( ) ) <nl> fireEvent ( new WindowStateChangeEvent ( WindowState . NORMAL ) ) ; <nl> + <nl> + events_ . fireEvent ( new WindowEnsureVisibleEvent ( this ) ) ; <nl> } <nl> <nl>   } 
public class BaseObject3D implements IObject3D , Comparable < BaseObject3D > , ITrans <nl> { public boolean isDoubleSided ( ) { <nl> return mDoubleSided ; <nl> } <nl> + <nl> + public boolean isVisible ( ) { <nl> + return mIsVisible ; <nl> + } <nl> public void setDoubleSided ( boolean doubleSided ) { <nl> this . mDoubleSided = doubleSided ; <nl>   } } 
public class FieldNode extends AnnotatedNode implements Opcodes , Variable { <nl> public void setType ( ClassNode type ) { <nl> this . type = type ; <nl> + this . originType = type ; <nl> dynamicTyped |= type == ClassHelper . DYNAMIC_TYPE ; <nl> } <nl>   } 
public class TitlePageIndicator extends View implements PageIndicator { public void test ( ) { <nl> <nl> if ( mCurrentPage >= boundsSize ) { <nl> setCurrentItem ( boundsSize - 1 ) ; <nl> + return ; <nl> } <nl> final int countMinusOne = count - 1 ; <nl>   } } 
public class Node implements Writable { <nl> <nl> public List children ( ) { <nl> - return this . children ( ) ; <nl> + return this . children ; <nl> } <nl> public void addChild ( final Object child ) { <nl>   } } 
public class Geometry3D { public void test ( ) { <nl> if ( type == BufferType . SHORT_BUFFER ) <nl> byteSize = SHORT_SIZE_BYTES ; <nl> + buffer . rewind ( ) ; <nl> GLES20 . glBindBuffer ( target , handle ) ; <nl> GLES20 . glBufferData ( target , buffer . limit ( ) * byteSize , buffer , usage ) ; <nl> GLES20 . glBindBuffer ( target , 0 ) ; <nl>   } } 
public class SimpleThreesideDiffViewer extends ThreesideTextDiffViewer { public void test ( ) { { <nl> } <nl> myInvalidDiffChanges . clear ( ) ; <nl> + myFoldingModel . destroy ( ) ; <nl> + <nl> myContentPanel . repaintDividers ( ) ; <nl> myStatusPanel . update ( ) ; <nl> } <nl>   } 
public class GitUtil { public void test ( ) { { { <nl> } <nl> pathToDir = FileUtil . toSystemIndependentName ( canonicalPath ) ; <nl> } <nl> - return VcsUtil . getVirtualFile ( pathToDir ) ; <nl> + return VcsUtil . getVirtualFileWithRefresh ( new File ( pathToDir ) ) ; <nl> } <nl> <nl>   } 
public class VizModel { public void test ( ) { <nl> <nl> textModel . writeXML ( writer ) ; <nl> - writer . writeEndElement ( ) ; <nl> <nl> writer . writeStartElement ( " cameraposition " ) ; <nl>   } } 
package git4idea . tests ; <nl> import com . intellij . openapi . util . SystemInfo ; <nl> import git4idea . config . GitVersion ; <nl> - import org . testng . annotations . Test ; <nl> + import org . junit . Test ; <nl> import java . lang . reflect . Field ; <nl>   
import java . net . URLClassLoader ; <nl> public class ModClassLoader extends URLClassLoader { <nl> public ModClassLoader ( ) { <nl> - super ( new URL [ 0 ] ) ; <nl> + super ( new URL [ 0 ] , ModClassLoader . class . getClassLoader ( ) ) ; <nl> } <nl> public void addFile ( File modFile ) throws MalformedURLException { <nl>   } } 
public class TestHttp11InputBuffer extends TomcatBaseTest { <nl> private Exception doRequest ( ) { <nl> + <nl> + setUseContentLength ( true ) ; <nl> + <nl> Tomcat tomcat = getTomcatInstance ( ) ; <nl> Context root = tomcat . addContext ( " " , TEMP_DIR ) ; <nl>   } } 
public class AQUtility { <nl> <nl> public static Context getContext ( ) { { <nl> + if ( context == null ) { <nl> + AQUtility . warn ( " warn " , " getContext with null " ) ; <nl> + } <nl> return context ; <nl> } <nl> } <nl>   } 
public class LoadingLayoutProxy implements ILoadingLayout { <nl> <nl> public void setReleaseLabel ( CharSequence label ) { <nl> for ( LoadingLayout layout : mLoadingLayouts ) { <nl> - layout . setRefreshingLabel ( label ) ; <nl> + layout . setReleaseLabel ( label ) ; <nl> } <nl> } <nl>   } 
public class PGraphicsAndroid2D extends PGraphics { <nl> public void rotate ( float angle ) { <nl> - canvas . rotate ( angle ) ; <nl> + canvas . rotate ( angle * RAD_TO_DEG ) ; <nl> } <nl>   } 
public class Tmp { public enum SQLDialect { <nl> + <nl> + <nl> + <nl> ; <nl> private static final SQLDialect [ ] FAMILIES ; <nl>   } } 
public class YUICompressor { <nl> <nl> <nl> private ScriptOrFnScope getHighestFnScope ( ScriptOrFnScope scope ) { <nl> + if ( scope == globalScope ) { <nl> + return scope ; <nl> + } <nl> while ( scope . getParentScope ( ) != globalScope ) { <nl> scope = scope . getParentScope ( ) ; <nl> } <nl>   } } 
public class PJOGL extends PGL { <nl> public PJOGL ( PGraphicsOpenGL pg ) { <nl> super ( pg ) ; <nl> - if ( glu == null ) glu = new GLU ( ) ; <nl> + glu = new GLU ( ) ; <nl> } <nl>   } 
import javax . swing . JComponent ; <nl> import processing . app . Preferences ; <nl> import processing . app . syntax . im . CompositionTextPainter ; <nl> - import processing . app . ui . Editor ; <nl> <nl>   
public class Tmp { public interface WindowManager extends ViewManager { <nl> <nl> <nl> <nl> - } public static final int PRIVATE_FLAG_SUSTAINED_PERFORMANCE_MODE = 0x00020000 ; <nl> + public static final int PRIVATE_FLAG_SUSTAINED_PERFORMANCE_MODE = 0x00040000 ; <nl> <nl> <nl>   } 
public class CheckerTest <nl> { <nl> public BriefLogger ( OutputStream out ) <nl> { <nl> - super ( out , false ) ; <nl> + super ( out , true ) ; <nl> } <nl> public void auditStarted ( AuditEvent evt ) { } <nl> public void fileFinished ( AuditEvent evt ) { } <nl>   } 
public class YAMLUtil { <nl> <nl> <nl> - public static String getKey ( final YAMLKeyValue yamlKeyValue ) { <nl> + } public static String getFullKey ( final YAMLKeyValue yamlKeyValue ) { <nl> final StringBuilder builder = new StringBuilder ( ) ; <nl> YAMLKeyValue element = yamlKeyValue ; <nl> PsiElement parent ; <nl>   } } 
public class GestureOverlayView extends FrameLayout { <nl> private final Rect mInvalidRect = new Rect ( ) ; <nl> private final Path mPath = new Path ( ) ; <nl> - private boolean mGestureVisible ; <nl> + private boolean mGestureVisible = true ; <nl> private float mX ; <nl> private float mY ; <nl>   } 
public final class H2O { <nl> public static volatile AbstractEmbeddedH2OConfig embeddedH2OConfig ; <nl> public static volatile ApiIpPortWatchdogThread apiIpPortWatchdog ; <nl> - static boolean _hdfsActive = false ; <nl> - <nl> public static String VERSION = " ( unknown ) " ; <nl> <nl>   } 
public abstract class TWLayoutManager extends LayoutManager { <nl> private int mFirstPosition ; <nl> private int mFirstVisiblePosition ; <nl> - private boolean mIsVertical ; <nl> + private boolean mIsVertical = true ; <nl> private SavedState mPendingSavedState = null ; <nl>   } 
public class VolleyStreamFetcher implements ResourceFetcher < InputStream > { public void test ( ) { <nl> VolleyRequestFuture < InputStream > localFuture = requestFuture ; <nl> if ( localFuture != null ) { <nl> localFuture . cancel ( true ) ; <nl> - requestFuture = null ; <nl> } <nl> } <nl>   } 
public class Config <nl> { public Integer rpc_recv_buff_size_in_bytes ; <nl> public Boolean start_native_transport = false ; <nl> - public Integer native_transport_port = 8000 ; <nl> + public Integer native_transport_port = 9042 ; <nl> public Integer native_transport_min_threads = 16 ; <nl> public Integer native_transport_max_threads = 128 ; <nl>   } 
abstract class AndroidSpringLooperFactory { public void test ( ) { { { <nl> } <nl> long currentTime = SystemClock . uptimeMillis ( ) ; <nl> mSpringSystem . loop ( currentTime - mLastTime ) ; <nl> + mLastTime = currentTime ; <nl> mHandler . post ( mLooperRunnable ) ; <nl> } <nl> } ; <nl>   } 
public class XMLCatalogConfigurable extends BaseConfigurable { <nl> <nl> public String getHelpTopic ( ) { <nl> - return null ; <nl> + return " XML . Catalog . Dialog " ; <nl> } <nl> <nl>   } 
import javax . inject . Singleton ; <nl> <nl> public class AppModule { <nl> - Application application ; <nl> + private Application application ; <nl> public AppModule ( Application application ) { <nl> this . application = application ; <nl>   } } 
public class ServletResourceManager implements ResourceManager { <nl> <nl> public boolean isResourceChangeListenerSupported ( ) { <nl> - return true ; <nl> + return false ; <nl> } <nl> <nl>   } 
public class LiquidStack <nl> <nl> { public final int hashCode ( ) <nl> { { <nl> - return Objects . hashCode ( itemID , itemMeta ) ; <nl> + return 31 * itemID + itemMeta ; <nl> } <nl> <nl>   } } 
public class GridActivity extends Activity { public void test ( ) { { <nl> mNumItems = mItemLengths . length ; <nl> } <nl> - mGridView . setAdapter ( new MyAdapter ( ) ) ; <nl> + mGridView . setAdapter ( adapter ) ; <nl> setContentView ( view ) ; <nl> } <nl>   } 
public class DefaultTransaction implements Transaction { <nl> <nl> public Transaction autoBind ( boolean autoBind ) { <nl> - this . autoBind = true ; <nl> + this . autoBind = autoBind ; <nl> return this ; <nl> } <nl>   } 
public class LFWDataFetcher extends BaseDataFetcher { <nl> <nl> public DataSet next ( ) { <nl> DataSet next = super . next ( ) ; <nl> - next . normalizeZeroMeanZeroUnitVariance ( ) ; <nl> return next ; <nl> } <nl>   } 
public class SugarRecord < T > { <nl> public Long getId ( ) { <nl> return id ; <nl> } <nl> + public void setId ( Long id ) { <nl> + this . id = id ; <nl> + } <nl> } <nl>   
public class ClassNode extends AnnotatedNode implements Opcodes { <nl> <nl> public void setModifiers ( int modifiers ) { <nl> - this . modifiers = modifiers ; <nl> + redirect ( ) . modifiers = modifiers ; <nl> } <nl> public List < PropertyNode > getProperties ( ) { <nl>   } } 
public final class AssetManager { <nl> <nl> private int mObject ; <nl> - private int mNObject ; <nl> private StringBlock mStringBlocks [ ] = null ; <nl>   } 
import gnu . trove . map . hash . TLongObjectHashMap ; <nl> public class GeoIntentActivity extends OsmandListActivity { <nl> - private static final String TAG = " GeoIntentActivity " ; <nl> private ProgressDialog progressDlg ; <nl> private LatLon location ; <nl>   } 
public class PhoneAccount implements Parcelable { <nl> <nl> <nl> <nl> - <nl> public static final int CAPABILITY_VIDEO_CALLING = 0x8 ; <nl> <nl>   } 
public class Issue237Test { <nl> <nl> public void testReopenSync ( ) throws InterruptedException { <nl> - File file = new File ( " test ( ) - database . mapdb " ) ; <nl> file . delete ( ) ; <nl> DB database = DBMaker . newFileDB ( file ) . make ( ) ; <nl>   } } 
package de . appplant . cordova . plugin . localnotification ; <nl> import java . util . Set ; <nl> + import java . util . Date ; <nl> import org . json . JSONArray ; <nl> import org . json . JSONException ; <nl>   
public abstract class SimplePool < T > { <nl> <nl> public SimplePool ( ) { <nl> - max = 1000 ; <nl> + this ( 1000 ) ; <nl> } <nl> protected abstract T createNew ( ) ; <nl>   } 
import android . view . MenuItem ; <nl> public class MainActivity extends AppCompatActivity { <nl> + <nl> + <nl> <nl> protected void onCreate ( Bundle savedInstanceState ) { <nl> super . onCreate ( savedInstanceState ) ; <nl>   } } 
public final class ActivityStackSupervisor implements DisplayListener { public void test ( ) { <nl> } <nl> } <nl> - class ActivityContainer extends IActivityContainer . Stub { <nl> + class ActivityContainer extends android . app . IActivityContainer . Stub { <nl> final int mStackId ; <nl> IActivityContainerCallback mCallback = null ; <nl> final ActivityStack mStack ; <nl>   } } 
class NioProviderMetadata { public void test ( ) { <nl> } <nl> int autodetectWithoutTimeout ( ) { <nl> - <nl> final int constraintLevel ; <nl> ExecutorService executor = Executors . newCachedThreadPool ( ) ; <nl> boolean success ; <nl>   } } 
public class RenderScriptGL extends RenderScript { public void test ( ) { { <nl> } <nl> mMessageThread = new MessageThread ( this ) ; <nl> mMessageThread . start ( ) ; <nl> + mGCThread = new GCThread ( this ) ; <nl> + mGCThread . start ( ) ; <nl> + <nl> } <nl> <nl>   } 
public class ExternalAnnotationsManagerImpl extends BaseExternalAnnotationsManag <nl> <nl> { public void run ( ) { <nl> try { <nl> - annotationTagProcessor . process ( tag ) ; <nl> + annotationTagProcessor . process ( annotationTag ) ; <nl> commitChanges ( file ) ; <nl> } <nl> catch ( IncorrectOperationException e ) { <nl>   } } } 
public class JsonHttpResponseHandler extends TextHttpResponseHandler { <nl> private static final String LOG_TAG = " JsonHttpResponseHandler " ; <nl> <nl> <nl> <nl> <nl> public JsonHttpResponseHandler ( ) { <nl>   } } 
public abstract class AbstractOutputBuffer < S > implements OutputBuffer { <nl> <nl> <nl> <nl> - protected OutputBuffer outputStreamOutputBuffer ; <nl> + protected final OutputBuffer outputStreamOutputBuffer ; <nl> <nl> <nl>   } 
public class PyUnboundLocalVariableInspection extends LocalInspectionTool { <nl> <nl> public boolean isEnabledByDefault ( ) { <nl> - return false ; <nl> + return true ; <nl> } <nl> <nl>   } 
import java . awt . * ; <nl> <nl> <nl> public abstract class ColoredListCellRenderer extends SimpleColoredComponent implements ListCellRenderer { <nl> - private boolean mySelected ; <nl> + protected boolean mySelected ; <nl> public ColoredListCellRenderer ( ) { <nl> setFocusBorderAroundIcon ( true ) ; <nl>   } } 
public class ItemActivity extends BaseItemActivity { <nl> <nl> public int getCount ( ) { <nl> - return 2 ; <nl> + return story . isShareable ( ) ? 2 : 1 ; <nl> } <nl> <nl>   } 
public class AxolotlService implements OnAdvancedStreamFeaturesLoaded { public void test ( ) { { { <nl> } <nl> } <nl> this . deviceIds . put ( jid , deviceIds ) ; <nl> + mXmppConnectionService . updateConversationUi ( ) ; <nl> mXmppConnectionService . keyStatusUpdated ( null ) ; <nl> } <nl>   } 
public class Box implements IBox { <nl> public Box extendToEncompass ( Box toBeContained ) { <nl> if ( ! toBeContained . initialized ) { <nl> - return ; <nl> + return this ; <nl> } <nl> if ( toBeContained . xMin < xMin ) { <nl>   } } } 
public class MainService extends Service { <nl> <nl> public void onDestroy ( ) { <nl> + unregisterReceiver ( mPackageBroadcastReceiver ) ; <nl> unregisterReceiver ( mDialogReceiver ) ; <nl> unregisterReceiver ( mBroadcastReceiver ) ; <nl> MainController . destroy ( ) ; <nl>   } } 
public class AvailableGPXFragment extends OsmandExpandableListFragment { <nl> <nl> public void onDestroyActionMode ( ActionMode mode ) { <nl> enableSelectionMode ( false ) ; <nl> - runSelection ( false ) ; <nl> allGpxAdapter . notifyDataSetChanged ( ) ; <nl> } <nl>   } 
public class NewActionDialog extends DialogWrapper implements ActionData { { <nl> return myKeyStroke ; <nl> <nl> } <nl> + <nl> + <nl> + protected String getHelpId ( ) { <nl> + return " reference . new . action . dialog " ; <nl> + } <nl> } <nl>   
public class UserScreenNameException extends PortalException { <nl> public String getScreenName ( ) { <nl> return _screenName ; <nl> } <nl> + <nl> + public long getUserId ( ) { <nl> + return _userId ; <nl> + } <nl> private int _exceptionType ; <nl> private String _screenName ; <nl>   } 
public final class TransitionHelper { <nl> <nl> public Object loadTransition ( Context context , int resId ) { { <nl> - return null ; <nl> + return new TransitionStub ( ) ; <nl> } <nl> } <nl>   } 
public class DomModelTreeView extends Wrapper implements DataProvider , Disposabl <nl> { public void dispose ( ) { <nl> myBuilder . dispose ( ) ; <nl> - Disposer . dispose ( this ) ; <nl> } <nl> public SimpleTree getTree ( ) { <nl>   } } 
public class GraphTableCell { <nl> public String getText ( ) { <nl> return text ; <nl> } <nl> + <nl> + public ReadOnlyList < Ref > getRefsToThisCommit ( ) { <nl> + return refsToThisCommit ; <nl> + } <nl> } <nl>   
public class Tmp { public interface OngoingStubbing < T > { <nl> <nl> <nl> <nl> <nl> <nl> <nl> void toReturn ( T value ) ; <nl>   } } 
public abstract class OSoftThread extends Thread implements OService { <nl> public void sendShutdown ( ) { <nl> shutdownFlag = true ; <nl> + interrupt ( ) ; <nl> } <nl> public boolean isShutdownFlag ( ) { <nl>   } } 
public class Publication implements AutoCloseable <nl> <nl> { public long positionLimit ( ) <nl> { { <nl> + ensureOpen ( ) ; <nl> + <nl> return positionLimit . getVolatile ( ) ; <nl> } <nl>   } } 
package com . battlelancer . seriesguide ; <nl> + import com . battlelancer . seriesguide . beta . R ; <nl> import com . battlelancer . seriesguide . ui . SeriesGuidePreferences ; <nl> import com . battlelancer . seriesguide . util . ImageProvider ; <nl> import com . battlelancer . seriesguide . util . Utils ; <nl>   
public class WebView extends AbsoluteLayout <nl> <nl> { public void setTitleBarGravity ( int gravity ) { { <nl> mTitleGravity = gravity ; <nl> + <nl> + invalidate ( ) ; <nl> } <nl> <nl>   } } 
import processing . core . PApplet ; <nl> + <nl> + <nl> + <nl> public class WriteSVG extends PApplet { <nl> public String sketchRenderer ( ) { <nl>   } } 
public class ImsStreamMediaProfile implements Parcelable { <nl> <nl> public ImsStreamMediaProfile ( ) { <nl> - mAudioQuality = AUDIO_QUALITY_AMR_WB ; <nl> + mAudioQuality = AUDIO_QUALITY_NONE ; <nl> mAudioDirection = DIRECTION_SEND_RECEIVE ; <nl> mVideoQuality = VIDEO_QUALITY_NONE ; <nl> mVideoDirection = DIRECTION_INVALID ; <nl>   } } 
public abstract class BaseSearchTestCase { <nl> <nl> <nl> + <nl> public void testSearchWithinDDMStructure ( ) throws Exception { <nl> searchWithinDDMStructure ( ) ; <nl> } <nl>   } 
public class AsmClassGenerator extends ClassGenerator { <nl> <nl> public void visitTryCatchFinally ( TryCatchStatement statement ) { <nl> - onLineNumber ( statement , " visitTryCatchFinally " ) ; <nl> visitStatement ( statement ) ; <nl> MethodVisitor mv = controller . getMethodVisitor ( ) ; <nl> CompileStack compileStack = controller . getCompileStack ( ) ; <nl>   } } 
public class ApplicationInfo extends PackageItemInfo implements Parcelable { public void test ( ) { <nl> manageSpaceActivityName = orig . manageSpaceActivityName ; <nl> descriptionRes = orig . descriptionRes ; <nl> uiOptions = orig . uiOptions ; <nl> + backupAgentName = orig . backupAgentName ; <nl> } <nl>   } 
public class JournalArticleLocalServiceImpl <nl> <nl> { public JournalArticle fetchLatestArticle ( <nl> long groupId , String articleId , int status ) <nl> - throws PortalException , SystemException { <nl> + throws SystemException { <nl> OrderByComparator orderByComparator = new ArticleVersionComparator ( ) ; <nl>   } } } 
public class GoPsiImplUtil { public void test ( ) { <nl> GoType sibling = o . findSiblingType ( ) ; <nl> if ( sibling != null ) return sibling ; <nl> + <nl> GoType fromSpec = findTypeInConstSpec ( o ) ; <nl> if ( fromSpec != null ) return fromSpec ; <nl>   } } 
package com . typesafe . config . impl ; <nl> - import java . io . BufferedInputStream ; <nl> import java . io . BufferedReader ; <nl> import java . io . File ; <nl> import java . io . IOException ; <nl>   
public class Identity implements Transform { public void test ( ) { { <nl> if ( other instanceof Identity ) { <nl> return this ; <nl> } else { <nl> - return new CombinedTransform ( this , other ) ; <nl> + return other ; <nl> } <nl> } <nl> } <nl>   } 
public class ResReferenceValue extends ResIntValue { <nl> <nl> public ResReferenceValue ( ResPackage package_ , int value , boolean theme ) { <nl> - super ( value ) ; <nl> + super ( value , " reference " ) ; <nl> mPackage = package_ ; <nl> mTheme = theme ; <nl> } <nl>   } 
public class FastArray implements Cloneable { <nl> public Object [ ] getArray ( ) { <nl> return data ; <nl> } <nl> + <nl> + public String toString ( ) { <nl> + return toList ( ) . toString ( ) ; <nl> + } <nl> } <nl>   
public class RajawaliRenderer implements GLSurfaceView . Renderer , INode { <nl> public static boolean supportsUIntBuffers = false ; <nl> - private boolean mSceneInitialized ; <nl> + protected boolean mSceneInitialized ; <nl> <nl> <nl> <nl>   } 
public class BuildCraftCore extends BuildCraftMod { <nl> <nl> <nl> - public void cleanRegistries ( WorldEvent . Load load ) { <nl> + } public void cleanRegistries ( WorldEvent . Unload unload ) { <nl> DockingStationRegistry . clear ( ) ; <nl> } <nl>   } 
public class DevicePolicyManagerService extends IDevicePolicyManager . Stub { public void test ( ) { { { { <nl> Slog . e ( LOG_TAG , " Failed to talk to AudioService . " , re ) ; <nl> } <nl> } <nl> + sendChangedNotification ( userHandle ) ; <nl> } <nl> } <nl>   } 
import processing . core . PApplet ; <nl> <nl> <nl> <nl> <nl> <nl> public class XML implements Serializable { public void test ( ) { <nl>   } } 
import voldemort . utils . Utils ; <nl> <nl> public class ClientConfig { <nl> - private volatile int maxConnectionsPerNode = 10 ; <nl> + private volatile int maxConnectionsPerNode = 50 ; <nl> private volatile int maxTotalConnections = 500 ; <nl> private volatile int maxThreads = 5 ; <nl> private volatile int maxQueuedRequests = 50 ; <nl>   } 
public class MessageBusUtil { <nl> <nl> public static MessageBus getMessageBus ( ) { <nl> - return getInstance ( ) . _messageBus ; <nl> + return _messageBus ; <nl> } <nl> public static boolean hasMessageListener ( String destination ) { <nl>   } } 
class GLColorOverlay { <nl> public void setColor ( int color ) { <nl> mColor = color ; <nl> } <nl> - <nl> - public void destroy ( ) { <nl> - } <nl> } <nl>   
public class Allocation extends BaseObj { <nl> <nl> <nl> <nl> <nl> <nl> <nl> <nl> public void setIoInputNotificationHandler ( IoInputNotifier callback ) { <nl>   } } 
public class Tmp { public enum Environment { <nl> } public void environments ( Closure callable ) { { <nl> if ( callable != null ) { <nl> callable . setDelegate ( this ) ; <nl> - callable . setResolveStrategy ( Closure . DELEGATE_FIRST ) ; <nl> callable . call ( ) ; <nl> } <nl> } <nl>   } } 
public class PyActiveSdkConfigurable implements UnnamedConfigurable { <nl> <nl> public void apply ( ) throws ConfigurationException { <nl> + mySdkSettingsWereModified = false ; <nl> Sdk selectedSdk = getSelectedSdk ( ) ; <nl> if ( selectedSdk instanceof PyDetectedSdk ) { <nl> final String sdkName = selectedSdk . getName ( ) ; <nl>   } } } 
public class BasicOutputBuffer extends OutputBuffer { <nl> private int _cur ; <nl> private int _size ; <nl> - private byte [ ] _buffer = new byte [ 512 ] ; <nl> + private byte [ ] _buffer = new byte [ 1024 ] ; <nl> } <nl>   
public class MediaGridAdapter extends CursorAdapter { public void test ( ) { <nl> int placeholderResId = MediaUtils . getPlaceholder ( filepath ) ; <nl> + imageView . setImageResource ( 0 ) ; <nl> imageView . setErrorImageResId ( placeholderResId ) ; <nl> imageView . setDefaultImageResId ( placeholderResId ) ; <nl>   } } 
static class SourceDebugExtensionAttribute extends Attribute { <nl> <nl> } <nl> - static class FnExpr implements Expr { <nl> + static public class FnExpr implements Expr { <nl> static final String CONST_PREFIX = " const__ " ; <nl> IPersistentCollection methods ; <nl> <nl>   } } 
abstract class AbstractTFS extends FileSystem { <nl> <nl> <nl> <nl> - <nl> public abstract String getScheme ( ) ; <nl> <nl>   } 
public class ThreadWithAttributes extends Thread { <nl> <nl> <nl> public final Hashtable getAttributes ( Object control ) { { <nl> + if ( this . control != control ) return null ; <nl> return attributes ; <nl> } <nl> } <nl>   } 
public class FakeHttpLayer { public void test ( ) { { { <nl> } <nl> } <nl> + System . err . println ( " Unexpected HTTP call " + httpRequest . getRequestLine ( ) ) ; <nl> + <nl> return defaultHttpResponse ; <nl> } <nl>   } 
public class TouchFeedbackDrawable extends LayerDrawable { public void test ( ) { <nl> if ( mActiveRipplesCount >= MAX_RIPPLES ) { <nl> Log . e ( LOG_TAG , " Max ripple count exceeded " , new RuntimeException ( ) ) ; <nl> + return ; <nl> } <nl> final Ripple ripple = mTouchedRipples . get ( id ) ; <nl>   } } 
class PacketReader { public void test ( ) { { { <nl> } <nl> } <nl> done = true ; <nl> + <nl> + <nl> + synchronized ( listenerThread ) { <nl> + listenerThread . notify ( ) ; <nl> + } <nl> } <nl> <nl>   } 
public class ParserInterpreter { <nl> <nl> public String getGrammarFileName ( ) { <nl> - return null ; <nl> + throw new UnsupportedOperationException ( " not implemented " ) ; <nl> } <nl> <nl>   } 
public class UpgradeProcessor < S > implements Processor < S > , WebConnection { public void test ( ) { <nl> wrapper . unRead ( leftOverInput ) ; <nl> wrapper . setReadTimeout ( INFINITE_TIMEOUT ) ; <nl> + wrapper . setWriteTimeout ( INFINITE_TIMEOUT ) ; <nl> } <nl>   } 
public class FlushableGZIPOutputStream extends GZIPOutputStream { <nl> <nl> <nl> - public void close ( ) throws IOException { <nl> + } public synchronized void close ( ) throws IOException { <nl> flushLastByte ( ) ; <nl> super . close ( ) ; <nl> } <nl>   } 
public class NutDao extends DaoSupport implements Dao { public void test ( ) { <nl> if ( dropIfExists ) { <nl> expert . dropEntity ( this , en ) ; <nl> } else { <nl> + expert . createRelation ( this , en ) ; <nl> return en ; <nl> } <nl> } <nl>   } 
public class ComparisonFailure extends AssertionFailedError { public void test ( ) { <nl> <nl> <nl> <nl> <nl> <nl> <nl> <nl>   } } 
public class ByteBufferList { <nl> <nl> public ByteBuffer getAll ( ) { <nl> + if ( remaining ( ) == 0 ) <nl> + return EMPTY_BYTEBUFFER ; <nl> read ( remaining ( ) ) ; <nl> return remove ( ) ; <nl> } <nl>   } 
public class RemoteViews implements Parcelable , Filter { public void test ( ) { <nl> ViewGroup . LayoutParams layoutParams = target . getLayoutParams ( ) ; <nl> if ( layoutParams instanceof ViewGroup . MarginLayoutParams ) { <nl> ( ( ViewGroup . MarginLayoutParams ) layoutParams ) . setMarginEnd ( end ) ; <nl> + target . setLayoutParams ( layoutParams ) ; <nl> } <nl> } <nl>   } 
public class EthernetDataTracker implements NetworkStateTracker { public void test ( ) { { { <nl> mNetworkInfo . setExtraInfo ( mHwAddr ) ; <nl> } <nl> } <nl> + <nl> + <nl> + NetworkUtils . stopDhcp ( mIface ) ; <nl> + <nl> reconnect ( ) ; <nl> break ; <nl> } <nl>   } 
import org . json . JSONObject ; <nl> import android . content . Intent ; <nl> import android . net . Uri ; <nl> import android . util . Log ; <nl> + import android . text . Html ; <nl> import com . phonegap . api . Plugin ; <nl> import com . phonegap . api . PluginResult ; <nl>   
public class FindDialog extends DialogWrapper { public void test ( ) { { <nl> setCaretPosition ( comboBox , caretPosition ) ; <nl> } <nl> - scheduleResultsUpdate ( ) ; <nl> + if ( comboBox == myInputComboBox ) scheduleResultsUpdate ( ) ; <nl> validateFindButton ( ) ; <nl> } <nl>   } 
public class UserManager { <nl> <nl> <nl> <nl> - public boolean supportsMultipleUsers ( ) { <nl> + } public static boolean supportsMultipleUsers ( ) { <nl> return getMaxSupportedUsers ( ) > 1 ; <nl> } <nl>   } 
public class Format { { <nl> System . exit ( - 1 ) ; <nl> <nl> } <nl> + <nl> + private Format ( ) { } <nl> } <nl>   
public class Compiler extends AbstractCompiler { public void test ( ) { <nl> InputId inputIdOnAst = newInput . getAstRoot ( this ) . getInputId ( ) ; <nl> Preconditions . checkState ( newInput . getInputId ( ) . equals ( inputIdOnAst ) ) ; <nl> + inputs . remove ( oldInput ) ; <nl> return true ; <nl> } <nl>   } 
public class GradientDrawable extends Drawable { public void test ( ) { { { { <nl> } <nl> } <nl> - mTintFilter = updateTintFilter ( mTintFilter , s . mTint , s . mTintMode ) ; <nl> + mTintFilter = updateTintFilter ( mTintFilter , state . mTint , state . mTintMode ) ; <nl> } <nl> } <nl>   } 
public class FieldNode extends AnnotatedNode implements Opcodes , Variable { <nl> public void setType ( ClassNode type ) { <nl> this . type = type ; <nl> + this . originType = type ; <nl> dynamicTyped |= type == ClassHelper . DYNAMIC_TYPE ; <nl> } <nl>   } 
public abstract class PullToRefreshBase < T extends View > extends LinearLayout { public void test ( ) { <nl> if ( ! isRefreshing ( ) ) { <nl> setRefreshingInternal ( doScroll ) ; <nl> mState = MANUAL_REFRESHING ; <nl> + mCurrentMode = MODE_PULL_DOWN_TO_REFRESH ; <nl> } <nl> } <nl>   } 
public class BridgePowerManager implements IPowerManager { <nl> <nl> <nl> - public boolean isScreenBrightnessBoosted ( ) { <nl> + } public boolean isScreenBrightnessBoosted ( ) throws RemoteException { { <nl> return false ; <nl> } <nl> } <nl>   } 
public class CachedClass { <nl> <nl> <nl> <nl> <nl> <nl> public CachedClass getCachedClass ( ) { <nl> return this ; <nl>   } } 
public final class PluginDescriptionFile { <nl> <nl> <nl> public List < String > getLoadBefore ( ) { <nl> - return softDepend ; <nl> + return loadBefore ; <nl> } <nl> public PluginLoadOrder getLoad ( ) { <nl>   } } 
public class AggregationOptions { <nl> private OutputMode outputMode = OutputMode . INLINE ; <nl> private long maxTimeMS ; <nl> - protected Builder ( ) { <nl> + private Builder ( ) { <nl> } <nl> <nl>   } } 
public class ViewPropertyAnimator { <nl> <nl> public void run ( ) { { <nl> mView . setLayerType ( View . LAYER_TYPE_HARDWARE , null ) ; <nl> + mView . buildLayer ( ) ; <nl> } <nl> } ; <nl> final int currentLayerType = mView . getLayerType ( ) ; <nl>   } 
public class SignInActivity extends FragmentActivity { public void test ( ) { { <nl> <nl> break ; <nl> } <nl> - <nl> + mSignInFragment . smartLockAutoFill ( ) ; <nl> } <nl> <nl>   } 
public class ShowcaseViews { <nl> <nl> private boolean showcaseActionBar ( ItemViewProperties properties ) { <nl> - return properties . itemType >= ItemViewProperties . ID_NOT_IN_ACTIONBAR ; <nl> + return properties . itemType > ItemViewProperties . ID_NOT_IN_ACTIONBAR ; <nl> } <nl> private View . OnClickListener createShowcaseViewDismissListener ( final ShowcaseView showcaseView ) { <nl>   } } 
public class ConstructorCallExpression extends Expression { <nl> public boolean isUsingAnonymousInnerClass ( ) { <nl> return usesAnonymousInnerClass ; <nl> } <nl> - <nl> - <nl> - public boolean isUsingAnnonymousInnerClass ( ) { <nl> - return isUsingAnonymousInnerClass ( ) ; <nl> - } <nl> } <nl>   
public class PSurfaceJOGL implements PSurface { public void test ( ) { <nl> caps . setNumSamples ( PGL . smoothToSamples ( graphics . smooth ) ) ; <nl> caps . setBackgroundOpaque ( true ) ; <nl> caps . setOnscreen ( true ) ; <nl> - pgl . capabilities = caps ; <nl> pgl . setCaps ( caps ) ; <nl> } <nl>   } 
public class LocalFileRequest extends UriRequest { <nl> <nl> public void close ( ) throws IOException { <nl> IOUtil . closeQuietly ( inputStream ) ; <nl> - inputStream = null ; <nl> } <nl> <nl>   } 
import java . util . concurrent . locks . Lock ; <nl> <nl> <nl> <nl> + <nl> class StoreAppend extends Store { public void test ( ) { <nl> <nl>   } } 
public class RebaseErrorTopLevelBuild extends TopLevelBuild { public void test ( ) { { { <nl> } <nl> } <nl> - result = null ; <nl> - <nl> return result ; <nl> } <nl>   } 
public class ConfiguringDefaultReturnValuesTest extends TestBase { <nl> <nl> public void resetDefaultReturnValues ( ) { <nl> MockitoConfiguration . instance ( ) . resetReturnValues ( ) ; <nl> - <nl> } <nl> private final class MyDefaultReturnValues implements ReturnValues { <nl>   } } 
public abstract class GuiAdvancedInterface extends GuiBuildCraft { public void test ( ) { { { <nl> int i2 = ( mouseX - cornerX ) ; <nl> int k2 = mouseY - cornerY ; <nl> drawCreativeTabHoveringText ( s , i2 , k2 ) ; <nl> + RenderHelper . enableGUIStandardItemLighting ( ) ; <nl> } <nl> } <nl> } <nl>   } 
public class FileContentProvider extends ContentProvider { public void test ( ) { <nl> mFileProjectionMap . put ( ProviderTableMeta . FILE_ETAG , <nl> ProviderTableMeta . FILE_ETAG ) ; <nl> mFileProjectionMap . put ( ProviderTableMeta . FILE_SHARE_BY_LINK , <nl> + ProviderTableMeta . FILE_SHARE_BY_LINK ) ; <nl> + mFileProjectionMap . put ( ProviderTableMeta . FILE_PUBLIC_LINK , <nl> ProviderTableMeta . FILE_PUBLIC_LINK ) ; <nl> } <nl>   } 
public abstract class BaseDDMTestCase extends PowerMockito { public void test ( ) { <nl> ddmFormValues . setAvailableLocales ( <nl> createAvailableLocales ( LocaleUtil . US ) ) ; <nl> + ddmFormValues . setDDMForm ( ddmForm ) ; <nl> ddmFormValues . setDefaultLocale ( LocaleUtil . US ) ; <nl> return ddmFormValues ; <nl>   } } 
public class SwipeFlingAdapterView extends BaseFlingAdapterView { public void test ( ) { <nl> mInLayout = false ; <nl> - if ( adapterCount < MIN_ADAPTER_STACK ) mFlingListener . onAdapterAboutToEmpty ( adapterCount ) ; <nl> + if ( adapterCount <= MIN_ADAPTER_STACK ) mFlingListener . onAdapterAboutToEmpty ( adapterCount ) ; <nl> } <nl>   } 
public class FilterDef implements Serializable { <nl> <nl> <nl> <nl> - private Filter filter = null ; <nl> + private transient Filter filter = null ; <nl> public Filter getFilter ( ) { <nl> return filter ; <nl>   } } 
class Tokeniser { public void test ( ) { <nl> } <nl> boolean isAppropriateEndTagToken ( ) { <nl> + if ( lastStartTag == null ) <nl> + return false ; <nl> return tagPending . tagName . equals ( lastStartTag . tagName ) ; <nl> } <nl>   } 
public class Tmp { public interface Configuration { <nl> } public void addProperties ( Properties properties ) ; <nl> + public void clearCache ( ) ; <nl> + <nl> public boolean contains ( String key ) ; <nl> public String get ( String key ) ; <nl>   } 
public class DBCursor implements Iterator < DBObject > , Iterable < DBObject > , Closea <nl> <nl> <nl> <nl> <nl> <nl> { public DBObject curr ( ) { <nl> _checkType ( CursorType . ITERATOR ) ; <nl>   } } 
public class Tmp { public void test ( ) { <nl> <nl> <nl> <nl> <nl> <nl> <nl>   } } 
public class SvnVcs extends AbstractVcs < CommittedChangeList > { <nl> <nl> public RootsConvertor getCustomConvertor ( ) { <nl> + if ( myProject . isDefault ( ) ) return null ; <nl> return getSvnFileUrlMapping ( ) ; <nl> } <nl>   } 
public class GoSdkType extends SdkType { public void test ( ) { { { <nl> modificator . addRoot ( file , OrderRootType . CLASSES ) ; <nl> modificator . addRoot ( file , OrderRootType . SOURCES ) ; <nl> } <nl> + modificator . commitChanges ( ) ; <nl> } <nl> } <nl>   } 
import java . util . * ; <nl> import jsr166y . * ; <nl> import water . Job . JobCancelledException ; <nl> + import water . fvec . Chunk ; <nl> import water . nbhm . NonBlockingHashMap ; <nl> import water . persist . * ; <nl> import water . util . * ; <nl>   
public class XMPPConnection { <nl> <nl> <nl> <nl> - public synchronized AccountManager getAccountManager ( ) { <nl> + } public AccountManager getAccountManager ( ) { <nl> if ( accountManager == null ) { <nl> accountManager = new AccountManager ( this ) ; <nl> } <nl>   } } 
public class AjpMessage { <nl> <nl> - public int getPacketSize ( ) { <nl> - return buf . length ; <nl> - } <nl> - <nl> - <nl> public int processHeader ( boolean toContainer ) { <nl> pos = 0 ; <nl> int mark = getInt ( ) ; <nl>   } } 
public class TermsStatsFacetBuilder extends AbstractFacetBuilder { public void test ( ) { <nl> builder . endObject ( ) ; <nl> + addFilterFacetAndGlobal ( builder , params ) ; <nl> + <nl> builder . endObject ( ) ; <nl> return builder ; <nl>   } } 
public abstract class ConnectionService extends Service { <nl> <nl> <nl> <nl> <nl> <nl> <nl> public Connection onCreateUnknownConnection ( PhoneAccountHandle connectionManagerPhoneAccount , <nl> ConnectionRequest request ) { <nl>   } } 
public class CameraView extends ViewGroup implements AutoFocusCallback { public void test ( ) { <nl> removeView ( previewStrategy . getWidget ( ) ) ; <nl> + onOrientationChange . disable ( ) ; <nl> + <nl> lastPictureOrientation = - 1 ; <nl> } <nl>   } 
public class BubbleView extends FrameLayout { <nl> <nl> public void onPageLoading ( String url ) { <nl> showProgressBar ( true , 0 ) ; <nl> + onReceivedIcon ( null ) ; <nl> } <nl> <nl>   } 
public class Verifier implements GroovyClassVisitor , Opcodes { public void test ( ) { <nl> ConstructorNode dummy = new ConstructorNode ( 0 , null ) ; <nl> addInitialization ( node , dummy ) ; <nl> node . visitContents ( this ) ; <nl> + classNode . setNodeMetaData ( ClassNodeSkip . class , true ) ; <nl> return ; <nl> } <nl>   } 
public class VideoCallImpl extends VideoCall { <nl> <nl> public void removeVideoCallListener ( ) { <nl> - mVideoCallListener = null ; <nl> + mCallback = null ; <nl> try { <nl> mVideoProvider . removeVideoCallback ( mBinder ) ; <nl> } catch ( RemoteException e ) { <nl>   } } } 
public final class RuntimeEnvironment { <nl> <nl> public void setUsingLuceneLocking ( boolean useLuceneLocking ) { <nl> - threadConfig . get ( ) . setOptimizeDatabase ( useLuceneLocking ) ; <nl> + threadConfig . get ( ) . setUsingLuceneLocking ( useLuceneLocking ) ; <nl> } <nl> <nl>   } 
import com . hazelcast . spi . PartitionAwareOperation ; <nl> import java . io . IOException ; <nl> - <nl> public abstract class AbstractAtomicReferenceOperation extends Operation <nl> implements PartitionAwareOperation , IdentifiedDataSerializable { public void test ( ) { <nl>   } } 
final public class MediaCodecList { <nl> <nl> public static MediaCodecInfo getInfoFor ( String codec ) { <nl> + initCodecList ( ) ; <nl> return sAllCodecInfos [ findCodecByName ( codec ) ] ; <nl> } <nl>   } 
public class HttpBrowser { public void test ( ) { <nl> addCookies ( httpRequest ) ; <nl> <nl> - System . out . println ( httpRequest ) ; <nl> this . httpResponse = httpRequest . send ( ) ; <nl> readCookies ( httpResponse ) ; <nl>   } } 
public class Tmp { public interface NearCacheStats extends LocalInstanceStats { <nl> <nl> <nl> <nl> + <nl> long getCreationTime ( ) ; <nl> <nl>   } } 
public class BookTree extends LibraryTree { <nl> public String getSummary ( ) { <nl> if ( ! myShowAuthors ) { <nl> - return super . getSecondString ( ) ; <nl> + return super . getSummary ( ) ; <nl> } <nl> StringBuilder builder = new StringBuilder ( ) ; <nl> int count = 0 ; <nl>   } } 
package processing . app . windows ; <nl> import java . io . File ; <nl> - import java . io . IOException ; <nl> import java . io . UnsupportedEncodingException ; <nl> import com . sun . jna . Library ; <nl>   
public class Typeface { <nl> <nl> private Typeface ( int ni ) { <nl> + if ( ni == 0 ) { <nl> + throw new IllegalStateException ( ) ; <nl> + } <nl> native_instance = ni ; <nl> } <nl>   } 
public final class MediaBrowserCompat { <nl> <nl> <nl> <nl> - static class SubscriptionCallbackApi21 extends SubscriptionCallback { <nl> + public static class SubscriptionCallbackApi21 extends SubscriptionCallback { <nl> SubscriptionCallback mSubscriptionCallback ; <nl> private final Object mSubscriptionCallbackObj ; <nl> private Bundle mOptions ; <nl>   } } } 
public class TwitterRestClient { <nl> <nl> public static void post ( String url , RequestParams params , AsyncHttpResponseHandler responseHandler ) { <nl> - client . get ( getAbsoluteUrl ( url ) , params , responseHandler ) ; <nl> + client . post ( getAbsoluteUrl ( url ) , params , responseHandler ) ; <nl> } <nl> private static String getAbsoluteUrl ( String relativeUrl ) { <nl>   } } 
public class TestHttp2Section_4_2 extends Http2TestBase { public void test ( ) { <nl> <nl> http2Connect ( ) ; <nl> - <nl> + <nl> byte [ ] ping = new byte [ 9 ] ; <nl> <nl>   } } 
public class RepeatedRaptorProfileRouter { <nl> public static final int MAX_DURATION = 60 * 60 * 2 ; <nl> - private static final int MAX_TRANSFERS = 20 ; <nl> - <nl> public ProfileRequest request ; <nl> public Graph graph ; <nl>   } 
public class LiferayLocalRepository <nl> <nl> { public void deleteAll ( ) throws PortalException , SystemException { { <nl> - dlFileEntryTypeLocalService . deleteFileEntryTypes ( getGroupId ( ) ) ; <nl> - <nl> dlFolderLocalService . deleteAll ( getGroupId ( ) ) ; <nl> } <nl>   } } 
public final class DirectedAcyclicGraphTest { public void test ( ) { <nl> mGraph = new DirectedAcyclicGraph < > ( ) ; <nl> } <nl> - <nl> + <nl> <nl> <nl> <nl>   } 
public class CleanupOperationTest { public void test ( ) { <nl> CleanupOperationOptions options = new CleanupOperationOptions ( ) ; <nl> options . setRemoveOldVersions ( false ) ; <nl> + options . setRemoveVersionsByInterval ( false ) ; <nl> options . setMinSecondsBetweenCleanups ( 40000000 ) ; <nl> <nl>   } } 
import org . codehaus . groovy . syntax . Types ; <nl> import java . io . BufferedWriter ; <nl> import java . io . IOException ; <nl> import java . io . Writer ; <nl> - import java . net . MalformedURLException ; <nl> import java . net . URL ; <nl> import java . util . * ; <nl>   
public final class AccessibilityEvent implements Parcelable { public void test ( ) { <nl> mPackageName = null ; <nl> mContentDescription = null ; <nl> mBeforeText = null ; <nl> + mParcelableData = null ; <nl> mText . clear ( ) ; <nl> } <nl>   } 
public class MapRoutePreferencesControl extends MapControls { <nl> <nl> public void hideControls ( FrameLayout layout ) { <nl> removeButton ( layout , settingsAppModeButton ) ; <nl> - layout . removeView ( settingsAppModeButton ) ; <nl> - mapActivity . accessibleContent . remove ( settingsAppModeButton ) ; <nl> } <nl> <nl>   } 
public class JetContentBasedFileSubstitutor implements ContentBasedClassFileProc <nl> <nl> <nl> - <nl> { public PsiFile getDecompiledPsiFile ( PsiFile psiFile ) { { <nl> return JetDecompiledData . getDecompiledData ( ( ClsFileImpl ) psiFile ) . getJetFile ( ) ; <nl> } <nl>   } } 
public abstract class TileMachine extends TileBuildCraft implements IMachine , IP <nl> <nl> { public int powerRequest ( ) { <nl> if ( isActive ( ) ) { <nl> - return getPowerProvider ( ) . getMaxEnergyReceived ( ) ; <nl> + return getPowerProvider ( ) . getActivationEnergy ( ) ; <nl> } else { <nl> return 0 ; <nl> } <nl>   } } 
public class BaseObj { public void test ( ) { <nl> if ( this == obj ) <nl> return true ; <nl> + if ( obj == null ) { <nl> + return false ; <nl> + } <nl> + <nl> if ( getClass ( ) != obj . getClass ( ) ) { <nl> return false ; <nl> } <nl>   } } 
class ExitTransitionCoordinator extends ActivityTransitionCoordinator { <nl> <nl> private static SharedElementListener getListener ( Activity activity , boolean isReturning ) { <nl> - return isReturning ? activity . mExitTransitionListener : activity . mEnterTransitionListener ; <nl> + return isReturning ? activity . mEnterTransitionListener : activity . mExitTransitionListener ; <nl> } <nl> <nl>   } 
public abstract class HardwareRenderer { <nl> public static boolean sSystemRendererDisabled = false ; <nl> <nl> - public static boolean sUseRenderThread = true ; <nl> + public static boolean sUseRenderThread = false ; <nl> private boolean mEnabled ; <nl> private boolean mRequested = true ; <nl>   } 
import org . junit . runner . RunWith ; <nl> public class CompositeRunnerTest { <nl> public static class CompositeWithClass extends CompositeRunner { <nl> } public CompositeWithClass ( Class < ? > type ) { { <nl> - super ( type ) ; <nl> + super ( type , " something " ) ; <nl> } <nl> } <nl>   } 
public class ViewPropertyAnimator { public void test ( ) { <nl> NameValuesHolder nameValuePair = new NameValuesHolder ( constantName , startValue , byValue ) ; <nl> mPendingAnimations . add ( nameValuePair ) ; <nl> mView . removeCallbacks ( mAnimationStarter ) ; <nl> - mView . post ( mAnimationStarter ) ; <nl> + mView . postOnAnimation ( mAnimationStarter ) ; <nl> } <nl> <nl>   } 
public class ContextImpl implements Context . Impl { <nl> <nl> public Map < String , FileItem [ ] > getParameterFileItems ( ) { <nl> + if ( ! formFieldsProcessed ) processFormFields ( ) ; <nl> return fileFieldsMap ; <nl> } <nl>   } 
public class RoutingHelper { public void test ( ) { { { <nl> } <nl> formattedStreetName = formattedStreetName + towards + " " + destination ; <nl> } <nl> - return formattedStreetName ; <nl> + return formattedStreetName . replace ( " ; " , " , " ) ; <nl> } <nl>   } 
public class DataStructures { <nl> private static String string = null ; <nl> private static boolean debug = false ; <nl> private static boolean debugTime = false ; <nl> - private static boolean validate = true ; <nl> + private static boolean validate = false ; <nl> public static void main ( String [ ] args ) { <nl>   } } 
abstract class CommunicationProtocol <nl> { public void test ( ) { { { <nl> dest . writeBytes ( bytes ) ; <nl> } <nl> + channel . close ( ) ; <nl> } <nl> } <nl>   } 
public class Tmp { public interface ResolutionStrategy { <nl> <nl> <nl> <nl> <nl> <nl> <nl> void preferProjectModules ( ) ; <nl>   } } 
public abstract class Visibility extends Transition { <nl> private static final String [ ] sTransitionProperties = { <nl> PROPNAME_VISIBILITY , <nl> + PROPNAME_PARENT , <nl> } ; <nl> private static class VisibilityInfo { <nl>   } } 
public class NumberProgressBar extends View { <nl> private static final String INSTANCE_TEXT_VISBILITY = " text_visibility " ; <nl> private static final int PROGRESS_TEXT_VISIBLE = 0 ; <nl> - private static final int PROGRESS_TEXT_INVISIBLE = 1 ; <nl> - <nl> <nl>   } 
class GitPushTargetPanel extends PushTargetPanel < GitPushTarget > { <nl> <nl> public void fireOnChange ( ) { <nl> - if ( myError == null ) { <nl> + if ( myError != null ) { <nl> return ; <nl> } <nl> String remoteName = myRemoteLabel . getText ( ) ; <nl>   } } } 
public class Liquibase { <nl> <nl> + public ChangeLogParameters getChangeLogParameters ( ) { <nl> + return changeLogParameters ; <nl> + } <nl> + <nl> public Database getDatabase ( ) { <nl> return database ; <nl> } <nl>   } 
public class CodeStyleImportsPanel extends JPanel { <nl> <nl> public boolean isModified ( ) { <nl> - stopTableEditing ( ) ; <nl> boolean isModified = isModified ( myCbUseFQClassNames , mySettings . USE_FQ_CLASS_NAMES ) ; <nl> isModified |= isModified ( myCbUseFQClassNamesInJavaDoc , mySettings . USE_FQ_CLASS_NAMES_IN_JAVADOC ) ; <nl>   } } 
public class ShelvedChangesViewManager implements ProjectComponent { <nl> <nl> public void projectOpened ( ) { <nl> + updateChangesContent ( ) ; <nl> } <nl> public void projectClosed ( ) { <nl>   } } 
public class BubbleDraggable extends BubbleView implements Draggable { <nl> public void destroy ( ) { <nl> <nl> + setOnUpdateListener ( null ) ; <nl> mDraggableHelper . destroy ( ) ; <nl> } <nl>   } 
