public abstract class Connection { <nl> <nl> public static String stateToString ( int state ) { <nl> switch ( state ) { <nl> + case State . INITIALIZING : <nl> + return " INITIALIZING " ; <nl> case State . NEW : <nl> return " NEW " ; <nl> case State . RINGING : <nl>   } } } 
public class NotificationStackScrollLayout extends ViewGroup <nl> <nl> { public void onChildAnimationFinished ( ) { { <nl> - applyCurrentState ( ) ; <nl> + updateChildren ( ) ; <nl> mAnimationEvents . clear ( ) ; <nl> } <nl>   } } 
public abstract class PoolingHttpDestination < C extends Connection > extends HttpD <nl> { public void close ( ) <nl> { { <nl> + super . close ( ) ; <nl> connectionPool . close ( ) ; <nl> } <nl>   } } 
public class CounterLatch { <nl> private final Sync sync ; <nl> private final AtomicLong count ; <nl> - private long signal ; <nl> + private volatile long signal ; <nl> private volatile boolean released = false ; <nl> <nl>   } 
<nl> package groovy . util ; <nl> - import groovy . lang . Closure ; <nl> - import groovy . lang . GroovyObject ; <nl> import groovy . lang . GroovyObjectSupport ; <nl> import groovy . lang . Writable ; <nl> import org . codehaus . groovy . runtime . DefaultGroovyMethods ; <nl>   
public class PyCodeStyleSettingsProvider extends CodeStyleSettingsProvider { <nl> <nl> public String getHelpTopic ( ) { { { <nl> - return null ; <nl> + return " reference . settingsdialog . codestyle . python " ; <nl> } <nl> } ; <nl> } <nl>   } 
public class UpgradeSocial extends UpgradeProcess { public void test ( ) { { { <nl> continue ; <nl> } <nl> + keys . add ( key ) ; <nl> + <nl> return modifiedDate ; <nl> } <nl> } <nl>   } 
public class LightweightHint extends UserDataHolderBase implements Hint { <nl> <nl> - <nl> public boolean vetoesHiding ( ) { <nl> return false ; <nl> } <nl>   } 
public class Tmp { public interface ModelBuilder < T > extends LongRunningOperation { <nl> <nl> <nl> <nl> + <nl> ModelBuilder < T > withCancellationToken ( CancellationToken cancellationToken ) ; <nl> <nl>   } } 
import java . util . ArrayList ; <nl> import java . util . List ; <nl> public class KafkaConfig implements Serializable { <nl> - public static interface BrokerHosts { <nl> + } public static interface BrokerHosts extends Serializable { <nl> } <nl>   } 
public class ShowcaseView extends RelativeLayout <nl> <nl> { public static class Builder { <nl> - final ShowcaseView showcaseView ; <nl> + private final ShowcaseView showcaseView ; <nl> private final Activity activity ; <nl> private ViewGroup parent ; <nl>   } } 
public class EntryEvent extends EventObject { <nl> public int getEventType ( ) { <nl> return eventType ; <nl> } <nl> + <nl> + public String getName ( ) { <nl> + return name ; <nl> + } <nl> <nl> public String toString ( ) { <nl>   } } 
public class DeletionRetentionStrategy extends AbstractIndexCountBasedRetentionS <nl> <nl> { public Class < ? > configurationClass ( ) { { { <nl> - return DeletionRetentionStrategy . class ; <nl> + return DeletionRetentionStrategyConfig . class ; <nl> } <nl> } <nl>   } } 
public class Tmp { public interface CommandSender { <nl> } public boolean isPlayer ( ) ; <nl> <nl> <nl> <nl> <nl> <nl> <nl>   } 
public class Tmp { public interface IdeaPlugin extends DomElement { <nl> <nl> - List < GenericDomValue < String > > getChangeNoteses ( ) ; <nl> + List < GenericDomValue < String > > getChangeNotess ( ) ; <nl> GenericDomValue < String > addChangeNotes ( ) ; <nl>   } } 
class IonDrawable extends Drawable { public void test ( ) { { <nl> imageView . setImageDrawable ( drawable ) ; <nl> IonBitmapRequestBuilder . doAnimation ( imageView , inAnimation , inAnimationResource ) ; <nl> imageViewFuture . setComplete ( e , imageView ) ; <nl> - <nl> } <nl> } <nl>   } 
import static java . lang . String . format ; <nl> <nl> public final class ValidationUtil { <nl> + private ValidationUtil ( ) { } <nl> + <nl> <nl> <nl> <nl>   } 
public class ViewConfiguration { <nl> <nl> <nl> <nl> - private static final int OVERSCROLL_DISTANCE = 2 ; <nl> + private static final int OVERSCROLL_DISTANCE = 0 ; <nl> <nl> <nl>   } 
public class CompilationChecker { <nl> <nl> public boolean ignoreOptionalProblems ( ) { { <nl> - return true ; <nl> + return false ; <nl> } <nl> } <nl>   } 
package water ; <nl> import java . lang . management . ManagementFactory ; <nl> import javax . management . * ; <nl> - import water . persist . Persist ; <nl> import water . util . LinuxProcFileReader ; <nl> import water . util . Log ; <nl> import water . init . * ; <nl>   
public class RoundedAvatarDrawable extends Drawable { <nl> private final int mBitmapHeight ; <nl> private Paint mPaintBorder ; <nl> - private int mBorderWidth = 6 ; <nl> + private int mBorderWidth = 4 ; <nl> public RoundedAvatarDrawable ( Bitmap bitmap ) { <nl> mBitmap = bitmap ; <nl>   } } 
public class EntityLaser extends Entity { <nl> public String getTexture ( ) { <nl> return texture ; <nl> } <nl> - <nl> + <nl> + public int getBrightnessForRender ( float par1 ) <nl> + { <nl> + return 210 ; <nl> + } <nl> } <nl>   
public class AssociationsTest { <nl> <nl> <nl> + <nl> public void checkAdd ( PsiElement element ) throws IncorrectOperationException { <nl> } <nl> public class AssociationsTest { <nl> } <nl> <nl> + <nl> public void checkDelete ( ) throws IncorrectOperationException { <nl> } <nl>   } 
public abstract class Rule { <nl> <nl> <nl> <nl> <nl> public int getFalsePositives ( ) { <nl> return - 1 ; <nl>   } } 
package org . mongodb . util ; <nl> + <nl> public class FieldHelpers { <nl> public static boolean asBoolean ( Object fieldValue ) { <nl>   } } 
public class AsyncTwitterTest extends TestCase implements TwitterListener { <nl> private synchronized void waitForResponse ( ) { <nl> try { <nl> - this . wait ( 15000 ) ; <nl> + this . wait ( 30000 ) ; <nl> } catch ( InterruptedException e ) { <nl> e . printStackTrace ( ) ; <nl> } <nl>   } } 
public abstract class CloseableResource < T > implements Closeable { <nl> <nl> <nl> <nl> + <nl> public abstract void close ( ) ; <nl> } <nl>   
public final class ShortcutUtils { public void test ( ) { { { { <nl> } <nl> } ; <nl> <nl> - AndroidUtils . executeAsyncTask ( shortCutTask ) ; <nl> + AndroidUtils . executeOnPool ( shortCutTask ) ; <nl> } <nl> } <nl>   } 
public class SearchContainerTag < R > extends ParamAndPropertyAncestorTagImpl { public void test ( ) { <nl> _rowChecker = null ; <nl> _searchContainer = null ; <nl> _searchTerms = null ; <nl> + _total = 0 ; <nl> _totalVar = SearchContainer . DEFAULT_TOTAL_VAR ; <nl> _var = SearchContainer . DEFAULT_VAR ; <nl>   } } 
public class TridentTopologyBuilder { public void test ( ) { { { <nl> bd . allGrouping ( masterCoordinator ( batchGroup ) , MasterBatchCoordinator . COMMIT_STREAM_ID ) ; <nl> } <nl> for ( Map m : c . componentConfs ) { <nl> - scd . addConfigurations ( m ) ; <nl> + bd . addConfigurations ( m ) ; <nl> } <nl> } <nl> } <nl>   } 
public class AsyncHttpClient { public void test ( ) { <nl> ConnManagerParams . setMaxTotalConnections ( httpParams , DEFAULT_MAX_CONNECTIONS ) ; <nl> HttpConnectionParams . setSoTimeout ( httpParams , socketTimeout ) ; <nl> + HttpConnectionParams . setConnectionTimeout ( httpParams , socketTimout ) ; <nl> HttpConnectionParams . setTcpNoDelay ( httpParams , true ) ; <nl> HttpConnectionParams . setSocketBufferSize ( httpParams , DEFAULT_SOCKET_BUFFER_SIZE ) ; <nl>   } } 
public class EnterpriseServerBuilder extends ServerBuilder <nl> <nl> { public void stop ( ) <nl> { { { <nl> + super . stop ( ) ; <nl> configFile . delete ( ) ; <nl> } <nl> } ; <nl>   } } 
public final class ResourceLeakDetector < T > { <nl> <nl> <nl> <nl> - <nl> public static boolean isEnabled ( ) { <nl> return ! disabled ; <nl> } <nl>   } 
package info . ata4 . unity ; <nl> <nl> public class DisUnity { <nl> - private static final String VERSION = " 0 . 2 . 1 " ; <nl> + private static final String VERSION = " 0 . 2 . 2 " ; <nl> public static String getVersion ( ) { <nl> return VERSION ; <nl>   } } 
public class AudioManager { public void test ( ) { <nl> } <nl> <nl> <nl> <nl> <nl> <nl> <nl>   } 
public class Tmp { public interface Property { <nl> Boolean getReadOnly ( ) ; <nl> - void setReadOnly ( Boolean example ) ; <nl> + void setReadOnly ( Boolean readOnly ) ; <nl> Integer getPosition ( ) ; <nl>   } } 
public final class CheckForInOverArray <nl> <nl> { public void hotSwapScript ( Node scriptRoot , Node originalRoot ) { { { <nl> - NodeTraversal . traverseEs6 ( compiler , originalRoot , this ) ; <nl> + NodeTraversal . traverseEs6 ( compiler , scriptRoot , this ) ; <nl> } <nl> } <nl>   } } 
public class ConfigureDelegate extends GroovyObjectSupport { public void test ( ) { { <nl> <nl> } <nl> - onMissing . execute ( name ) ; <nl> - <nl> <nl> return delegate . getProperty ( name ) ; <nl> } <nl>   } 
public class ActionUtil { public void test ( ) { { { <nl> presentation . putClientProperty ( WAS_ENABLED_BEFORE_DUMB , enabledBeforeUpdate ) ; <nl> } <nl> presentation . setEnabled ( false ) ; <nl> - presentation . setVisible ( false ) ; <nl> } <nl> } <nl>   } 
import com . intellij . openapi . fileTypes . SyntaxHighlighter ; <nl> import org . jetbrains . annotations . NotNull ; <nl> public class JetSyntaxHighlighterFactory extends SingleLazyInstanceSyntaxHighlighterFactory { <nl> + <nl> <nl> protected SyntaxHighlighter createHighlighter ( ) { <nl> return new JetHighlighter ( ) ; <nl>   } } 
public class PipePowerWood extends Pipe implements IPowerReceptor { <nl> <nl> public void setPowerProvider ( IPowerProvider provider ) { <nl> - provider = powerProvider ; <nl> + powerProvider = provider ; <nl> } <nl> <nl>   } 
public class HdfsFileInputStreamIntegrationTest { <nl> <nl> <nl> - public void seekTest ( ) throws IOException { <nl> + } public void inMemSeekTest ( ) throws IOException { <nl> seekTest ( mInMemInputStream ) ; <nl> } <nl>   } 
public class RegTestParams extends TestNet2Params { public void test ( ) { <nl> super ( ) ; <nl> interval = 10000 ; <nl> proofOfWorkLimit = PROOF_OF_WORK_LIMIT ; <nl> - subsidyDecreaseBlockCount = 10000 ; <nl> + subsidyDecreaseBlockCount = 150 ; <nl> port = 18444 ; <nl> } <nl>   } 
public class EmailLens extends Lens { public void test ( ) { <nl> if ( ! attachments . isEmpty ( ) ) { <nl> intent . putParcelableArrayListExtra ( Intent . EXTRA_STREAM , attachments ) ; <nl> + intent . addFlags ( Intent . FLAG_GRANT_READ_URI_PERMISSION ) ; <nl> } <nl> return intent ; <nl>   } } 
import java . util . * ; <nl> <nl> <nl> <nl> - public class DBMaker < DBMakerT extends DBMaker < DBMakerT > > { <nl> + public class DBMaker < DBMakerT extends DBMaker > { <nl> protected final String TRUE = " true " ; <nl>   } } 
public abstract class Editor extends JFrame implements RunnerListener { <nl> <nl> public void actionPerformed ( ActionEvent e ) { <nl> - System . out . println ( e . getActionCommand ( ) ) ; <nl> handleCut ( ) ; <nl> } <nl>   } 
public class SharedLibraryTest { <nl> <nl> public static void afterClass ( ) throws BrutException { <nl> - <nl> + OS . rmdir ( sTmpDir ) ; <nl> } <nl> <nl>   } 
public class DexBuffer { public void test ( ) { { <nl> } <nl> sb . append ( " ) " ) ; <nl> + sb . append ( returnType ) ; <nl> return sb . toString ( ) ; <nl> } <nl>   } 
public class JavaxJsonTreeGlassfish extends JavaxJsonTree { <nl> <nl> public String getName ( ) { <nl> - return " javax - json / tree / glassfish " ; <nl> + return " json / javax - tree / glassfish " ; <nl> } <nl> public static void register ( TestGroups groups ) { <nl>   } } 
public class DisUnityProcessor implements Runnable , FileVisitor < Path > { public void test ( ) { <nl> if ( ! Files . exists ( outputDir ) ) { <nl> Files . createDirectory ( outputDir ) ; <nl> } <nl> + <nl> + action . setOutputDir ( outputDir ) ; <nl> } <nl> AssetBundle ab = new AssetBundle ( ) ; <nl>   } 
import java . util . Map ; <nl> public class AWSClient { <nl> private String endpoint ; <nl> - private String defaultHostHeader = " ec2 . amazonaws . com " ; <nl> private final AwsConfig awsConfig ; <nl>   } 
public class DLFileEntryAssetRenderer <nl> <nl> { public String getSummary ( Locale locale ) { { <nl> - return HtmlUtil . stripHtml ( _fileEntry . getDescription ( ) ) ; <nl> + return _fileEntry . getDescription ( ) ; <nl> } <nl> <nl>   } } 
public class Context <nl> <nl> <nl> <nl> + <nl> { public static final int FEATURE_PARENT_PROTO_PROPRTIES = 5 ; <nl> <nl>   } 
public class Media implements java . io . Serializable { <nl> public Player player ; <nl> - <nl> public String copyright ; <nl> public Media ( ) { } <nl>   } 
import org . ejml . simple . SimpleMatrix ; <nl> <nl> <nl> public class SimpleTensor implements Serializable { <nl> - private SimpleMatrix [ ] slices ; <nl> + private final SimpleMatrix [ ] slices ; <nl> final int numRows ; <nl> final int numCols ; <nl>   } 
public class YahooAccountRegistration { <nl> private String password ; <nl> - private boolean rememberPassword ; <nl> + private boolean rememberPassword = true ; <nl> <nl> <nl>   } 
public final class WebViewCore { <nl> <nl> public boolean dispatchWebKitEvent ( MotionEvent event , int eventType , int flags ) { <nl> + if ( mNativeClass == 0 ) { <nl> + return false ; <nl> + } <nl> switch ( eventType ) { <nl> case WebViewInputDispatcher . EVENT_TYPE_CLICK : <nl> return nativeMouseClick ( mNativeClass ) ; <nl>   } } } 
public class CalendarCellView extends TextView { <nl> public void setHighlighted ( boolean highlighted ) { <nl> isHighlighted = highlighted ; <nl> + refreshDrawableState ( ) ; <nl> } <nl> protected int [ ] onCreateDrawableState ( int extraSpace ) { <nl>   } } 
public class CommandLine { public void test ( ) { { <nl> if ( cll . handleFile ( file ) ) { <nl> found = true ; <nl> args [ i ] = null ; <nl> - break ; <nl> } <nl> } <nl> } <nl>   } 
public class SubsamplingScaleImageView extends View { <nl> <nl> <nl> private void reset ( boolean newImage ) { <nl> - setOnTouchListener ( null ) ; <nl> scale = 0f ; <nl> scaleStart = 0f ; <nl> vTranslate = null ; <nl>   } } 
import android . view . animation . Interpolator ; <nl> import android . widget . FrameLayout ; <nl> import android . widget . Scroller ; <nl> - import com . slidinglayersample . R ; <nl> - <nl> public class SlidingLayer extends FrameLayout { <nl> <nl>   } 
public class TestStateStorage implements Disposable { public void test ( ) { <nl> if ( myMap == null ) return ; <nl> try { <nl> myMap . close ( ) ; <nl> + myMap = null ; <nl> } <nl> catch ( IOException e ) { <nl> LOG . error ( e ) ; <nl>   } } } 
public class RenderScriptGL extends RenderScript { public void test ( ) { { <nl> } <nl> mMessageThread = new MessageThread ( this ) ; <nl> mMessageThread . start ( ) ; <nl> + mGCThread = new GCThread ( this ) ; <nl> + mGCThread . start ( ) ; <nl> + <nl> } <nl> <nl>   } 
public class GridLabelRenderer { <nl> <nl> <nl> public int getLabelVerticalSecondScaleWidth ( ) { <nl> - return mLabelVerticalSecondScaleWidth ; <nl> + return mLabelVerticalSecondScaleWidth == null ? 0 : mLabelVerticalSecondScaleWidth ; <nl> } <nl> <nl>   } 
public class ContributionTab { <nl> <nl> <nl> <nl> private void createComponents ( ) { <nl> Container pane = panel ; <nl>   } } 
public class DeleteTest extends SchemaLoader <nl> { public static void tearDown ( ) throws Exception <nl> { { <nl> cluster . close ( ) ; <nl> - cassandra . stop ( ) ; <nl> } <nl> <nl>   } } 
public class JournalIntegrationTest { public void test ( ) { { <nl> } <nl> fsMaster . stop ( ) ; <nl> } <nl> - <nl> - <nl> <nl> <nl> <nl>   } 
public abstract class Logger { public void test ( ) { { <nl> error ( resultMessage , new Throwable ( ) ) ; <nl> } <nl> + <nl> return value ; <nl> } <nl>   } 
public class HgProjectConfigurable implements SearchableConfigurable { <nl> <nl> public String getHelpTopic ( ) { <nl> - return null ; <nl> + return " project . propVCSSupport . VCSs . Mercurial " ; <nl> } <nl> public JComponent createComponent ( ) { <nl>   } } 
public final class TvContract { <nl> <nl> <nl> <nl> - public static final String PARAM_BROWSABLE_ONLY = " browable_only " ; <nl> + public static final String PARAM_BROWSABLE_ONLY = " browsable_only " ; <nl> <nl> <nl>   } 
public class IWindowManagerImpl implements IWindowManager { <nl> <nl> public void overridePendingAppTransitionMultiThumb ( AppTransitionAnimationSpec [ ] specs , <nl> - IRemoteCallback callback , boolean scaleUp ) { <nl> + IRemoteCallback callback0 , IRemoteCallback callback1 , boolean scaleUp ) { <nl> <nl> } <nl>   } } 
public class MyAccountPageTest { <nl> <nl> public static void setUp ( ) { <nl> + orchestrator . resetData ( ) ; <nl> adminWsClient = newAdminWsClient ( orchestrator ) ; <nl> } <nl>   } 
public class Tmp { public enum TextureFormat { <nl> DXT1 , <nl> UNUSED11 , <nl> DXT5 , <nl> - UNUSED13 , <nl> + RGBA4444 , <nl> UNUSED14 , <nl> UNUSED15 , <nl> UNUSED16 , <nl>   } } 
public class SQLiteAssetHelper extends SQLiteOpenHelper { <nl> <nl> <nl> public void setForcedUpgradeVersion ( int version ) { <nl> - mForcedUpgradeVersion = version ; <nl> + setForcedUpgrade ( version ) ; <nl> } <nl> <nl>   } 
public final class SpongeGame implements Game { <nl> <nl> + <nl> public String getAPIVersion ( ) { <nl> return apiVersion != null ? apiVersion : " UNKNOWN " ; <nl> } <nl>   } 
public class OkHttpClientHttpRequestFactoryTests extends AbstractHttpRequestFact <nl> <nl> <nl> { public void httpMethods ( ) throws Exception { { <nl> + super . httpMethods ( ) ; <nl> assertHttpMethod ( " patch " , HttpMethod . PATCH ) ; <nl> } <nl>   } } 
public class SpellCheckerSession { <nl> private static String taskToString ( int task ) { <nl> switch ( task ) { <nl> case TASK_CANCEL : <nl> - return " STATE_WAIT_CONNECTION " ; <nl> + return " TASK_CANCEL " ; <nl> case TASK_GET_SUGGESTIONS_MULTIPLE : <nl> return " TASK_GET_SUGGESTIONS_MULTIPLE " ; <nl> case TASK_CLOSE : <nl>   } } } 
public class PyExceptionBreakpointProperties extends ExceptionBreakpointProperti <nl> { public PyExceptionBreakpointProperties ( final String exception ) { { <nl> myException = exception ; <nl> myNotifyOnTerminate = true ; <nl> - myIgnoreLibraries = true ; <nl> + myIgnoreLibraries = false ; <nl> } <nl> <nl>   } } 
public class ODistributedThreadLocal extends ThreadLocal < Boolean > { <nl> public static ODistributedThreadLocal INSTANCE = new ODistributedThreadLocal ( ) ; <nl> public boolean distributedExecution = false ; <nl> + public String distributedRequestSource = null ; <nl> } <nl>   
import java . util . List ; <nl> <nl> <nl> <nl> - public class Undertow { <nl> + public final class Undertow { <nl> private final int bufferSize ; <nl> private final int buffersPerRegion ; <nl>   } } 
public class DeleteMountPointEntry implements JournalEntry { <nl> <nl> public JournalEntryType getType ( ) { <nl> - return JournalEntryType . ADD_MOUNTPOINT ; <nl> + return JournalEntryType . DELETE_MOUNTPOINT ; <nl> } <nl> <nl>   } 
public class ServerRestInterfaceRealm extends AuthorizingRealm { public void test ( ) { <nl> setAuthenticationTokenClass ( SessionIdAuthenticationToken . class ) ; <nl> <nl> setCredentialsMatcher ( new AllowAllCredentialsMatcher ( ) ) ; <nl> + setCachingEnabled ( false ) ; <nl> } <nl> <nl>   } 
<nl> package com . phonegap ; <nl> - import java . io . EOFException ; <nl> import java . io . FileOutputStream ; <nl> import java . io . IOException ; <nl> import java . io . InputStream ; <nl>   
abstract public class ContentProviderStoreBase < T , U > { <nl> <nl> abstract protected U getIdFor ( T item ) ; <nl> - abstract protected Uri getContentUri ( ) ; <nl> + abstract public Uri getContentUri ( ) ; <nl> } <nl>   
public class TvView extends SurfaceView { public void test ( ) { <nl> if ( mSession != null ) { <nl> release ( ) ; <nl> } <nl> + mSessionCallback = null ; <nl> } <nl> <nl>   } 
public class PortalImpl implements Portal { public void test ( ) { { { <nl> } <nl> } <nl> + if ( portletId . equals ( PortletKeys . LAYOUTS_ADMIN ) ) { <nl> + return true ; <nl> + } <nl> + <nl> return false ; <nl> } <nl>   } 
public class Tmp { public interface Channel { <nl> <nl> <nl> <nl> <nl> <nl> } public void setName ( String name ) ; <nl>   } 
public class TupleInfo <nl> { public enum Type <nl> { <nl> FIXED_INT_64 ( SIZE_OF_LONG ) , <nl> - DOUBLE ( SIZE_OF_DOUBLE ) , <nl> - VARIABLE_BINARY ( - 1 ) ; <nl> + VARIABLE_BINARY ( - 1 ) , <nl> + DOUBLE ( SIZE_OF_DOUBLE ) ; <nl> private final int size ; <nl>   } } 
public class MetaContactImpl <nl> { public void test ( ) { <nl> synchronized ( parentGroupModLock ) <nl> { <nl> - int totalStatus = 0 ; <nl> + this . totalStatus = 0 ; <nl> <nl> <nl>   } } } 
public class ConfigurationBundle { <nl> <nl> private Set < Dashboard > dashboards = Collections . emptySet ( ) ; <nl> <nl> - <nl> private Set < GrokPattern > grokPatterns = Collections . emptySet ( ) ; <nl> public String getId ( ) { <nl>   } } 
public class ItemWrench extends ItemBuildCraft implements IToolWrench { <nl> public ItemWrench ( int i ) { <nl> super ( i ) ; <nl> + setFull3D ( ) ; <nl> } <nl> <nl>   } 
public class PyCodeStyleSettingsProvider extends CodeStyleSettingsProvider { <nl> public String getConfigurableDisplayName ( ) { <nl> return " Python " ; <nl> } <nl> + <nl> + <nl> + public boolean hasSettingsPage ( ) { <nl> + return false ; <nl> + } <nl> } <nl>   
public class PortletRequestDispatcherImplTest { <nl> <nl> <nl> + public String getPortletName ( ) { <nl> + return StringPool . BLANK ; <nl> + } <nl> + <nl> + <nl> public URLEncoder getURLEncoderInstance ( ) { <nl> return null ; <nl> } <nl>   } 
public class AndroidSdkImpl extends AndroidSdk { <nl> <nl> public int getPlatformToolsRevision ( ) { <nl> - <nl> - return 7 ; <nl> + return myPlatformToolsRevision ; <nl> } <nl> private static class MyTargetWrapper implements IAndroidTarget { <nl>   } } 
final class BasicInvocationFuture < E > implements InternalCompletableFuture < E > { public void test ( ) { { { { <nl> wait ( currentTimeoutMs ) ; <nl> currentTimeoutMs = pollTimeoutMs - ( Clock . currentTimeMillis ( ) - waitStart ) ; <nl> } <nl> - notifyAll ( ) ; <nl> } <nl> } <nl> } <nl>   } 
public class DependencyParseAnnotator extends SentenceAnnotator { <nl> <nl> public Set < Requirement > requirementsSatisfied ( ) { <nl> - return new HashSet < > ( ) ; <nl> + return Collections . singleton ( DEPENDENCY_REQUIREMENT ) ; <nl> } <nl> public static String signature ( String annotatorName , Properties props ) { <nl>   } } 
public abstract class SplitWordsMacro extends MacroBase { <nl> <nl> <nl> protected String convertCase ( String word ) { <nl> - <nl> return word ; <nl> } <nl> } <nl>   
public class SingleInspectionProfilePanel extends JPanel { <nl> <nl> protected void onScopeAdded ( ) { <nl> + myTreeTable . updateUI ( ) ; <nl> updateOptionsAndDescriptionPanel ( ) ; <nl> } <nl>   } 
public class TourViewActivity extends SherlockFragmentActivity { public void test ( ) { <nl> try { <nl> dlg . dismiss ( ) ; <nl> } catch ( Exception ex ) { <nl> - <nl> + ex . printStackTrace ( ) ; <nl> } <nl> startTourView ( ) ; <nl> } ; <nl>   } 
public class CompressionServletResponseWrapper <nl> <nl> <nl> <nl> <nl> <nl> <nl> { public void setCompressionThreshold ( int threshold ) { <nl> if ( debug > 1 ) { <nl>   } } } 
public class BytesType extends AbstractType <nl> { public String getString ( byte [ ] bytes ) <nl> { { { <nl> - return Arrays . toString ( bytes ) ; <nl> + return FBUtilities . bytesToHex ( bytes ) ; <nl> } <nl> } <nl>   } } 
public class NioEndpoint extends AbstractEndpoint < NioChannel > { public void test ( ) { { { <nl> } <nl> } <nl> writeLatch = null ; <nl> - setReadTimeout ( soTimeout ) ; <nl> - setWriteTimeout ( soTimeout ) ; <nl> } <nl>   } 
public class Activity extends ContextThemeWrapper <nl> <nl> <nl> { public boolean popBackStack ( ) { { <nl> - return popBackStack ( null , - 1 ) ; <nl> + return popBackStack ( null , 0 ) ; <nl> } <nl> <nl>   } } 
public class ChatRoomMemberIrcImpl <nl> <nl> { public Contact getContact ( ) <nl> { { <nl> + <nl> + <nl> return null ; <nl> } <nl>   } } 
public class ViewPager extends ViewGroup { public void test ( ) { { { { <nl> } <nl> } <nl> - populate ( newCurrItem ) ; <nl> + setCurrentItemInternal ( newCurrItem , false , true ) ; <nl> requestLayout ( ) ; <nl> } <nl> } <nl>   } 
package javax . el ; <nl> <nl> <nl> <nl> <nl> public class ELClass { public void test ( ) { <nl>   } } 
public class GsdEnterAlwaysCollapsedParallaxFragment extends BaseFeatureFragment <nl> <nl> { public int getContentLayout ( ) { { <nl> - return R . layout . fragment_gsd_enter_always_collapsed ; <nl> + return R . layout . fragment_gsd_enter_always_collapsed_parallax ; <nl> } <nl> <nl>   } } 
public class ClassGen { <nl> <nl> public ClassGen getParentGen ( ) { <nl> - return parentGen ; <nl> + return parentGen == null ? this : parentGen ; <nl> } <nl> public AnnotationGen getAnnotationGen ( ) { <nl>   } } 
public class ViewPagerActions { <nl> <nl> public String getDescription ( ) { <nl> - return " ViewPager move one page to the right " ; <nl> + return " ViewPager move to a specific page " ; <nl> } <nl> <nl>   } 
public class BufferedTokenStream < T extends Token > implements TokenStream { <nl> <nl> public void reset ( ) { <nl> - p = 0 ; <nl> + seek ( 0 ) ; <nl> } <nl> <nl>   } 
public final class Path_Delegate { <nl> <nl> private static void native_destroyMeasure ( long nPathMeasure ) { <nl> - sPathMeasureManager . removeJavaReferenceFor ( nPathMeasure ) ; <nl> + <nl> } <nl> <nl>   } 
public final class ClientContext { <nl> private static TachyonConf sTachyonConf ; <nl> private static InetSocketAddress sMasterAddress ; <nl> private static ClientMetrics sClientMetrics ; <nl> - private static Random sRandom ; <nl> private static boolean sInitialized ; <nl> static { <nl>   } } 
public class WikiPageTrashHandlerTest extends BaseTrashHandlerTestCase { <nl> <nl> <nl> - <nl> public void testAddPageWithSameTitleAsImplicitlyDeletedPageVersion ( ) <nl> throws Exception { <nl>   } } 
public class Sketch { public void test ( ) { <nl> current = code [ which ] ; <nl> currentIndex = which ; <nl> current . visited = System . currentTimeMillis ( ) ; <nl> + <nl> editor . setCode ( current ) ; <nl> <nl> editor . header . repaint ( ) ; <nl>   } } 
public class UserLocalServiceImpl extends UserLocalServiceBaseImpl { public void test ( ) { <nl> User user = userPersistence . findByPrimaryKey ( userId ) ; <nl> + user . setModifiedDate ( modifiedDate ) ; <nl> + <nl> userPersistence . update ( user ) ; <nl> return user ; <nl>   } } 
public final class ScreenMagnifier extends IMagnificationCallbacks . Stub <nl> { public MagnifiedContentInteractonStateHandler ( Context context ) { { <nl> mScaleGestureDetector = new ScaleGestureDetector ( context , this ) ; <nl> + mScaleGestureDetector . setQuickScaleEnabled ( false ) ; <nl> mGestureDetector = new GestureDetector ( context , this ) ; <nl> } <nl>   } } 
public class BackgroundTaskQueuingMessageListener extends BaseMessageListener { public void test ( ) { <nl> _backgroundTaskLocalService . fetchFirstBackgroundTask ( <nl> taskExecutorClassName , BackgroundTaskConstants . STATUS_QUEUED ) ; <nl> - if ( backgroundTask != null ) { <nl> + if ( backgroundTask == null ) { <nl> return ; <nl> } <nl>   } } } 
public class BackupImapStore extends ImapStore { public void test ( ) { { <nl> Collections . addAll ( messages , msgs ) ; <nl> } <nl> + Collections . reverse ( messages ) ; <nl> + <nl> return messages ; <nl> } <nl>   } 
public final class Timber { <nl> ; <nl> private Timber ( ) { <nl> + throw new AssertionError ( " No instances . " ) ; <nl> } <nl> <nl>   } 
public class JavaScriptTarget extends Target { <nl> <nl> public String getVersion ( ) { <nl> - return " 4 . 5 " ; <nl> + return " 4 . 5 . 1 " ; <nl> } <nl> public Set < String > getBadWords ( ) { <nl>   } } 
public class OsmEditingPlugin extends OsmandPlugin { <nl> <nl> <nl> - public void mapActivityCreate ( MapActivity activity ) { <nl> - } <nl> - <nl> - <nl> - <nl> public Class < ? extends Activity > getSettingsActivity ( ) { <nl> return SettingsOsmEditingActivity . class ; <nl> } <nl>   } 
import java . nio . ByteBuffer ; <nl> <nl> <nl> - final class Murmur3 { <nl> + public final class Murmur3 { <nl> private static final int seed = 0 ; <nl> private static final int C1 = 0xcc9e2d51 ; <nl> private static final int C2 = 0x1b873593 ; <nl>   } } 
public class Tmp { public interface WorkflowedModel { <nl> } public boolean isExpired ( ) ; <nl> + public boolean isInTrash ( ) ; <nl> + <nl> public boolean isPending ( ) ; <nl> public void setStatus ( int status ) ; <nl>   } 
public class SQLiteDatabase extends SQLiteClosable { <nl> private static final int LOCK_ACQUIRED_WARNING_THREAD_TIME_IN_MS = 100 ; <nl> private static final int LOCK_ACQUIRED_WARNING_TIME_IN_MS_ALWAYS_PRINT = 2000 ; <nl> - private static final int SLEEP_AFTER_YIELD_QUANTUM = 500 ; <nl> + private static final int SLEEP_AFTER_YIELD_QUANTUM = 1000 ; <nl> private long mLastLockMessageTime = 0L ; <nl>   } 
public class MarkupTemplateEngine extends TemplateEngine { <nl> <nl> } <nl> - static class TemplateResource { <nl> + public static class TemplateResource { <nl> private final String baseName ; <nl> private final String locale ; <nl> private final String extension ; <nl>   } } 
public class FileTransferProxy extends BasicModule <nl> <nl> { public boolean hasInfo ( String name , String node , JID senderJID ) { { <nl> - Log . info ( " Name Info : " + name ) ; <nl> return true ; <nl> } <nl>   } } 
public class SiteSettingsFragment extends PreferenceFragment <nl> <nl> { public void onDismiss ( DialogInterface dialog ) { { <nl> + mSiteSettings . saveSettings ( ) ; <nl> mEditingList = null ; <nl> } <nl>   } } 
import android . util . FloatMath ; <nl> <nl> <nl> <nl> - public final class Number3D { <nl> + public class Number3D { <nl> } public float x ; <nl> public float y ; <nl> public float z ; <nl>   } 
public class DBMaker { <nl> <nl> <nl> <nl> - public DBMaker asyncThreadSetDaemon ( ) { <nl> + } public DBMaker asyncThreadDaemonEnable ( ) { <nl> this . _asyncThreadDaemon = true ; <nl> return this ; <nl> } <nl>   } 
public class Tmp { public interface DruidAbstractDataSourceMBean { <nl> long getCreateErrorCount ( ) ; <nl> int getMaxActive ( ) ; <nl> + <nl> + void setMaxActive ( int maxActive ) ; <nl> long getTimeBetweenConnectErrorMillis ( ) ; <nl>   } } 
public abstract class AbstractActiveService { <nl> public void activate ( ) { <nl> + shutdown = false ; <nl> start ( ) ; <nl> } <nl>   } 
public class Capture extends PImage implements PConstants { public void test ( ) { <nl> capturing = true ; <nl> pipeline . play ( ) ; <nl> - pipeline . getState ( ) ; <nl> if ( init ) { <nl> checkResIsValid ( ) ; <nl>   } } } 
public class PyUtil { <nl> <nl> public static boolean isPackage ( PsiFile file ) { <nl> - return turnInitIntoDir ( file ) != null ; <nl> + return PyNames . INIT_DOT_PY . equals ( file . getName ( ) ) ; <nl> } <nl> <nl>   } 
abstract public class TreeImportingParserBase implements ImportingParser { public void test ( ) { { { <nl> } <nl> } <nl> + rootColumnGroup . tabulate ( ) ; <nl> XmlImportUtilities . createColumnsFromImport ( project , rootColumnGroup ) ; <nl> project . columnModel . update ( ) ; <nl> } <nl>   } 
public class DrawHandler extends Handler { <nl> <nl> public void quit ( ) { <nl> - removeMessages ( QUIT ) ; <nl> sendEmptyMessage ( QUIT ) ; <nl> } <nl>   } 
public final class DrawMessage { <nl> public void setLastInChain ( boolean lastInChain ) { <nl> this . lastInChain = lastInChain ; <nl> } <nl> - <nl>   } 
public class Camera { <nl> <nl> <nl> public List < Area > getMeteringAreas ( ) { <nl> - return splitArea ( KEY_METERING_AREAS ) ; <nl> + return splitArea ( get ( KEY_METERING_AREAS ) ) ; <nl> } <nl> <nl>   } 
public class MetaDataSerializer extends EntitySerializer { <nl> private final String beanSuffix ; <nl> + <nl> private final String beanPackageName ; <nl> private final NamingStrategy namingStrategy ; <nl>   } 
public class PApplet extends Applet <nl> <nl> <nl> { public String dataPath ( String where ) { { <nl> - return path + File . separator + " data " + where ; <nl> + return path + File . separator + " data " + File . separator + where ; <nl> } <nl>   } } 
public class SiteMembershipsControlPanelEntry extends BaseControlPanelEntry { public void test ( ) { { <nl> return true ; <nl> } <nl> + if ( ! group . isManualMembership ( ) ) { <nl> + return true ; <nl> + } <nl> + <nl> return false ; <nl> } <nl>   } 
public class ViewPager extends ViewGroup { <nl> protected void onAttachedToWindow ( ) { <nl> super . onAttachedToWindow ( ) ; <nl> mFirstLayout = true ; <nl> - if ( mAdapter != null ) { <nl> - populate ( ) ; <nl> - } <nl> } <nl> <nl>   } 
public class PGraphicsAndroid3D extends PGraphics { <nl> public void resetMatrix ( ) { <nl> modelview . reset ( ) ; <nl> + modelviewInv . reset ( ) ; <nl> projmodelview . set ( projection ) ; <nl> } <nl>   } 
public class ConsoleLogOutputStream extends PrintStream { <nl> <nl> public void println ( Object x ) { <nl> + logMessage ( String . valueOf ( x ) ) ; <nl> printStream . println ( x ) ; <nl> } <nl>   } 
public class Tree extends JTree implements ComponentWithEmptyText , ComponentWith <nl> { public void holdSelection ( ) { <nl> myHeldSelection = getSelectionPaths ( ) ; <nl> - clearSelection ( ) ; <nl> } <nl> public void unholdSelection ( ) { <nl>   } } 
public abstract class AbstractInternalLogger implements InternalLogger , Serializ <nl> <nl> { public void info ( Throwable t ) { { <nl> info ( EXCEPTION_MESSAGE , t ) ; <nl> - <nl> } <nl> <nl>   } } 
public class SupportFragment extends Fragment implements ISupportFragment { <nl> <nl> public void onActivityCreated ( Bundle savedInstanceState ) { <nl> super . onActivityCreated ( savedInstanceState ) ; <nl> + mIsFirstVisible = true ; <nl> View view = getView ( ) ; <nl> initFragmentBackground ( view ) ; <nl>   } } 
public final class Bitmap implements Parcelable { <nl> <nl> protected void finalize ( ) throws Throwable { <nl> try { <nl> + mRecycled = true ; <nl> nativeDestructor ( mNativeBitmap ) ; <nl> } finally { <nl> super . finalize ( ) ; <nl>   } } } 
public class FileInStreamTest implements Tester < FileInStream > { <nl> <nl> public void after ( ) { <nl> - ClientContext . reset ( ) ; <nl> + ClientContext . reset ( ) ; <nl> } <nl> <nl>   } 
public class DirectServletRegistry { public void test ( ) { { { <nl> if ( _log . isDebugEnabled ( ) ) { <nl> _log . debug ( " Reload dependent " + dependant ) ; <nl> } <nl> + <nl> + break ; <nl> } <nl> } <nl> } <nl>   } 
public class PGL { <nl> <nl> protected class PGLListener implements GLEventListener { <nl> + public PGLListener ( ) { } <nl> + <nl> <nl> public void display ( GLAutoDrawable glDrawable ) { <nl> drawable = glDrawable ; <nl>   } } } 
public class DroidGap extends Activity { public void test ( ) { <nl> appView . setWebChromeClient ( new GapClient ( this ) ) ; <nl> appView . setInitialScale ( 100 ) ; <nl> + appView . setVerticalScrollBarEnabled ( false ) ; <nl> WebSettings settings = appView . getSettings ( ) ; <nl> settings . setJavaScriptEnabled ( true ) ; <nl>   } } 
public class KeyguardTransportControlView extends FrameLayout { public void test ( ) { <nl> mAudioManager . unregisterRemoteController ( mRemoteController ) ; <nl> KeyguardUpdateMonitor . getInstance ( mContext ) . removeCallback ( mUpdateMonitor ) ; <nl> mUserSeeking = false ; <nl> + removeCallbacks ( mUpdateSeekBars ) ; <nl> } <nl> void setBadgeIcon ( Drawable bmp ) { <nl>   } } 
final class DexterInstance { <nl> private final AtomicBoolean rationaleAccepted ; <nl> private Activity activity ; <nl> private MultiplePermissionsListener listener ; <nl> - <nl> + <nl> DexterInstance ( Context context , AndroidPermissionService androidPermissionService , <nl> IntentProvider intentProvider ) { <nl> this . context = context ; <nl>   } } 
public class PyConsoleStackFrameConnector implements XStackFrameAwareSession { <nl> <nl> public void reportError ( String message ) { <nl> - throw new NotImplementedException ( ) ; <nl> + throw new UnsupportedOperationException ( ) ; <nl> } <nl> <nl>   } 
public class SourceCodeTraversal extends TraversalHelper { public void test ( ) { { { { <nl> break ; <nl> } <nl> } <nl> + acceptSiblings ( currentNode , followSiblings ) ; <nl> } <nl> } <nl>   } 
public final class WorkerClient extends ClientBase { public void test ( ) { <nl> mIsLocal = isLocal ; <nl> mClientMetrics = Preconditions . checkNotNull ( clientMetrics ) ; <nl> mHeartbeatExecutor = new WorkerClientHeartbeatExecutor ( this ) ; <nl> - <nl> } <nl> <nl>   } 
package com . ning . billing . analytics ; <nl> import java . util . List ; <nl> - import java . util . UUID ; <nl> import org . joda . time . DateTime ; <nl> import org . slf4j . Logger ; <nl>   
public class JetFileType extends LanguageFileType { <nl> <nl> public String getName ( ) { <nl> - return " jet " ; <nl> + return " Kotlin " ; <nl> } <nl> <nl>   } 
public class PrettyJSON extends JSONStringer { public void test ( ) { { { <nl> } <nl> } <nl> - System . out . println ( w . toString ( ) ) ; <nl> - <nl> return w . toString ( ) ; <nl> } <nl>   } 
public class StandardServerSF extends StoreFactoryBase { public void test ( ) { <nl> } <nl> <nl> <nl> <nl> <nl> <nl> <nl>   } 
public class Request implements HttpServletRequest { public void test ( ) { <nl> cookiesConverted = true ; <nl> + if ( getContext ( ) == null ) { <nl> + return ; <nl> + } <nl> + <nl> parseCookies ( ) ; <nl> ServerCookies serverCookies = coyoteRequest . getCookies ( ) ; <nl>   } } 
public class BlockWorkerTest { <nl> <nl> <nl> <nl> <nl> <nl> public void hasBlockMetaTest ( ) { <nl>   } } 
<nl> package storm . kafka ; <nl> - public class TopicOffsetOutOfRangeException extends FailedFetchException { <nl> + public class TopicOffsetOutOfRangeException extends RuntimeException { <nl> } public TopicOffsetOutOfRangeException ( String message ) { <nl> super ( message ) ; <nl>   } } 
import java . util . regex . Matcher ; <nl> import java . util . regex . Pattern ; <nl> import javax . annotation . concurrent . NotThreadSafe ; <nl> - import javax . annotation . concurrent . ThreadSafe ; <nl> <nl> <nl>   
public class Splash extends JDialog implements StartupProgress { <nl> protected void paintComponent ( Graphics g ) { <nl> super . paintComponent ( g ) ; <nl> mySplashIsVisible = true ; <nl> + myProgressLastPosition = 0 ; <nl> paintProgress ( g ) ; <nl> } <nl> } ; <nl>   
public abstract class BasketItem extends NetworkCatalogItem { <nl> <nl> public String getStringId ( ) { <nl> - return " " ; <nl> + return " : " + Link . getSiteName ( ) ; <nl> } <nl> public final void add ( NetworkBookItem book ) { <nl>   } } 
public class StreamRule { <nl> <nl> public String getValue ( ) { <nl> - return value ; <nl> + return ( type == 5 ? " " : value ) ; <nl> } <nl> public int getType ( ) { <nl>   } } 
public class Options implements Serializable { <nl> <nl> public TestOptions newTestOptions ( ) { <nl> - return newTestOptions ( ) ; <nl> + return new TestOptions ( ) ; <nl> } <nl>   } 
public class ScanResult implements Parcelable { <nl> public int frequency ; <nl> <nl> <nl> <nl> <nl> <nl> public long timestamp ; <nl>   } 
class ActionBarActivityDelegateICS extends ActionBarActivityDelegate { public void test ( ) { <nl> if ( frameworkMode != null ) { <nl> wrappedMode = new ActionModeWrapper ( context , <nl> - mActivity . startActionMode ( wrappedCallback ) ) ; <nl> + frameworkMode ) ; <nl> wrappedCallback . setLastStartedActionMode ( wrappedMode ) ; <nl> } <nl>   } } 
public class WordPress extends Application { <nl> public synchronized static void updateCurrentBlogStats ( ) { <nl> - <nl> Blog currentBlog = WordPress . getCurrentBlog ( ) ; <nl> if ( currentBlog != null ) { <nl> String blogID = null ; <nl>   } } } 
public class CountriesFragment extends ListFragment { <nl> <nl> public void onSaveInstanceState ( Bundle state ) { <nl> + super . onSaveInstanceState ( state ) ; <nl> + <nl> state . putInt ( STATE_CHECKED , <nl> getListView ( ) . getCheckedItemPosition ( ) ) ; <nl> } <nl>   } 
public abstract class Context { <nl> <nl> <nl> <nl> + <nl> public static final String NETWORK_SCORE_SERVICE = " network_score " ; <nl> <nl>   } 
import org . apache . juli . logging . LogFactory ; <nl> <nl> <nl> <nl> <nl> <nl> public final class JspRuntimeContext { public void test ( ) { <nl>   } } 
public class ProfilerType extends EditableFileType <nl> { public String getDefaultExtension ( ) <nl> { { { <nl> - return " Rprof " ; <nl> + return " . Rprof " ; <nl> } <nl> } <nl>   } } 
import java . util . Iterator ; <nl> <nl> <nl> <nl> <nl> <nl> <nl> public class XML { public void test ( ) { <nl>   } } 
public class FriendlyURLServlet extends HttpServlet { public void test ( ) { <nl> Layout layout = layoutFriendlyURLComposite . getLayout ( ) ; <nl> + request . setAttribute ( WebKeys . LAYOUT , layout ) ; <nl> + <nl> String layoutFriendlyURLCompositeFriendlyURL = <nl> layoutFriendlyURLComposite . getFriendlyURL ( ) ; <nl>   } } 
public class IQVersionHandler extends IQHandler implements ServerFeaturesProvide <nl> { public void initialize ( XMPPServer server ) { <nl> super . initialize ( server ) ; <nl> - localServer = server ; <nl> } <nl> public IQHandlerInfo getInfo ( ) { <nl>   } } 
public class PermissionsResolverManager implements PermissionsResolver { <nl> public void load ( ) { <nl> findResolver ( ) ; <nl> - permissionResolver . load ( ) ; <nl> } <nl> public boolean hasPermission ( String name , String permission ) { <nl>   } } 
public class VetControllerTests { <nl> <nl> private VetController vetController ; <nl> - <nl> - <nl> - private WebApplicationContext ctx ; <nl> private MockMvc mockMvc ; <nl>   } 
public abstract class AdapterView < T extends Adapter > extends ViewGroup { public void test ( ) { { <nl> } <nl> event . setItemCount ( getCount ( ) ) ; <nl> event . setCurrentItemIndex ( getSelectedItemPosition ( ) ) ; <nl> + event . setFromIndex ( mFirstPosition ) ; <nl> + event . setToIndex ( mFirstPosition + getChildCount ( ) ) ; <nl> } <nl> <nl>   } 
public class LayoutManager extends RecyclerView . LayoutManager { public void test ( ) { { <nl> return ; <nl> } <nl> - mRequestPosition = 222 ; <nl> + mRequestPosition = position ; <nl> requestLayout ( ) ; <nl> } <nl>   } 
public class Verifier implements GroovyClassVisitor , Opcodes { public void test ( ) { <nl> ConstructorNode dummy = new ConstructorNode ( 0 , null ) ; <nl> addInitialization ( node , dummy ) ; <nl> node . visitContents ( this ) ; <nl> + classNode . setNodeMetaData ( ClassNodeSkip . class , true ) ; <nl> return ; <nl> } <nl>   } 
public class YUICompressor { public void test ( ) { <nl> JavaScriptToken token ; <nl> ScriptOrFnScope currentScope ; <nl> - token = getToken ( 0 ) ; <nl> + token = getToken ( - 1 ) ; <nl> assert token . getType ( ) == Token . CATCH ; <nl> token = consumeToken ( ) ; <nl> assert token . getType ( ) == Token . LP ; <nl>   } } 
public class TestBeanNameELResolver { <nl> <nl> <nl> private BeanNameELResolver createBeanNameELResolver ( ) { <nl> - return createBeanNameELResolver ( false ) ; <nl> + return createBeanNameELResolver ( true ) ; <nl> } <nl> private BeanNameELResolver createBeanNameELResolver ( boolean allowCreate ) { <nl>   } } 
public class IconicsImageView extends ImageView { public void test ( ) { { <nl> <nl> setImageDrawable ( mIcon ) ; <nl> - setScaleType ( ScaleType . MATRIX ) ; <nl> + setScaleType ( ScaleType . CENTER_INSIDE ) ; <nl> } <nl> } <nl>   } 
public class IpReachabilityMonitor { <nl> <nl> private final class NetlinkSocketObserver implements Runnable { <nl> - private static final String TAG = " NetlinkSocketObserver " ; <nl> private NetlinkSocket mSocket ; <nl> <nl>   } } 
public class FileBody implements AsyncHttpRequestBody < File > { <nl> <nl> public boolean readFullyOnRequest ( ) { <nl> - return true ; <nl> + throw new AssertionError ( " not implemented " ) ; <nl> } <nl> <nl>   } 
public class NativeLibraryHelper { <nl> <nl> public static boolean removeNativeBinariesLI ( String nativeLibraryPath ) { <nl> + if ( nativeLibraryPath == null ) return false ; <nl> return removeNativeBinariesFromDirLI ( new File ( nativeLibraryPath ) ) ; <nl> } <nl>   } 
public class Config <nl> { public Integer rpc_recv_buff_size_in_bytes ; <nl> public Boolean start_native_transport = false ; <nl> - public Integer native_transport_port = 8000 ; <nl> + public Integer native_transport_port = 9042 ; <nl> public Integer native_transport_min_threads = 16 ; <nl> public Integer native_transport_max_threads = 128 ; <nl>   } 
public class ClientConfig { <nl> private volatile long failureDetectorThresholdInterval = FailureDetectorConfig . DEFAULT_THRESHOLD_INTERVAL ; <nl> private volatile long failureDetectorAsyncRecoveryInterval = FailureDetectorConfig . DEFAULT_ASYNC_RECOVERY_INTERVAL ; <nl> - private volatile int maxBootstrapRetries = 1 ; <nl> + private volatile int maxBootstrapRetries = 2 ; <nl> public ClientConfig ( ) { } <nl>   } 
public class MutableDateTime extends AbstractDateTime <nl> <nl> <nl> <nl> <nl> <nl> <nl> { public DateTimeField getRoundingField ( ) { <nl> return iRoundingField ; <nl>   } } 
final class MoveJob extends CopyJob { <nl> <nl> public Notification getProgressNotification ( ) { <nl> - return getProgressNotification ( R . string . copy_preparing ) ; <nl> + return getProgressNotification ( R . string . copy_remaining ) ; <nl> } <nl> <nl>   } 
public class Vpn extends INetworkManagementEventObserver . Stub { public void test ( ) { <nl> config . packageName = mPackageName ; <nl> config . interfaceName = mInterfaceName ; <nl> - showNotification ( pm , app , config ) ; <nl> + showNotification ( config , label , bitmap ) ; <nl> return descriptor ; <nl> } <nl>   } 
public class Tmp { public interface ResolvableDependencies { <nl> <nl> <nl> <nl> <nl> <nl> <nl> ResolutionResult getResolutionResult ( ) ; <nl>   } } 
public class UnifiedDiffViewer extends ListenerDiffViewerBase { public void test ( ) { { <nl> myStatusPanel . update ( ) ; <nl> myPanel . setGoodContent ( ) ; <nl> + <nl> + myEditor . getGutterComponentEx ( ) . revalidateMarkup ( ) ; <nl> } ; <nl> } <nl>   } 
public class JavaMethodsConflictResolver implements PsiConflictResolver { public void test ( ) { { <nl> if ( method . isVarArgs ( ) ) return ; <nl> if ( method . getParameterList ( ) . getParametersCount ( ) == argumentsCount ) { <nl> parametersNumberMatch = true ; <nl> - break ; <nl> } <nl> } <nl> } <nl>   } 
public abstract class RxRatpack { <nl> private final ExecControl execControl ; <nl> public ExecutionBackedSubscriber ( ExecControl execControl , Subscriber < ? super T > subscriber ) { <nl> + super ( subscriber ) ; <nl> this . execControl = execControl ; <nl> this . subscriber = subscriber ; <nl> } <nl>   } 
public final class WebAttributes { <nl> <nl> <nl> public static final String AUTHENTICATION_EXCEPTION = " SPRING_SECURITY_LAST_EXCEPTION " ; <nl> - public static final String LAST_USERNAME = " SPRING_SECURITY_LAST_USERNAME " ; <nl> } <nl>   
public class Tmp { public interface IIdentifyable < T > { <nl> <nl> <nl> <nl> <nl> <nl> <nl>   } } 
public final class SharedPreferencesEx implements SharedPreferences { <nl> private long mFileSize ; <nl> private static int cTryMaxCount = 10 ; <nl> - private static int cTryWaitMs = 100 ; <nl> + private static int cTryWaitMs = 50 ; <nl> public SharedPreferencesEx ( File prefFile ) { <nl> mFile = prefFile ; <nl>   } } 
public class PostsActivity extends WPActionBarActivity implements OnPostSelected <nl> <nl> { public void onRefresh ( boolean start ) { <nl> if ( start ) { <nl> + attemptToSelectPost ( ) ; <nl> startAnimatingRefreshButton ( refreshMenuItem ) ; <nl> isRefreshing = true ; <nl> } else { <nl>   } } } 
public class Tmp { public interface Wrapper extends Container { <nl> <nl> <nl> <nl> <nl> <nl> } public boolean isAsyncSupported ( ) ; <nl>   } 
public class GroovyClassLoader extends ClassLoader { <nl> public GroovyClassLoader ( ) { <nl> } <nl> + public GroovyClassLoader ( ClassLoader loader ) { <nl> + super ( loader ) ; <nl> + } <nl> + <nl> <nl> <nl> <nl>   } 
public class Printer { <nl> private String indent = " " ; <nl> private final StringBuilder out ; <nl> - Printer ( StringBuilder out ) { <nl> + public Printer ( StringBuilder out ) { <nl> this . out = out ; <nl> } <nl>   } } 
public class AccountActivity extends ThemeableActivity { public void test ( ) { <nl> mUseTor . setChecked ( settings . getUseTor ( ) ) ; <nl> - getOTRKeyInfo ( ) ; <nl> + <nl> settings . close ( ) ; <nl> cursor . close ( ) ; <nl>   } } 
import java . io . File ; <nl> public class GroovycTask <nl> extends CompileTaskSupport <nl> { <nl> - private boolean force ; <nl> + protected boolean force ; <nl> public void setForce ( final boolean flag ) { <nl> this . force = flag ; <nl>   } } 
package android . app . admin ; <nl> import android . annotation . SdkConstant ; <nl> import android . annotation . SdkConstant . SdkConstantType ; <nl> + import android . annotation . SystemApi ; <nl> import android . app . Activity ; <nl> import android . content . AbstractRestrictionsProvider ; <nl> import android . content . ComponentName ; <nl>   
public class MacroFactory { <nl> <nl> public static void register ( Macro macro ) { { <nl> + if ( myMacroTable == null ) init ( ) ; <nl> myMacroTable . put ( macro . getName ( ) , macro ) ; <nl> } <nl> } <nl>   } 
public class OsMoThread { <nl> <nl> public void reconnect ( ) { { <nl> + sessionInfo = null ; <nl> reconnect = true ; <nl> } <nl> } <nl>   } 
public class MaterialRippleLayout extends FrameLayout { <nl> <nl> public RippleBuilder rippleInAdapter ( boolean inAdapter ) { <nl> - this . rippleInAdapter ( inAdapter ) ; <nl> + this . rippleSearchAdapter = inAdapter ; <nl> return this ; <nl> } <nl>   } 
public class AttributeEqualBuilder implements CategoryBuilder { <nl> <nl> public boolean init ( Graph graph ) { <nl> + values = new ArrayList < Object > ( ) ; <nl> return true ; <nl> } <nl>   } 
package com . interview . tree ; <nl> - import javax . swing . * ; <nl> import java . util . Optional ; <nl> import java . util . concurrent . atomic . AtomicInteger ; <nl> import java . util . concurrent . atomic . AtomicReference ; <nl>   
import java . util . List ; <nl> <nl> <nl> <nl> <nl> <nl> <nl> public class BasicSemanticChecks extends GrammarTreeVisitor { public void test ( ) { <nl> <nl>   } } 
public class CalendarPickerView extends ListView { <nl> <nl> interface OnDateSelectedListener { <nl> - public void onDateSelected ( Date date ) ; <nl> + void onDateSelected ( Date date ) ; <nl> } <nl> } <nl>   
public final class FacebookSdk { public void test ( ) { { <nl> throw new FacebookException ( CALLBACK_OFFSET_NEGATIVE ) ; <nl> } <nl> FacebookSdk . callbackRequestCodeOffset = callbackRequestCodeOffset ; <nl> - sdkInitialize ( applicationContext ) ; <nl> + sdkInitialize ( applicationContext , callback ) ; <nl> } <nl> <nl>   } 
package com . SecUpwN . AIMSICD . service ; <nl> - import android . content . DialogInterface ; <nl> import android . content . Intent ; <nl> import android . content . SharedPreferences ; <nl> import android . location . Location ; <nl>   
public class JspC extends Task implements Options { <nl> <nl> <nl> <nl> <nl> <nl> <nl> public void execute ( ) { <nl>   } } 
public class ReaderWebView extends WebView { public void test ( ) { <nl> mCustomView = null ; <nl> mCustomViewCallback = null ; <nl> - <nl> - mReaderWebView . onPause ( ) ; <nl> } <nl> boolean isCustomViewShowing ( ) { <nl>   } } 
public class AnswerHelper { public void test ( ) { { { { <nl> return false ; <nl> } <nl> } <nl> - return true ; <nl> + return checkedItems . size ( ) == answerIds . length ; <nl> } <nl> } <nl>   } 
public class TestStandardSessionIdGenerator { <nl> <nl> <nl> - public void testValidateWithJvmRouteWithPerid ( ) { <nl> + } public void testValidateWithJvmRouteWithPeriod ( ) { <nl> Assert . assertTrue ( generator . validateSessionId ( VALID + " . g . h . i " ) ) ; <nl> } <nl>   } 
class KeyguardStatusViewManager implements SecurityMessageDisplay { public void test ( ) { { <nl> mHandler . removeCallbacks ( mClearSecurityMessageRunnable ) ; <nl> mHandler . postDelayed ( mClearSecurityMessageRunnable , SECURITY_MESSAGE_DURATION ) ; <nl> } <nl> + mSecurityMessage . announceForAccessibility ( mSecurityMessage . getText ( ) ) ; <nl> } <nl> <nl>   } 
public final class AnimChannel { public void test ( ) { { { <nl> } <nl> } <nl> animation = null ; <nl> - System . out . println ( " Setting notified false " ) ; <nl> + <nl> notified = false ; <nl> } <nl>   } 
public class ChildBrowser extends Plugin { <nl> <nl> private void closeDialog ( ) { <nl> if ( dialog != null ) { <nl> + this . webview . stopLoading ( ) ; <nl> dialog . dismiss ( ) ; <nl> } <nl> } <nl>   } 
public abstract class BaseOutputWriter implements OutputWriter { public void test ( ) { { { <nl> result = ( Boolean ) foo ; <nl> } <nl> } <nl> - return result ; <nl> + return result != null ? result : false ; <nl> } <nl> <nl>   } 
class KeyguardStatusViewManager implements SecurityMessageDisplay { public void test ( ) { { <nl> mHandler . removeCallbacks ( mClearSecurityMessageRunnable ) ; <nl> mHandler . postDelayed ( mClearSecurityMessageRunnable , SECURITY_MESSAGE_DURATION ) ; <nl> } <nl> + mSecurityMessage . announceForAccessibility ( mSecurityMessage . getText ( ) ) ; <nl> } <nl> <nl>   } 
public class CallSipImpl <nl> <nl> { public Iterator getCallParticipants ( ) <nl> { { <nl> - return callParticipants . iterator ( ) ; <nl> + return new LinkedList ( callParticipants ) . iterator ( ) ; <nl> } <nl> <nl>   } } 
package com . mongodb ; <nl> <nl> public class WriteResult { <nl> - private final com . mongodb . WriteConcern writeConcern ; <nl> + private final WriteConcern writeConcern ; <nl> private final int n ; <nl> private final boolean updateOfExisting ; <nl> private final Object upsertedId ; <nl>   } 
public class BulletPhysics implements PhysicsEngine { <nl> public void dispose ( ) { <nl> discreteDynamicsWorld . destroy ( ) ; <nl> wrapper . dispose ( ) ; <nl> + liquidWrapper . dispose ( ) ; <nl> } <nl> <nl>   } 
public class WebView extends AbsoluteLayout <nl> <nl> <nl> { public static void freeMemoryForTests ( ) { { <nl> - checkThread ( ) ; <nl> getFactory ( ) . getStatics ( ) . freeMemoryForTests ( ) ; <nl> } <nl>   } } 
package com . fsck . k9 . activity ; <nl> import java . util . ArrayList ; <nl> - import java . util . Arrays ; <nl> import java . util . List ; <nl> import android . os . AsyncTask ; <nl>   
public abstract class SimpleHttpClient { <nl> private String responseBody ; <nl> private List < String > bodyUriElements = null ; <nl> - protected void setPort ( int thePort ) { <nl> + public void setPort ( int thePort ) { <nl> port = thePort ; <nl> } <nl>   } } 
package greendroid . image ; <nl> import greendroid . util . Config ; <nl> import greendroid . util . GDUtils ; <nl> - import java . io . FileInputStream ; <nl> import java . io . InputStream ; <nl> import java . net . URL ; <nl> import java . util . concurrent . ExecutorService ; <nl>   
package com . activeandroid ; <nl> class Params { <nl> + public static final String VERSION = " 2 . 0 . 0 " ; <nl> public static final boolean IS_TRIAL = false ; <nl> public static final boolean LOGGING_ENABLED = true ; <nl>   } 
public class OsmandMapTileView implements IMapDownloaderCallback { public void test ( ) { <nl> if ( contextMenuLayer != null ) { <nl> contextMenuLayer . onTouchEvent ( event , getCurrentRotatedTileBox ( ) ) ; <nl> } <nl> + gestureDetector . onTouchEvent ( event ) ; <nl> return true ; <nl> } <nl>   } 
public class VoiceRouter { public void test ( ) { { { <nl> lastTimeMakeUTwpAnnounced = System . currentTimeMillis ( ) ; <nl> } <nl> } <nl> + currentStatus = STATUS_UNKNOWN ; <nl> return ; <nl> } <nl>   } 
public class XCameraDevice2 extends XHook { <nl> <nl> public String getClassName ( ) { <nl> - return " android . hardware . camera2 . impl . CameraDevice " ; <nl> + return " android . hardware . camera2 . impl . CameraDeviceImpl " ; <nl> } <nl> <nl>   } 
public class QueryableIndexSegment implements Segment <nl> { <nl> private final QueryableIndex index ; <nl> private final String identifier ; <nl> - private boolean nullStorage = false ; <nl> public QueryableIndexSegment ( final String segmentIdentifier , QueryableIndex index ) <nl> { <nl>   } } 
class SnackContainer extends FrameLayout { <nl> public void clearSnacks ( boolean animate ) { <nl> mSnacks . clear ( ) ; <nl> + removeCallbacks ( mHideRunnable ) ; <nl> if ( animate ) mHideRunnable . run ( ) ; <nl> } <nl>   } 
import hex . rf . DRF . DRFFuture ; <nl> import hex . rf . Tree . StatType ; <nl> import org . junit . Test ; <nl> import water . * ; <nl> - import water . DRemoteTask . DFuture ; <nl> import water . parser . ParseDataset ; <nl> public class DatasetCornerCasesTest extends TestUtil { <nl>   } 
package hex . deeplearning ; <nl> import hex . FrameSplitter ; <nl> - import org . apache . tools . ant . taskdefs . Sleep ; <nl> import water . TestUtil ; <nl> import org . junit . Assert ; <nl>   
package buildcraft . api . recipes ; <nl> import java . util . LinkedList ; <nl> - <nl> - import buildcraft . core . inventory . StackHelper ; <nl> import net . minecraft . item . ItemStack ; <nl> public class AssemblyRecipe { <nl>   } 
public abstract class BufferedBlockInStream extends BlockInStream { public void test ( ) { <nl> mBuffer = allocateBuffer ( ) ; <nl> mBufferIsValid = false ; <nl> mClosed = false ; <nl> + mBlockIsRead = false ; <nl> } <nl> <nl>   } 
public class FrenchTagger extends BaseTagger { <nl> public FrenchTagger ( ) { { <nl> super ( ) ; <nl> setLocale ( Locale . FRENCH ) ; <nl> + dontTagLowercaseWithUppercase ( ) ; <nl> } <nl> } <nl>   } 
public class SearchView extends LinearLayout implements CollapsibleActionView { <nl> <nl> <nl> public void onActionViewExpanded ( ) { <nl> + if ( mExpandedInActionView ) return ; <nl> + <nl> mExpandedInActionView = true ; <nl> mCollapsedImeOptions = mQueryTextView . getImeOptions ( ) ; <nl> mQueryTextView . setImeOptions ( mCollapsedImeOptions | EditorInfo . IME_FLAG_NO_FULLSCREEN ) ; <nl>   } } 
public class ConfigurationImpl <nl> <nl> { public void clearCache ( ) { { <nl> _values . clear ( ) ; <nl> + <nl> + _properties = null ; <nl> } <nl> <nl>   } } 
public class TitlePageIndicator extends View implements PageIndicator { <nl> public void setFooterColor ( int footerColor ) { <nl> mPaintFooterLine . setColor ( footerColor ) ; <nl> + mPaintFooterIndicator . setColor ( footerColor ) ; <nl> invalidate ( ) ; <nl> } <nl>   } 
public interface Graph { <nl> public final static class Initializer { <nl> public static Graph init ( ) { { <nl> - return Dagger_Graph . builder ( ) <nl> + return DaggerGraph . builder ( ) <nl> . build ( ) ; <nl> } <nl> } <nl>   } } 
public class SASLDigestMD5Mechanism extends SASLMechanism { <nl> <nl> protected String getName ( ) { <nl> - return " CRAM - MD5 " ; <nl> + return " DIGEST - MD5 " ; <nl> } <nl> } <nl>   
public class PrivacyService extends IPrivacyService . Stub { public void test ( ) { <nl> synchronized ( mRestrictionCache ) { <nl> mRestrictionCache . clear ( ) ; <nl> } <nl> + synchronized ( mAskedOnceCache ) { <nl> + mAskedOnceCache . clear ( ) ; <nl> + } <nl> synchronized ( mSettingCache ) { <nl> mSettingCache . clear ( ) ; <nl> } <nl>   } } 
public final class AudioTrack { <nl> <nl> public void run ( ) { <nl> try { <nl> + toRelease . flush ( ) ; <nl> toRelease . release ( ) ; <nl> } finally { <nl> releasingConditionVariable . open ( ) ; <nl>   } } } 
public class DiscoveryNode implements Writeable < DiscoveryNode > , ToXContent { public void test ( ) { { { <nl> roles . add ( role ) ; <nl> } <nl> } <nl> - return roles ; <nl> + return Collections . unmodifiableSet ( roles ) ; <nl> } <nl> <nl>   } 
public class TimeoutTest extends TestBase { public void test ( ) { <nl> try { <nl> t . verify ( data ) ; <nl> + fail ( ) ; <nl> } catch ( MockitoAssertionError e ) { } ; <nl> verify ( mode , times ( 5 ) ) . verify ( data ) ; <nl>   } } 
public class HgVFSListener extends VcsVFSListener { <nl> <nl> protected VcsDeleteType needConfirmDeletion ( final VirtualFile file ) { <nl> return ChangeListManagerImpl . getInstanceImpl ( myProject ) . getUnversionedFiles ( ) . contains ( file ) <nl> - ? VcsDeleteType . SILENT <nl> + ? VcsDeleteType . IGNORE <nl> : VcsDeleteType . CONFIRM ; <nl> } <nl>   } 
public class AsyncHttpClientConfig { <nl> <nl> <nl> public boolean hasResponseFilters ( ) { <nl> - return ! requestFilters . isEmpty ( ) ; <nl> + return ! responseFilters . isEmpty ( ) ; <nl> } <nl> <nl>   } 
public class BuildRuleSuccess { <nl> private final Type type ; <nl> private static enum Property { <nl> - SHOULD_INITIALIZE_FROM_DISK_AFTER_BUILDING , <nl> SHOULD_UPLOAD_RESULTING_ARTIFACT , <nl> SHOULD_WRITE_RECORDED_METADATA_TO_DISK , <nl> } <nl>   } 
abstract class CommunicationProtocol <nl> { public void test ( ) { { { <nl> dest . writeBytes ( bytes ) ; <nl> } <nl> + channel . close ( ) ; <nl> } <nl> } <nl>   } 
public class PGraphicsOpenGL extends PGraphics3D { public void test ( ) { { <nl> <nl> canvas . setSize ( width , height ) ; <nl> } <nl> + canvas . requestFocus ( ) ; <nl> defaultsInited = false ; <nl> } <nl>   } 
public class HeaderOrderTestCase { public void test ( ) { <nl> if ( Modifier . isTransient ( field . getModifiers ( ) ) ) { <nl> continue ; <nl> } <nl> + <nl> Object value = field . get ( null ) ; <nl> if ( ! ( value instanceof HttpString ) ) { <nl> continue ; <nl>   } } } 
public class PGraphicsOpenGL extends PGraphics3D { <nl> <nl> - protected class ImageCache extends PMetadata { <nl> + protected class ImageCache { <nl> int tindex = - 1 ; <nl> int tpixels [ ] ; <nl> IntBuffer tbuffer ; <nl>   } } } 
public class SSLHostConfigCertificate { { <nl> <nl> } <nl> - private static enum StoreType { KEYSTORE , PEM } ; <nl> - <nl> + private static enum StoreType { <nl> + KEYSTORE , <nl> + PEM <nl> + } <nl> } <nl>   
public class FileCopierUnitTest { <nl> <nl> public void setUp ( ) throws Exception { <nl> fileCopier = new FileCopier ( ) ; <nl> + tempFolder . create ( ) ; <nl> } <nl> <nl>   } 
public class CompilerTest extends GroovyTestCase { public void test ( ) { <nl> dir . mkdirs ( ) ; <nl> CompilerConfiguration config = new CompilerConfiguration ( ) ; <nl> + config . setTargetDirectory ( dir ) ; <nl> config . setDebug ( dumpClass ) ; <nl> compiler = new Compiler ( config ) ; <nl>   } } 
public class ForgeInternalHandler <nl> { public void test ( ) { { { <nl> entity . setDead ( ) ; <nl> event . setCanceled ( true ) ; <nl> - event . world . spawnEntityInWorld ( entity ) ; <nl> + event . world . spawnEntityInWorld ( newEntity ) ; <nl> } <nl> } <nl> } <nl>   } 
public class ActionBarView extends AbsActionBarView implements DecorToolbar { public void test ( ) { <nl> mNavItemSelectedListener = l ; <nl> if ( mSpinner != null ) { <nl> mSpinner . setAdapter ( adapter ) ; <nl> + mSpinner . setOnItemSelectedListener ( l ) ; <nl> } <nl> } <nl>   } 
public class PropertyAttributeParserTest <nl> { public void test ( ) { <nl> try <nl> { <nl> - parseAsValueModelAttribute ( illegalStaticResourceAttributeValue . value ) ; <nl> + parseAsStaticResourceAttribute ( illegalStaticResourceAttributeValue . value ) ; <nl> fail ( " Expect an exception thrown " ) ; <nl> } catch ( MalformedAttributeException e ) <nl> { <nl>   } } } 
public class MockComponentManager extends UserDataHolderBase implements Componen <nl> <nl> { public void dispose ( ) { { <nl> + myMessageBus . dispose ( ) ; <nl> } <nl> <nl>   } } 
class ConfigThread extends Thread { <nl> private Configuration config ; <nl> private boolean done = false ; <nl> - private JLanguageTool langTool ; <nl> private ConfigurationDialog cfgDialog ; <nl> ConfigThread ( final Language docLanguage , final Configuration config ) { <nl>   } } 
public abstract class HardwareRenderer { <nl> public static boolean sSystemRendererDisabled = false ; <nl> <nl> - public static boolean sUseRenderThread = true ; <nl> + public static boolean sUseRenderThread = false ; <nl> private boolean mEnabled ; <nl> private boolean mRequested = true ; <nl>   } 
public class PrivacyManager { <nl> <nl> public int hashCode ( ) { <nl> - return mMethodName . hashCode ( ) ; <nl> + return ( mRestrictionName . hashCode ( ) ^ mMethodName . hashCode ( ) ) ; <nl> } <nl> <nl>   } 
public class Caches implements BatchComponent , Startable { <nl> <nl> public void start ( ) { <nl> + <nl> } <nl> <nl>   } 
public class GroupLocalServiceImpl extends GroupLocalServiceBaseImpl { <nl> <nl> protected List < PortletDataHandler > getPortletDataHandlers ( Group group ) { <nl> + <nl> List < Portlet > portlets = portletLocalService . getPortlets ( <nl> group . getCompanyId ( ) ) ; <nl>   } } 
public class HomeActivity extends Activity { public void test ( ) { { <nl> } <nl> MainApplication . checkForProVersion ( getApplicationContext ( ) ) ; <nl> + Util . checkForTamper ( this , mTamperPromptEventListener ) ; <nl> } <nl> <nl>   } 
public abstract class Pair < T1 , T2 > <nl> <nl> { public T1 first ( ) <nl> { { <nl> - return first ( ) ; <nl> + return first ; <nl> } <nl> <nl>   } } 
public class ReaderPostListFragment extends Fragment <nl> <nl> { public FilterCriteria onRecallSelection ( ) { { <nl> - ReaderTag tag = AppPrefs . getReaderTag ( ) ; <nl> - return tag ; <nl> + return mCurrentTag ; <nl> } <nl> <nl>   } } 
public class NotDefinedException extends RuntimeException { public void test ( ) { { <nl> } <nl> } <nl> - <nl>   } 
class Http2Parser { public void test ( ) { <nl> } <nl> - void setHpackDecoder ( HpackDecoder hpackDecoder ) { <nl> - this . hpackDecoder = hpackDecoder ; <nl> - } <nl> - <nl> - <nl> <nl> <nl> <nl>   } 
public class TileEngineIron extends TileEngineWithInventory implements IFluidHan <nl> <nl> { public void overheat ( ) { { <nl> + super . overheat ( ) ; <nl> <nl> tankCoolant . setFluid ( null ) ; <nl> } <nl>   } } 
public class PipeTransportItems extends PipeTransport { public void test ( ) { { { <nl> <nl> } <nl> } <nl> + delay = 2 ; <nl> } <nl> <nl>   } 
public class DBPort { public void test ( ) { <nl> _socket . setTcpNoDelay ( ! USE_NAGLE ) ; <nl> _socket . setSoTimeout ( _options . socketTimeout ) ; <nl> - _socket . setSoLinger ( true , 0 ) ; <nl> _in = new BufferedInputStream ( _socket . getInputStream ( ) ) ; <nl> _out = _socket . getOutputStream ( ) ; <nl> return true ; <nl>   } } 
public class IntervalHistogramRecorder { <nl> <nl> public synchronized Histogram getIntervalHistogram ( ) { <nl> Histogram intervalHistogram = new Histogram ( inactiveHistogram ) ; <nl> - getIntervalHistogramInto ( new Histogram ( inactiveHistogram ) ) ; <nl> + getIntervalHistogramInto ( intervalHistogram ) ; <nl> return intervalHistogram ; <nl> } <nl>   } 
public class ResourceCertificateSource implements CertificateSource { <nl> public ResourceCertificateSource ( int resourceId , Context context ) { <nl> mResourceId = resourceId ; <nl> - mContext = context . getApplicationContext ( ) ; <nl> + mContext = context ; <nl> } <nl> private void ensureInitialized ( ) { <nl>   } } 
public class MDCInterceptor implements ExecInterceptor { <nl> <nl> - public MDCInterceptor ( ) { <nl> - <nl> - } <nl> - <nl> public static MDCInterceptor instance ( ) { <nl> return INSTANCE ; <nl> } <nl>   } 
public class ActivityItemBase implements TraktEntity { <nl> <nl> public Date timestamp ; <nl> + public Date watched ; <nl> public When when ; <nl> public Elapsed elapsed ; <nl> public ActivityType type ; <nl>   } 
public class ConvertAtomicToLongAdderIntention extends PsiElementBaseIntentionAc <nl> <nl> { public boolean startInWriteAction ( ) { { <nl> - return true ; <nl> + return false ; <nl> } <nl> <nl>   } } 
public class HttpConfiguration { <nl> public String getRootPath ( ) { <nl> return rootPath ; <nl> } <nl> - <nl> - public void setRootPath ( String rootPath ) { <nl> - this . rootPath = rootPath ; <nl> - } <nl> } <nl>   
public class HttpUtils { <nl> <nl> public void configHttpGetCacheDefaultExpiry ( long defaultExpiry ) { <nl> + currRequestExpiry = defaultExpiry ; <nl> sHttpGetCache . setDefaultExpiryTime ( defaultExpiry ) ; <nl> } <nl>   } 
public final class BluetoothLeAdvertiser { <nl> <nl> public void stopAdvertising ( final AdvertiseCallback callback ) { <nl> synchronized ( mLeAdvertisers ) { <nl> - BluetoothLeUtils . checkAdapterStateOn ( mBluetoothAdapter ) ; <nl> if ( callback == null ) { <nl> throw new IllegalArgumentException ( " callback cannot be null " ) ; <nl> } <nl>   } } } 
public class VertxOptions { <nl> <nl> <nl> public long getWarningExceptionTime ( ) { <nl> - return warningExceptionTime ; <nl> + return warningExceptionTime ; <nl> } <nl> <nl>   } 
public abstract class DockingStation { <nl> <nl> public boolean linkIsDocked ( ) { <nl> - if ( isTaken ( ) ) { <nl> + if ( robotTaking ( ) != null ) { <nl> return robotTaking ( ) . getDockingStation ( ) == this ; <nl> } else { <nl> return false ; <nl>   } } } } 
public class MasterClient extends CommunicationProtocol implements Master , Chann <nl> { public void test ( ) { { <nl> msgLog . logMessage ( " MasterClient shutdown " , true ) ; <nl> channelPool . close ( true ) ; <nl> + executor . shutdownNow ( ) ; <nl> } <nl> } <nl>   } 
public abstract class AbstractJRubyMojo extends AbstractMojo { <nl> <nl> <nl> <nl> <nl> protected File gemDirectory ; <nl>   } 
import java . util . Set ; <nl> <nl> public class PointQuadTree < T extends PointQuadTree . Item > { <nl> - public static interface Item { <nl> + } public interface Item { <nl> Point getPoint ( ) ; <nl> } <nl>   } 
public class Solo { <nl> <nl> public void clickOnView ( View view ) { <nl> - waiter . waitForView ( view , SMALLTIMEOUT ) ; <nl> clicker . clickOnScreen ( view ) ; <nl> } <nl>   } 
public class HexDumpProxyInboundHandler extends SimpleChannelUpstreamHandler { public void test ( ) { { { <nl> e . getChannel ( ) . close ( ) ; <nl> } <nl> } <nl> - <nl> } <nl>   } 
public class MemoryCache { <nl> public void clear ( ) { <nl> cache . clear ( ) ; <nl> + size = 0 ; <nl> } <nl> long getSizeInBytes ( Bitmap bitmap ) { <nl>   } } 
public class MotionTrack extends AbstractCinematicEvent implements Control { <nl> <nl> public void onStop ( ) { <nl> + setCurrentWayPoint ( path . getNbWayPoints ( ) - 1 ) ; <nl> currentWayPoint = 0 ; <nl> } <nl>   } 
public class From implements Sqlable { <nl> public < T extends Model > T executeSingle ( ) { <nl> if ( mQueryBase instanceof Select ) { <nl> + limit ( 1 ) ; <nl> return SQLiteUtils . rawQuerySingle ( mType , toSql ( ) , getArguments ( ) ) ; <nl> } <nl> else { <nl>   } } } 
import io . realm . RealmChangeListener ; <nl> import io . realm . RealmList ; <nl> - public class ParameterizedTestExample extends AndroidTestCase { <nl> + public class RealmTest extends AndroidTestCase { <nl> private Realm realm ; <nl>   } } 
package android . text . method ; <nl> import android . text . Selection ; <nl> import android . text . SpannableStringBuilder ; <nl> - import java . text . BreakIterator ; <nl> + import android . icu . text . BreakIterator ; <nl> import java . util . Locale ; <nl> <nl>   
public class MaterialMatParamOverrideTest { <nl> <nl> <nl> - <nl> public void testChildOverridesParent ( ) { <nl> material ( " Common / MatDefs / Light / Lighting . j3md " ) ; <nl>   } } 
public class Http11NioProcessor implements ActionHook { public void test ( ) { <nl> keptAlive = true ; <nl> if ( ! inputBuffer . parseHeaders ( ) ) { <nl> openSocket = true ; <nl> - socket . getPoller ( ) . add ( socket ) ; <nl> recycle = false ; <nl> break ; <nl> } <nl>   } } 
public class BuildCraftCore { <nl> <nl> public void serverStarting ( FMLServerStartingEvent event ) { <nl> - CommandHandler commandManager = ( CommandHandler ) event . getServer ( ) . getCommandManager ( ) ; <nl> - commandManager . registerCommand ( new CommandBuildCraft ( ) ) ; <nl> + event . registerServerCommand ( new CommandBuildCraft ( ) ) ; <nl> } <nl> public void loadRecipes ( ) { <nl>   } } 
public class JSONObjectBody implements AsyncHttpRequestBody < JSONObject > { <nl> <nl> public String getContentType ( ) { <nl> - return " application / json " ; <nl> + return CONTENT_TYPE ; <nl> } <nl> <nl>   } 
public class SmsBackupService extends ServiceBase { <nl> private int skip ( ) { <nl> updateMaxSyncedDateSms ( getMaxItemDateSms ( ) ) ; <nl> updateMaxSyncedDateMms ( getMaxItemDateMms ( ) ) ; <nl> + updateMaxSyncedDateCalllog ( getMaxSyncedDateCalllog ( ) ) ; <nl> sItemsToSync = 0 ; <nl> sCurrentSyncedItems = 0 ; <nl>   } } 
public class PyMagicLiteralRenameHandler implements RenameHandler { <nl> <nl> public boolean isRenaming ( DataContext dataContext ) { <nl> - return true ; <nl> + return isAvailableOnDataContext ( dataContext ) ; <nl> } <nl> <nl>   } 
public class RepositoryInfo { <nl> <nl> public String getUrl ( ) { <nl> - return myRepository . getChildText ( " url " ) ; <nl> + return myRepository . getChildText ( " url " ) + " . git " ; <nl> } <nl> <nl>   } 
public abstract class AbstractFailureDetector implements FailureDetector { public void test ( ) { <nl> NodeStatus nodeStatus = getNodeStatus ( node ) ; <nl> synchronized ( nodeStatus ) { <nl> - if ( ! isAvailable ( node ) ) <nl> + while ( ! isAvailable ( node ) ) <nl> nodeStatus . wait ( ) ; <nl> } <nl> } <nl>   } 
public class AsyncTwitterTest extends TestCase implements TwitterListener { <nl> <nl> public void testGetFriends ( ) throws Exception { <nl> + twitterAPI2 . createFriendship ( id1 ) ; <nl> twitterAPI1 . getFriendsAsync ( id2 , this ) ; <nl> waitForResponse ( ) ; <nl> boolean found = false ; <nl>   } } 
public class Result { <nl> public static int SC_403_FORBIDDEN = 403 ; <nl> public static int SC_404_NOT_FOUND = 404 ; <nl> + public static int SC_500_INTERNAL_SERVER_ERROR = 500 ; <nl> public static int SC_501_NOT_IMPLEMENTED = 501 ; <nl>   } 
import java . util . Set ; <nl> public final class ChannelPromiseAggregator implements ChannelFutureListener { <nl> private final ChannelPromise aggregatePromise ; <nl> - <nl> private Set < ChannelPromise > pendingPromises ; <nl>   } 
public final class EditorHistoryManager implements ProjectComponent , JDOMExterna <nl> <nl> { public void selectionChanged ( final FileEditorManagerEvent event ) { { { <nl> - updateHistoryEntry ( event . getOldFile ( ) , true ) ; <nl> + updateHistoryEntry ( event . getNewFile ( ) , true ) ; <nl> } <nl> } <nl>   } } 
public class MultiTerrainLodControl extends TerrainLodControl { <nl> <nl> <nl> public void removeTerrain ( TerrainQuad tq ) { <nl> - removedTerrains . remove ( tq ) ; <nl> + removedTerrains . add ( tq ) ; <nl> } <nl> <nl>   } 
public class TtsSpan implements ParcelableSpan { <nl> <nl> <nl> public MeasureBuilder setIntegerPart ( long integerPart ) { <nl> - return setNumber ( String . valueOf ( integerPart ) ) ; <nl> + return setIntegerPart ( String . valueOf ( integerPart ) ) ; <nl> } <nl> <nl>   } 
public class PrivacyService { public void test ( ) { <nl> result . methodName = restriction . methodName ; <nl> result . restricted = restrict ; <nl> result . asked = true ; <nl> + result . extra = restriction . extra ; <nl> setRestrictionInternal ( result ) ; <nl> } <nl>   } 
public class JavaDebuggerSupport extends DebuggerSupport { <nl> <nl> <nl> public DebuggerActionHandler getEvaluateHandler ( ) { <nl> - return myEvaluateActionHandler ; <nl> + return DISABLED ; <nl> } <nl> <nl>   } 
public class BroadcasterTest { <nl> <nl> public void unSetUp ( ) throws Exception { <nl> broadcaster . removeAtmosphereResource ( ar ) ; <nl> + atmosphereHandler . value . set ( new HashSet ( ) ) ; <nl> } <nl> <nl>   } 
public class EpisodesAdapter extends CursorAdapter { public void test ( ) { <nl> mLayoutInflater = ( LayoutInflater ) context <nl> . getSystemService ( Context . LAYOUT_INFLATER_SERVICE ) ; <nl> mOnClickListener = listener ; <nl> + mOnFlagListener = flagListener ; <nl> } <nl> <nl>   } 
package net . minecraftforge . event . entity ; <nl> import net . minecraft . src . Entity ; <nl> import net . minecraft . src . World ; <nl> + import net . minecraftforge . event . Cancelable ; <nl> + <nl> public class EntityJoinWorldEvent extends EntityEvent <nl> { <nl>   } 
import org . jetbrains . annotations . NotNull ; <nl> import java . util . List ; <nl> import java . util . Set ; <nl> - <nl> <nl> <nl> public class GitFetch extends GitRepositoryAction { <nl> <nl> <nl>   } 
public class MessageSummary { <nl> public Object getField ( String key ) { <nl> return message . getField ( key ) ; <nl> } <nl> + <nl> + <nl> + public Message getRawMessage ( ) { return message ; } <nl> } <nl>   
public class DeepLearningSpiralsTest extends TestUtil { public void test ( ) { { { { <nl> } <nl> pred . delete ( ) ; <nl> mymodel . delete ( ) ; <nl> + mymodel . delete_best_model ( ) ; <nl> } <nl> } <nl> } <nl>   } 
public class ApkDecoder { <nl> public void setFrameworkTag ( String tag ) throws AndrolibException { <nl> mFrameTag = tag ; <nl> - if ( hasResources ( ) ) { <nl> + if ( mResTable != null ) { <nl> getResTable ( ) . setFrameTag ( tag ) ; <nl> } <nl> } <nl>   } } 
public class GitBlit implements ServletContextListener { public void test ( ) { { <nl> return null ; <nl> } <nl> addToCachedRepositoryList ( model ) ; <nl> - return model ; <nl> + return DeepCopier . copy ( model ) ; <nl> } <nl> <nl>   } 
package info . ata4 . unity ; <nl> <nl> public class DisUnity { <nl> - private static final String VERSION = " 0 . 2 . 0 " ; <nl> + private static final String VERSION = " 0 . 2 . 1 " ; <nl> public static String getVersion ( ) { <nl> return VERSION ; <nl>   } } 
public class SourceMapGeneratorV2 implements SourceMapGenerator { <nl> <nl> private static final String BASE64_MAP = <nl> " ABCDEFGHIJKLMNOPQRSTUVWXYZ " + <nl> - " abcdefghijklmnopqrstuvwzyz " + <nl> + " abcdefghijklmnopqrstuvwxyz " + <nl> " 0123456789 + / " ; <nl> <nl>   } 
public class ByteFormat extends Format { <nl> <nl> <nl> public String format ( long bytes ) { <nl> - return format ( bytes ) ; <nl> + return super . format ( bytes ) ; <nl> } <nl> <nl>   } 
public abstract class ResultMessage extends Message . Response <nl> { public static class SetKeyspace extends ResultMessage <nl> { <nl> - private final String keyspace ; <nl> + } public final String keyspace ; <nl> public SetKeyspace ( String keyspace ) <nl> { <nl>   } } 
public abstract class AbstractJPATest { <nl> <nl> <nl> + <nl> public void Substring2 ( ) { <nl> QCompany company = QCompany . company ; <nl> StringExpression name = company . name ; <nl>   } } 
public class LocalBlueprintsTest extends GraphTest { <nl> <nl> public Graph generateGraph ( String uid ) { <nl> + <nl> throw new UnsupportedOperationException ( ) ; <nl> } <nl>   } 
public class SherpafyStageFragment extends SherlockFragment { <nl> public SherpafyStageFragment ( ) { <nl> } <nl> - public TourInformation getTour ( ) { <nl> - return tour ; <nl> - } <nl> - <nl> <nl> public void onAttach ( Activity activity ) { <nl> super . onAttach ( activity ) ; <nl>   } } 
public class Note extends Syncable { public void test ( ) { <nl> mNoteJSON = json ; <nl> <nl> + mTimestamp = 0 ; <nl> mComment = null ; <nl> mCommentPreview = null ; <nl> mSubject = null ; <nl>   } } 
public class InstalledPluginsTableModel extends PluginTableModel { public void test ( ) { { <nl> } <nl> if ( ! enabled . booleanValue ( ) ) { <nl> deps . add ( pluginId ) ; <nl> - return false ; <nl> } <nl> return true ; <nl> } <nl>   } 
public class View implements Drawable . Callback , KeyEvent . Callback , Accessibility <nl> <nl> <nl> { public void dispatchSystemUiVisibilityChanged ( int visibility ) { <nl> - mSystemUiVisibility = visibility ; <nl> if ( mOnSystemUiVisibilityChangeListener != null ) { <nl> mOnSystemUiVisibilityChangeListener . onSystemUiVisibilityChange ( <nl> visibility & ~ PUBLIC_STATUS_BAR_VISIBILITY_MASK ) ; <nl>   } } } 
public class StandardContext extends ContainerBase <nl> <nl> <nl> { public void setPath ( String path ) { { <nl> - <nl> + <nl> setName ( path ) ; <nl> } <nl>   } } 
public class VideoplayerActivity extends MediaplayerActivity { <nl> private static class VideoControlsHider extends Handler { <nl> - private static final int DELAY = 5000 ; <nl> + private static final int DELAY = 2500 ; <nl> private WeakReference < VideoplayerActivity > activity ; <nl>   } } 
public class PostfixCompletionConfigurable implements SearchableConfigurable , Ed <nl> <nl> <nl> { public String getHelpTopic ( ) { { <nl> - return getId ( ) ; <nl> + return null ; <nl> } <nl> <nl>   } } 
public class Http11OutputBuffer implements OutputBuffer { <nl> public void init ( SocketWrapperBase < ? > socketWrapper ) { <nl> this . socketWrapper = socketWrapper ; <nl> - <nl> } <nl>   } 
public class MainMenuActivity extends Activity { public void test ( ) { <nl> getMyApplication ( ) . setAppCustomization ( new SherpafyCustomization ( ) ) ; <nl> startActivity ( mapIntent ) ; <nl> finish ( ) ; <nl> + return ; <nl> } <nl> boolean exit = false ; <nl>   } 
public class Html2Text <nl> <nl> { public static synchronized String extractText ( String html ) <nl> { <nl> + if ( html == null ) <nl> + return null ; <nl> + <nl> if ( parser == null ) <nl> parser = new HTMLParserCallBack ( ) ; <nl>   } } 
public abstract class PythonModuleTypeBase < T extends ModuleBuilder > extends Modu <nl> <nl> { public String getDescription ( ) { <nl> - return " Provides facilities for developing Python applications " ; <nl> + return " Provides facilities for developing Python and Django applications " ; <nl> } <nl> public Icon getBigIcon ( ) { <nl>   } } 
public class IndexCreator { public void test ( ) { <nl> <nl> <nl> if ( logMapDataWarn == null ) { <nl> - log = logMapDataWarn ; <nl> + logMapDataWarn = log ; <nl> } <nl> if ( renderingTypes == null ) { <nl>   } } } 
class ParseState { <nl> public void reset ( ) { { <nl> this . state = 0 ; <nl> this . pos = 0 ; <nl> + this . leftOver = 0 ; <nl> } <nl> } <nl>   } 
public class WebView extends AbsoluteLayout <nl> <nl> <nl> { public static void freeMemoryForTests ( ) { { <nl> - checkThread ( ) ; <nl> getFactory ( ) . getStatics ( ) . freeMemoryForTests ( ) ; <nl> } <nl>   } } 
public class Reference < T > { <nl> <nl> <nl> public boolean isNotSet ( ) { { <nl> - return value != null ; <nl> + return value == null ; <nl> } <nl> } <nl>   } 
public class ImageWallpaper extends WallpaperService { <nl> private void updateWallpaperLocked ( ) { <nl> Throwable exception = null ; <nl> try { <nl> - mWallpaperManager . forgetLoadedWallpaper ( ) ; <nl> mBackground = null ; <nl> mBackground = mWallpaperManager . getBitmap ( ) ; <nl> } catch ( RuntimeException e ) { <nl>   } } } 
import com . facebook . android . Facebook ; <nl> import com . facebook . android . Facebook . DialogListener ; <nl> import com . facebook . android . FacebookError ; <nl> - public class ConnectPlugin extends Plugin { <nl> + public class ConnectPlugin extends CordovaPlugin { <nl> } public static final String SINGLE_SIGN_ON_DISABLED = " service_disabled " ; <nl> private final String TAG = " ConnectPlugin " ; <nl>   } 
public abstract class Optional < T > implements Serializable { public void test ( ) { { { { { { <nl> return endOfData ( ) ; <nl> } <nl> } ; <nl> - } ; <nl> + } <nl> } ; <nl> } <nl>   } 
public class PhoneAccount implements Parcelable { public void test ( ) { <nl> if ( mIconBitmap == null ) { <nl> out . writeInt ( 0 ) ; <nl> } else { <nl> + out . writeInt ( 1 ) ; <nl> mIconBitmap . writeToParcel ( out , flags ) ; <nl> } <nl> out . writeInt ( mIconTint ) ; <nl>   } } 
import java . util . HashMap ; <nl> import java . util . List ; <nl> import java . util . Map ; <nl> - import org . hibernate . validator . cfg . defs . GenericConstraintDef ; <nl> import rx . Observable ; <nl>   
public class GitVcsConfigurable implements Configurable { <nl> <nl> <nl> public String getHelpTopic ( ) { <nl> - return null ; <nl> + return " project . propVCSSupport . VCSs . Git " ; <nl> } <nl> <nl>   } 
public class Tmp { public void test ( ) { <nl> - <nl> <nl> <nl> <nl>   } } 
public class CuboidRegion extends AbstractRegion implements FlatRegion { public void test ( ) { <nl> super ( world ) ; <nl> this . pos1 = pos1 ; <nl> this . pos2 = pos2 ; <nl> + recalculate ( ) ; <nl> } <nl> <nl>   } 
public class NettyResponse implements Response { public void test ( ) { <nl> for ( HttpResponseBodyPart part : bodyParts ) <nl> target . put ( part . getBodyPartBytes ( ) ) ; <nl> + target . flip ( ) ; <nl> return target ; <nl> } <nl>   } 
public class LocalOpenstreetmapActivity extends ListActivity { <nl> private OpenstreetmapRemoteUtil remotepoi ; <nl> private OsmBugsRemoteUtil remotebug ; <nl> - protected OsmPoint [ ] toUpload ; <nl> + protected OsmPoint [ ] toUpload = new OsmPoint [ 0 ] ; <nl> private ArrayList < OsmPoint > dataPoints ; <nl>   } 
public class XHTMLText { <nl> <nl> <nl> public XHTMLText appendBrTag ( ) { <nl> - text . closeElement ( BR ) ; <nl> + text . emptyElement ( BR ) ; <nl> return this ; <nl> } <nl>   } 
public class WebViewDatabase { public void test ( ) { <nl> } <nl> long getCacheTotalSize ( ) { <nl> + if ( mCacheDatabase == null ) { <nl> + return 0 ; <nl> + } <nl> long size = 0 ; <nl> Cursor cursor = null ; <nl> final String query = " SELECT SUM ( contentlength ) as sum FROM cache " ; <nl>   } } 
public class ABTestingUtils { <nl> public static boolean isFeatureEnabled ( Feature feature ) { <nl> switch ( feature ) { <nl> case HELPSHIFT : <nl> - return false ; <nl> + return true ; <nl> } <nl> return false ; <nl> } <nl>   } 
public class PoshiRunnerGetterUtil { public void test ( ) { <nl> Element rootElement = document . getRootElement ( ) ; <nl> - PoshiRunnerValidation . validate ( rootElement , filePath ) ; <nl> - <nl> return rootElement ; <nl> } <nl>   } 
public class RealTimeCounter { public void test ( ) {  } void incrementPosition ( ) { counter . set ( ( pos + 1 ) % GRANULARITY , 0 ) ;  pos = ( pos + 1 ) % GRANULARITY ;  }   } 
public class PortletProviderUtil { public void test ( ) { <nl> _addServiceTrackerMap . open ( ) ; <nl> _browseServiceTrackerMap . open ( ) ; <nl> _editServiceTrackerMap . open ( ) ; <nl> + _manageServiceTrackerMap . open ( ) ; <nl> _viewServiceTrackerMap . open ( ) ; <nl> } <nl>   } 
public abstract class MongoCollectionSplitter extends MongoSplitter { <nl> public static final MaxKey MAX_KEY_TYPE = new MaxKey ( ) ; <nl> protected Mongo mongo ; <nl> protected DBCollection inputCollection ; <nl> - protected Configuration conf ; <nl> protected MongoURI inputURI ; <nl> protected MongoURI authURI ; <nl>   } 
public class VertxImpl implements VertxInternal , MetricsProvider { <nl> <nl> public synchronized TimeoutStream resume ( ) { <nl> this . paused = false ; <nl> - return null ; <nl> + return this ; <nl> } <nl> <nl>   } 
public class ConnectorServerTest <nl> <nl> <nl> + <nl> { public void testConnServerWithRmiDefaultPort ( ) throws Exception <nl> { <nl> <nl>   } } 
public class FreeFlowContainer extends AbsLayoutContainer { public void test ( ) { <nl> if ( viewPortY > mScrollableHeight ) <nl> viewPortY = mScrollableHeight ; <nl> - <nl> - <nl> - Log . d ( " debug " , " - - > viewportY " + viewPortY ) ; <nl> } <nl>   } 
public class SchematicTile extends SchematicBlock { public void test ( ) { { <nl> if ( tile != null ) { <nl> tile . writeToNBT ( tileNBT ) ; <nl> } <nl> + tileNBT = ( NBTTagCompound ) tileNBT . copy ( ) ; <nl> } <nl> } <nl>   } 
public class VoldemortConfig implements Serializable { <nl> private final long pusherPollMs ; <nl> - public VoldemortConfig ( ) { <nl> - this ( new Props ( ) ) ; <nl> - } <nl> - <nl> public VoldemortConfig ( Properties props ) { <nl> this ( new Props ( props ) ) ; <nl> } <nl>   } 
package javaslang ; <nl> import java . lang . reflect . Constructor ; <nl> import java . lang . reflect . InvocationTargetException ; <nl> + <nl> public final class Assertions { public void test ( ) { <nl> <nl>   } } 
public class RendererConfiguration implements Cloneable , JDOMExternalizable { <nl> <nl> public void addRenderer ( NodeRenderer renderer ) { <nl> - myRepresentationNodes . add ( renderer ) ; <nl> + myRepresentationNodes . add ( 0 , renderer ) ; <nl> } <nl> <nl>   } 
public class ImportTrayPreferences extends TrayModulePreferences { <nl> <nl> protected void onCreate ( final int initialVersion ) { <nl> - migrate ( ) ; <nl> } <nl>   } 
package flow ; <nl> - public final class Preconditions { <nl> + final class Preconditions { <nl> private Preconditions ( ) { <nl> } <nl>   } } 
import com . google . javascript . rhino . Node ; <nl> <nl> <nl> <nl> + <nl> public class ProcessClosurePrimitivesTest extends CompilerTestCase { <nl> private String additionalCode ; <nl> private String additionalEndCode ; <nl>   } 
public class CustomTemplateCallback { <nl> public PsiFile getFile ( ) { <nl> return myFile ; <nl> } <nl> + <nl> + public Project getProject ( ) { <nl> + return myProject ; <nl> + } <nl> } <nl>   
public final class Fun { <nl> <nl> } <nl> + public interface Function0 < R > { <nl> + R run ( ) ; <nl> + } <nl> + <nl> + <nl> public interface Function1 < R , A > { <nl> R run ( A a ) ; <nl> } <nl>   
public class StorageService implements IEndpointStateChangeSubscriber , StorageSe <nl> { public void test ( ) { <nl> if ( daemon == null ) <nl> { <nl> - throw new IllegalStateException ( " No configured RPC daemon " ) ; <nl> + return false ; <nl> } <nl> return daemon . isRPCServerRunning ( ) ; <nl> } <nl>   } 
import java . util . logging . Logger ; <nl> <nl> public class DepsGenerator { <nl> - enum InclusionStrategy { <nl> + public static enum InclusionStrategy { <nl> ALWAYS , <nl> WHEN_IN_SRCS , <nl> DO_NOT_DUPLICATE <nl>   } } } 
class IntroduceFieldDialog extends DialogWrapper { public void test ( ) { <nl> JavaRefactoringSettings . getInstance ( ) . INTRODUCE_FIELD_VISIBILITY = getFieldVisibility ( ) ; <nl> myNameSuggestionsManager . nameSelected ( ) ; <nl> + myTypeSelectorManager . typeSelected ( getFieldType ( ) ) ; <nl> super . doOKAction ( ) ; <nl> } <nl>   } 
public class PFont implements PConstants { <nl> <nl> + public void setSubsetting ( ) { <nl> + subsetting = true ; <nl> + } <nl> + <nl> + <nl> public String getPostScriptName ( ) { <nl> return psname ; <nl> } <nl>   } 
public class GitBranchIsNotFullyMergedDialog extends DialogWrapper { public void test ( ) { <nl> setTitle ( " Branch Is Not Fully Merged " ) ; <nl> setOKButtonText ( " Delete " ) ; <nl> + setOKButtonMnemonic ( ' D ' ) ; <nl> setCancelButtonText ( " Cancel " ) ; <nl> } <nl>   } 
package com . puppycrawl . tools . checkstyle . coding ; <nl> - import test . OverloadInput ; <nl> + <nl> class OverloadInput <nl> { public void test ( ) { <nl>   } } 
public class ServiceManager implements ServiceManagerMBean { <nl> <nl> public boolean isActive ( ) { <nl> - return _serviceMonitorAdvice . isActive ( ) ; <nl> + return ServiceMonitorAdvice . isActive ( ) ; <nl> } <nl> <nl>   } 
public class MaterialRefreshLayout extends FrameLayout { public void test ( ) { { <nl> progressSize = BIG_PROGRESS_SIZE ; <nl> } <nl> isLoadMore = t . getBoolean ( R . styleable . MaterialRefreshLayout_isLoadMore , false ) ; <nl> + t . recycle ( ) ; <nl> } <nl>   } 
public class CachedListTest extends TestBase { <nl> <nl> <nl> - public void testReloadAllUpdatesListObjects ( ) { <nl> + } public void testReloadUpdatesListObjects ( ) { <nl> ModelCache modelCache = new ModelCache ( 2 , 1 , 1 ) ; <nl> String id = " 123 " ; <nl>   } } 
public final class Bootstrap { public void test ( ) { <nl> <nl> <nl> <nl> <nl> <nl> <nl> <nl>   } } 
import javax . annotation . concurrent . ThreadSafe ; <nl> public final class RetryHandlingBlockMasterClient extends AbstractMasterClient <nl> implements BlockMasterClient { <nl> - <nl> private BlockMasterClientService . Client mClient ; <nl> <nl>   } 
public class Tmp { public interface IdeaPlugin extends DomElement { <nl> GenericAttributeValue < String > getUrl ( ) ; <nl> <nl> + GenericAttributeValue < Boolean > getUseIdeaClassloader ( ) ; <nl> + <nl> + <nl> GenericDomValue < String > getName ( ) ; <nl>   } } 
public class Tmp { public interface QueryHandler { <nl> <nl> <nl> <nl> - } public boolean createNativeQueryTyped ( ) ; <nl> + boolean createNativeQueryTyped ( ) ; <nl> <nl> <nl>   } 
public final class R { <nl> public static final class anim { <nl> } public static final int test_anim_1 = 0x10700 ; <nl> - public static final int animation_list = 0x10700 ; <nl> + public static final int animation_list = 0x10701 ; <nl> } <nl> public static final class raw { <nl>   } 
public class KeyguardUpdateMonitor { <nl> private int mFailedAttempts = 0 ; <nl> private int mFailedBiometricUnlockAttempts = 0 ; <nl> - private static final int FAILED_BIOMETRIC_UNLOCK_ATTEMPTS_BEFORE_BACKUP = 5 ; <nl> + private static final int FAILED_BIOMETRIC_UNLOCK_ATTEMPTS_BEFORE_BACKUP = 3 ; <nl> private boolean mClockVisible ; <nl>   } 
import com . jwetherell . algorithms . graph . TopologicalSort ; <nl> public class DataStructures { <nl> - private static final int SIZE = 1000 ; <nl> + private static final int SIZE = 100 ; <nl> private static Integer [ ] unsorted = null ; <nl> public static void main ( String [ ] args ) { <nl>   } } 
public class TestRemoteIpFilter extends TomcatBaseTest { <nl> private static final long serialVersionUID = 1L ; <nl> - HttpServletRequest request ; <nl> + private transient HttpServletRequest request ; <nl> public HttpServletRequest getRequest ( ) { <nl> return request ; <nl>   } } 
public class PersonDetailFragment extends Fragment { <nl> public void setPersonDetails ( long personID , int localTableBlogID ) { { <nl> mPersonID = personID ; <nl> mLocalTableBlogID = localTableBlogID ; <nl> + refreshPersonDetails ( ) ; <nl> } <nl> } <nl>   } 
public abstract class AlertCondition implements EmbeddedPersistable { public void test ( ) { { <nl> return false ; <nl> } <nl> - return lastAlertSecondsAgo < grace * 60 ; <nl> + return lastAlertSecondsAgo < ( grace * 60 ) - 2 ; <nl> } <nl> <nl>   } 
public class DisUnity { <nl> <nl> public static String getVersion ( ) { <nl> - return " 0 . 3 . 3 " ; <nl> + return " 0 . 3 . 4 " ; <nl> } <nl> public static String getSignature ( ) { <nl>   } } 
public class SampleFactory implements SampleSource { <nl> public SampleFactory ( Graph graph ) { <nl> this . graph = graph ; <nl> - this . setSearchRadiusM ( 200 ) ; <nl> + this . setSearchRadiusM ( 500 ) ; <nl> } <nl> private Graph graph ; <nl>   } 
class ConnectionContext { <nl> <nl> public void onFailure ( Throwable t ) { { <nl> - Messages . sendErrorResponse ( channel , Exceptions . messageOf ( t ) ) ; <nl> Messages . sendReadyForQuery ( channel ) ; <nl> } <nl> } <nl>   } 
public class Location implements Cloneable { <nl> <nl> <nl> - protected Location clone ( ) { <nl> + public Location clone ( ) { { <nl> return new Location ( world , x , y , z , yaw , pitch ) ; <nl> } <nl> } <nl>   } } 
final class SQLiteBooksDatabase extends BooksDatabase { public void test ( ) { <nl> statement . bindLong ( 2 , lastModified ) ; <nl> try { <nl> return statement . simpleQueryForString ( ) ; <nl> - } catch ( SQLiteDoneException e ) { <nl> + } catch ( SQLException e ) { <nl> return null ; <nl> } <nl> } <nl>   } 
public class LocalComponentDependencyMetadata implements LocalOriginDependencyMe <nl> <nl> { public String getDependencyConfiguration ( ) { { <nl> - return dependencyConfiguration ; <nl> + return getOrDefaultConfiguration ( dependencyConfiguration ) ; <nl> } <nl> <nl>   } } 
public class VectAlignTest { <nl> <nl> public void testRandomLinearInterpolateAligns ( ) throws Exception { <nl> - testRandomAligns ( VectAlign . Mode . LINEAR_INTERPOLATE ) ; <nl> + testRandomAligns ( VectAlign . Mode . LINEAR ) ; <nl> } <nl> public void testRandomAligns ( VectAlign . Mode mode ) throws Exception { <nl>   } } 
public class JobUtil { public void test ( ) { <nl> try { <nl> job . scheduleAndWaitForResults ( ) ; <nl> } <nl> - catch ( ProcessCanceledException e ) { <nl> + catch ( RuntimeException e ) { <nl> throw e ; <nl> } <nl> catch ( Throwable throwable ) { <nl>   } } } } 
public class AtmosphereInterceptorWriter extends AsyncIOWriterAdapter { <nl> <nl> public LinkedList < AsyncIOInterceptor > filters ( ) { { <nl> - return filters ( ) ; <nl> + return filters ; <nl> } <nl> } <nl>   } 
public class PythonParsingTest extends ParsingTestCase { <nl> protected void setUp ( ) throws Exception { <nl> super . setUp ( ) ; <nl> registerExtensionPoint ( PythonDialectsTokenSetContributor . EP_NAME , PythonDialectsTokenSetContributor . class ) ; <nl> + registerExtension ( PythonDialectsTokenSetContributor . EP_NAME , new PythonTokenSetContributor ( ) ) ; <nl> } <nl> <nl>   } 
public class QueueContainer implements IdentifiedDataSerializable { public void test ( ) { { { <nl> throw new HazelcastException ( e ) ; <nl> } <nl> } <nl> - txMap . put ( item . getItemId ( ) , new TxQueueItem ( item ) . setTransactionId ( transactionId ) ) ; <nl> return item ; <nl> } <nl>   } 
public class IWindowManagerImpl implements IWindowManager { <nl> <nl> <nl> - public void showAssistant ( ) { <nl> - <nl> - } <nl> - <nl> - <nl> public IBinder getFocusedWindowToken ( ) { <nl> <nl> return null ; <nl>   } } 
public class NotImplementedRequestDelayControl implements RequestDelayControl { <nl> <nl> public void clearDelay ( ) { <nl> - throw new UnsupportedOperationException ( " Socket control isn ' t available in this configuration " ) ; <nl> + <nl> } <nl> <nl>   } 
import java . io . IOException ; <nl> <nl> public class DiandianProcessorTest { <nl> + <nl> <nl> public void test ( ) throws IOException { <nl> DiandianBlogProcessor diaoyuwengProcessor = new DiandianBlogProcessor ( ) ; <nl>   } } 
public class PGraphicsOpenGL extends PGraphics { <nl> <nl> <nl> public PSurface createSurface ( ) { <nl> - return new PSurfaceJOGL ( this ) ; <nl> + return surface = new PSurfaceJOGL ( this ) ; <nl> } <nl>   } 
abstract class RequestArcAction extends FeatureAction { public void test ( ) { { { <nl> return ; <nl> } <nl> disableArcTransmission ( ) ; <nl> + finish ( ) ; <nl> } <nl> } <nl>   } 
abstract class HeadlessBootstrap extends ZapBootstrap { <nl> public HeadlessBootstrap ( CommandLine args ) { <nl> super ( args ) ; <nl> + <nl> + System . setProperty ( " java . awt . headless " , " true " ) ; <nl> } <nl> <nl>   } 
public class MtpDatabase { <nl> protected void finalize ( ) throws Throwable { <nl> try { <nl> native_finalize ( ) ; <nl> - mDevicePropDb . close ( ) ; <nl> } finally { <nl> super . finalize ( ) ; <nl> } <nl>   } } 
public class NativeRunnable implements Runnable { <nl> private final HybridData mHybridData ; <nl> + <nl> private NativeRunnable ( HybridData hybridData ) { <nl> mHybridData = hybridData ; <nl> } <nl>   } 
public class IntentionSettingsConfigurable extends BaseConfigurable implements A <nl> <nl> { public String getHelpTopic ( ) { <nl> - return " preferences . errorHighlight " ; <nl> + return " preferences . intentionPowerPack " ; <nl> } <nl> public void disposeComponent ( ) { <nl>   } } 
public class KeyguardManager { <nl> <nl> public boolean isKeyguardLocked ( ) { <nl> try { <nl> - return mWM . isKeyguardSecure ( ) ; <nl> + return mWM . isKeyguardLocked ( ) ; <nl> } catch ( RemoteException ex ) { <nl> return false ; <nl> } <nl>   } } 
final class DefaultChannelPipeline implements ChannelPipeline { public void test ( ) { { <nl> } <nl> } <nl> - <nl> final Channel channel ; <nl> final DefaultChannelHandlerContext head ; <nl>   } 
public class KeyguardManager { <nl> <nl> public boolean isKeyguardLocked ( ) { <nl> try { <nl> - return mWM . isKeyguardSecure ( ) ; <nl> + return mWM . isKeyguardLocked ( ) ; <nl> } catch ( RemoteException ex ) { <nl> return false ; <nl> } <nl>   } } 
package com . mongodb ; <nl> <nl> <nl> public class MongoInterruptedException extends MongoException { <nl> + private static final long serialVersionUID = - 4110417867718417860L ; <nl> + <nl> public MongoInterruptedException ( final InterruptedException e ) { <nl> super ( " A driver operation has been interrupted " , e ) ; <nl> } <nl>   } 
public class PApplet implements PConstants { public void test ( ) { <nl> <nl> <nl> <nl> <nl> <nl> <nl> <nl>   } } 
public class TextureView extends View { <nl> <nl> public void setLayerType ( int layerType , Paint paint ) { <nl> if ( paint != mLayerPaint ) { <nl> - mLayerPaint = paint ; <nl> + mLayerPaint = paint == null ? new Paint ( ) : paint ; <nl> invalidate ( ) ; <nl> } <nl> } <nl>   } 
public class WebView extends AbsoluteLayout <nl> <nl> <nl> { public static String findAddress ( String addr ) { { <nl> - checkThread ( ) ; <nl> return getFactory ( ) . getStatics ( ) . findAddress ( addr ) ; <nl> } <nl>   } } 
class PublicationImagePadding4 extends PublicationImageStatusFields <nl> <nl> { public class PublicationImage <nl> extends PublicationImagePadding4 <nl> - implements AutoCloseable , NakMessageSender , DriverManagedResource <nl> + implements NakMessageSender , DriverManagedResource <nl> { <nl> } public enum Status <nl> { <nl>   } } 
public final class PageDecorations implements ServerComponent { <nl> <nl> public PageDecoration [ ] get ( ) { { <nl> - return decorations ; <nl> + return decorations ; <nl> } <nl> } <nl>   } 
public abstract class BaseTransformer implements Transformer { public void test ( ) { <nl> try { <nl> templateParser = <nl> ( TemplateParser ) InstanceFactory . newInstance ( <nl> + PortalClassLoaderUtil . getClassLoader ( ) , <nl> templateParserClassName ) ; <nl> } <nl> catch ( Exception e ) { <nl>   } } } 
public class MainActivity extends Activity { <nl> protected void onCreate ( Bundle savedInstanceState ) { <nl> super . onCreate ( savedInstanceState ) ; <nl> setContentView ( R . layout . activity_main ) ; <nl> + <nl> + <nl> + <nl> } <nl>   } 
public class FakeTextView extends FakeView { <nl> public void setText ( CharSequence text ) { <nl> this . textResourceId = UNINITIALIZED_ATTRIBUTE ; <nl> + if ( text == null ) { <nl> + text = " " ; <nl> + } <nl> this . text = text ; <nl> } <nl>   } 
package org . json ; <nl> <nl> <nl> <nl> <nl> <nl> <nl> <nl> public class JSONPointerException extends JSONException { <nl> private static final long serialVersionUID = 8872944667561856751L ; <nl>   } 
public class JmeSystem { <nl> <nl> public static String getFullName ( ) { <nl> - return " jMonkey Engine 3 Alpha 0 . 6 " ; <nl> + return " jMonkeyEngine 3 . 0 . 0 Beta " ; <nl> } <nl> public static InputStream getResourceAsStream ( String name ) { <nl>   } } 
class TestJavaLR { public void test ( ) { { <nl> System . err . println ( " exception : " + e ) ; <nl> e . printStackTrace ( System . err ) ; <nl> } <nl> + System . gc ( ) ; <nl> } <nl>   } 
public abstract class AttributeDefinition { <nl> <nl> public String [ ] getRequires ( ) { <nl> - return alternatives ; <nl> + return requires ; <nl> } <nl> public EnumSet < AttributeAccess . Flag > getFlags ( ) { <nl>   } } 
public final class Versioned < T > implements Serializable { <nl> private static final long serialVersionUID = 1 ; <nl> - private VectorClock version ; <nl> + private final VectorClock version ; <nl> private volatile T object ; <nl> public Versioned ( T object ) { <nl>   } } 
public final class CallOptions { public void test ( ) { <nl> deadlineNanoTime = other . deadlineNanoTime ; <nl> authority = other . authority ; <nl> requestKey = other . requestKey ; <nl> + executor = other . executor ; <nl> } <nl> <nl>   } 
package water . exec ; <nl> import java . util . * ; <nl> - <nl> - import org . apache . commons . lang . ArrayUtils ; <nl> - <nl> import water . * ; <nl> import water . fvec . * ; <nl>   
public class TreeTraversalInSpiralOrder { <nl> <nl> <nl> <nl> <nl> <nl> public void spiralWithOneDeque ( Node root ) { <nl> if ( root == null ) { <nl>   } } } 
public class PyUnboundLocalVariableInspection extends LocalInspectionTool { <nl> <nl> public boolean isEnabledByDefault ( ) { <nl> - return true ; <nl> + return false ; <nl> } <nl> <nl>   } 
public abstract class ContentResolver { <nl> public ContentResolver ( Context context ) { <nl> mContext = context != null ? context : ActivityThread . currentApplication ( ) ; <nl> - mPackageName = context . getBasePackageName ( ) ; <nl> + mPackageName = mContext . getBasePackageName ( ) ; <nl> } <nl> <nl>   } 
public class RandomTransitionGenerator implements TransitionGenerator { public void test ( ) { <nl> mLastGenTrans = new Transition ( srcRect , dstRect , mTransitionDuration , <nl> mTransitionInterpolator ) ; <nl> - mLastDrawableBounds = drawableBounds ; <nl> + mLastDrawableBounds = new RectF ( drawableBounds ) ; <nl> return mLastGenTrans ; <nl> } <nl>   } 
public abstract class AbstractLocalTachyonCluster { <nl> protected BlockWorker mWorker ; <nl> protected LineageWorker mLineageWorker ; <nl> - protected UnderFileSystemCluster mUfsCluster = null ; <nl> + protected UnderFileSystemCluster mUfsCluster ; <nl> protected String mTachyonHome ; <nl> protected String mHostname ; <nl>   } 
package com . google . bitcoin . core ; <nl> - import com . sun . tools . internal . ws . wsdl . document . Output ; <nl> - <nl> import java . io . IOException ; <nl> import java . io . OutputStream ; <nl> import java . io . Serializable ; <nl>   
public class XDebuggerMultilineEditor extends XDebuggerEditorBase { public void test ( ) { { { <nl> return false ; <nl> } <nl> } ; <nl> + myEditorTextField . setFontInheritedFromLAF ( false ) ; <nl> } <nl> <nl>   } 
public class MetricRegistry implements MetricSet { <nl> <nl> public Map < String , Metric > getMetrics ( ) { <nl> - return metrics ; <nl> + return Collections . unmodifiableMap ( metrics ) ; <nl> } <nl> <nl>   } 
public class LineageFileOutStream extends FileOutStream { <nl> <nl> protected void scheduleAsyncPersist ( ) throws IOException { <nl> <nl> - return ; <nl> } <nl> } <nl>   
public class WifiScanner { public void test ( ) { <nl> validateChannel ( ) ; <nl> HotlistSettings settings = new HotlistSettings ( ) ; <nl> settings . bssidInfos = bssidInfos ; <nl> + settings . apLostThreshold = apLostThreshold ; <nl> sAsyncChannel . sendMessage ( CMD_SET_HOTLIST , 0 , putListener ( listener ) , settings ) ; <nl> } <nl>   } 
public class JmsNamespaceHandlerTests extends TestCase { <nl> static class TestErrorHandler implements ErrorHandler { <nl> - <nl> public void handleError ( Throwable t ) { { <nl> } <nl> } <nl>   } } 
public class PImage implements PConstants , Cloneable { public void test ( ) { <nl> modified = true ; <nl> mx1 = 0 ; <nl> my1 = 0 ; <nl> - mx2 = width ; <nl> - my2 = height ; <nl> + mx2 = width - 1 ; <nl> + my2 = height - 1 ; <nl> } <nl>   } 
import java . util . Random ; <nl> public class NeuronsTest extends water . TestUtil { <nl> public static void setup ( ) { stall_till_cloudsize ( 1 ) ; } <nl> + <nl> <nl> public void matrixVecTest ( ) { <nl> int rows = 2048 ; <nl>   } } 
import java . util . Set ; <nl> <nl> <nl> <nl> <nl> <nl> public class RequestFileFilter { <nl> private final StoreDefinition storeDefinition ; <nl>   } 
public class Tmp { public interface DsGetDC extends StdCallLibrary { <nl> } public DS_DOMAIN_TRUSTS ( Pointer p ) { { { { <nl> super ( p ) ; <nl> + read ( ) ; <nl> } <nl> } ; <nl> } <nl>   } } 
import java . io . IOException ; <nl> <nl> public class InstallCommand extends AbstractCommandRunner < InstallCommandOptions > { <nl> - protected InstallCommand ( CommandRunnerParams params ) { <nl> + public InstallCommand ( CommandRunnerParams params ) { <nl> super ( params ) ; <nl> } <nl>   } } 
public class WebSettings { public void test ( ) { <nl> if ( mBlockNetworkLoads != flag ) { <nl> mBlockNetworkLoads = flag ; <nl> verifyNetworkAccess ( ) ; <nl> + postSync ( ) ; <nl> } <nl> } <nl>   } 
public class SquidCursorTest extends DatabaseTestCase { public void test ( ) { { { <nl> evens . moveToPosition ( i ) ; <nl> assertEquals ( i * 2 , evens . get ( Thing . BAR ) . intValue ( ) ) ; <nl> } <nl> + evens . close ( ) ; <nl> } <nl> } <nl>   } 
public class AsmClassGenerator extends ClassGenerator { public void test ( ) { <nl> Variable variable = compileStack . getVariable ( variableName , false ) ; <nl> - VariableScope scope = compileStack . getScope ( ) ; <nl> if ( variable == null ) { <nl> processClassVariable ( variableName ) ; <nl> } else { <nl>   } } } 
public class GradientDrawable extends Drawable { public void test ( ) { <nl> mUseLevel = state . mUseLevel ; <nl> mUseLevelForShape = state . mUseLevelForShape ; <nl> mOpaqueOverBounds = state . mOpaqueOverBounds ; <nl> + mOpaqueOverShape = state . mOpaqueOverShape ; <nl> mThemeAttrs = state . mThemeAttrs ; <nl> mAttrSize = state . mAttrSize ; <nl> mAttrGradient = state . mAttrGradient ; <nl>   } } 
public class SliderLayout extends RelativeLayout { <nl> ; <nl> public void startAutoCycle ( ) { <nl> - startAutoCycle ( 1000 , mSliderDuration , mAutoRecover ) ; <nl> + startAutoCycle ( mSliderDuration , mSliderDuration , mAutoRecover ) ; <nl> } <nl> <nl>   } 
public abstract class HazelcastTestSupport { public void test ( ) { { <nl> } <nl> printAllStackTraces ( ) ; <nl> - <nl> throw error ; <nl> } <nl>   } 
public class CoreProxy { <nl> <nl> public static void setField804 ( EntityItem item , float value ) { <nl> - item . field_804_d = value ; <nl> + item . hoverStart = value ; <nl> } <nl> public static File getPropertyFile ( ) { <nl>   } } 
class DatabaseDumpHandler extends BaseWikipediaDumpHandler { public void test ( ) { <nl> contextTools . setContextSize ( CONTEXT_SIZE ) ; <nl> contextTools . setErrorMarkerStart ( MARKER_START ) ; <nl> contextTools . setErrorMarkerEnd ( MARKER_END ) ; <nl> + contextTools . setEscapeHtml ( false ) ; <nl> } <nl> <nl>   } 
import jackpal . androidterm . emulatorview . TermSession ; <nl> import jackpal . androidterm . util . TermSettings ; <nl> public class TermView extends EmulatorView { <nl> - private static final String TAG = " TermView " ; <nl> public TermView ( Context context , TermSession session , DisplayMetrics metrics ) { <nl> super ( context , session , metrics ) ; <nl>   } } 
package biz . bokhorst . xprivacy ; <nl> import java . util . Date ; <nl> - import android . util . Log ; <nl> - <nl> public class CRestriction { <nl> private long mExpiry ; <nl> public int mUid ; <nl>   } 
public class PermissionCheckerBagImpl implements PermissionCheckerBag { public void test ( ) { { { <nl> } <nl> } <nl> + if ( _userGroups . contains ( group ) ) { <nl> + return true ; <nl> + } <nl> + <nl> return false ; <nl> } <nl>   } 
public class Downloader <nl> { public String downloadAsString ( String url ) throws IOException <nl> { { { <nl> - HttpURLConnection conn = createConnection ( url ) ; <nl> - conn . connect ( ) ; <nl> return Helper . isToString ( fetch ( url ) ) ; <nl> } <nl> } <nl>   } } 
public class UrlMappingUtils { public void test ( ) { { { <nl> WebUtils . cleanupIncludeRequestAttributes ( request , toRestore ) ; <nl> } <nl> } <nl> - <nl> - <nl> - <nl> - <nl> - <nl> } <nl>   } 
public class LiquibaseServletListener implements ServletContextListener { public void test ( ) { { <nl> } <nl> if ( connection != null ) { <nl> connection . close ( ) ; <nl> - connection . close ( ) ; <nl> } <nl> } <nl>   } 
import php . runtime . reflection . ModuleEntity ; <nl> import java . io . File ; <nl> import java . io . PrintStream ; <nl> - import java . util . logging . ConsoleHandler ; <nl> public class CLI { <nl> private final Arguments arguments ; <nl>   } 
public class GridSectionLayoutManager extends SectionLayoutManager { public void test ( ) { { { <nl> bottomMostEdge = bottomEdge ; <nl> } <nl> } <nl> - return endEdge ; <nl> + return bottomMostEdge ; <nl> } <nl> <nl>   } 
public class AppWidgetHost { <nl> private OnClickHandler mOnClickHandler ; <nl> public AppWidgetHost ( Context context , int hostId ) { <nl> - this ( context , hostId , null , Looper . getMainLooper ( ) ) ; <nl> + this ( context , hostId , null , context . getMainLooper ( ) ) ; <nl> } <nl> <nl>   } 
public class WebappServiceLoader < T > { public void test ( ) { { <nl> if ( line . length ( ) == 0 ) { <nl> continue ; <nl> } <nl> - if ( servicesFound . contains ( line ) ) { <nl> - continue ; <nl> - } <nl> servicesFound . add ( line ) ; <nl> } <nl> } <nl>   } 
public class DLAppLocalServiceTest { <nl> <nl> private Group _group ; <nl> - <nl> private Repository _repository ; <nl> } <nl>   
public class AsyncDataSetIterator implements DataSetIterator { <nl> <nl> public List < String > getLabels ( ) { <nl> - return null ; <nl> + return baseIterator . getLabels ( ) ; <nl> } <nl> <nl>   } 
public abstract class UpdaterTestCase { <nl> <nl> public void setUp ( ) throws Exception { <nl> + Runner . initLogger ( System . getProperty ( " java . io . tmpdir " ) ) ; <nl> myTempDirFixture = IdeaTestFixtureFactory . getFixtureFactory ( ) . createTempDirTestFixture ( ) ; <nl> myTempDirFixture . setUp ( ) ; <nl>   } } 
public class RunTests { public void test ( ) { { { { <nl> } <nl> } <nl> TestRunner . run ( s ) ; <nl> + System . exit ( 0 ) ; <nl> } <nl> } <nl>   } 
public final class AccessibilityManager { public void test ( ) { { { <nl> sInstance = new AccessibilityManager ( context , service ) ; <nl> } <nl> } <nl> - <nl> - AccessibilityManager accessibilityManager = <nl> - ( AccessibilityManager ) context . getSystemService ( Context . ACCESSIBILITY_SERVICE ) ; <nl> return sInstance ; <nl> } <nl>   } 
public class RibbonConfig { public void test ( ) { <nl> } <nl> <nl> <nl> <nl> <nl> <nl> <nl>   } 
public abstract class CompletionPhase implements Disposable { <nl> <nl> public int newCompletionStarted ( int time , boolean repeated ) { { <nl> CompletionServiceImpl . setCompletionPhase ( NoCompletion ) ; <nl> - return time ; <nl> + return time + 1 ; <nl> } <nl> } <nl>   } 
public class ConfusionMatrix extends Iced { public void test ( ) { <nl> prediction_error_by_class = classErr ( ) ; <nl> prediction_error = err ( ) ; <nl> this . domain = domain ; <nl> + table = toTable ( ) ; <nl> } <nl> <nl>   } 
final class MountListener implements Runnable { public void test ( ) { <nl> byte [ ] buffer = new byte [ 100 ] ; <nl> writeCommand ( VOLD_CMD_SEND_UMS_STATUS ) ; <nl> + mountMedia ( Environment . getExternalStorageDirectory ( ) . getAbsolutePath ( ) ) ; <nl> while ( true ) { <nl> int count = inputStream . read ( buffer ) ; <nl>   } } } 
import org . wordpress . android . ui . stats . WPComLoginActivity ; <nl> <nl> <nl> <nl> <nl> public class AuthErrorDialogFragment extends SherlockDialogFragment { public void test ( ) { <nl>   } } 
public class MatcherFilter implements Filter { public void test ( ) { <nl> boolean consumedByStaticFile = StaticFiles . consume ( httpRequest , httpResponse ) ; <nl> if ( consumedByStaticFile ) { <nl> - <nl> - <nl> return ; <nl> } <nl>   } } 
public class TestBug49158 extends CookiesBaseTest { public void test ( ) { { <nl> session . invalidate ( ) ; <nl> session = req . getSession ( ) ; <nl> session . invalidate ( ) ; <nl> - session = req . getSession ( ) ; <nl> + req . getSession ( ) ; <nl> } <nl> } <nl>   } 
public class LogEvent extends AbstractBuckEvent { <nl> <nl> public boolean eventsArePair ( BuckEvent event ) { <nl> - if ( ! ( event instanceof BuckEvent ) ) { <nl> + if ( ! ( event instanceof LogEvent ) ) { <nl> return false ; <nl> } <nl>   } } } 
class TreeJCodeGen extends TreeVisitor < RuntimeException > { public void test ( ) { { <nl> visit ( ) ; <nl> closure ( _sb ) ; <nl> _sb . p ( _csb ) ; <nl> - System . err . print ( _csb . toString ( ) ) ; <nl> } <nl> } <nl>   } 
public class ArgumentsMarshalTest extends TestCase { <nl> TestLibrary lib ; <nl> protected void setUp ( ) { <nl> - System . out . println ( getName ( ) ) ; <nl> lib = ( TestLibrary ) Native . loadLibrary ( " testlib " , TestLibrary . class ) ; <nl> } <nl>   } 
public class GCMIntentService extends GCMBaseIntentService { <nl> private UserActivityDao userActivityDao ; <nl> public GCMIntentService ( ) { <nl> - super ( ) ; <nl> + super ( SENDER_ID ) ; <nl> DependencyInjectionService . getInstance ( ) . inject ( this ) ; <nl> } <nl>   } 
public class SeriesGuideApplication extends Application { public void test ( ) { <nl> <nl> ImageCache . getInstance ( getApplicationContext ( ) ) ; <nl> - <nl> Utils . runNotificationService ( this ) ; <nl> } <nl>   } 
public class ErrorBar extends JPanel { <nl> <nl> protected void done ( ) { <nl> - int bigCount = 0 ; <nl> int totalLines = 0 ; <nl> int currentTab = 0 ; <nl> for ( SketchCode sc : editor . getSketch ( ) . getCode ( ) ) { <nl>   } } } 
package com . intellij . codeInsight . daemon ; <nl> <nl> <nl> <nl> <nl> public abstract class LineMarkerProviderDescriptor extends GutterIconDescriptor implements LineMarkerProvider { public void test ( ) { <nl> } <nl>   } 
public class OrchidSocketImpl extends SocketImpl { <nl> <nl> public void setOption ( int optID , Object value ) throws SocketException { <nl> - throw new UnsupportedOperationException ( ) ; <nl> + <nl> } <nl> public Object getOption ( int optID ) throws SocketException { <nl>   } } 
public class QuartzEndpoint extends DefaultEndpoint { <nl> <nl> public boolean isSingleton ( ) { <nl> - return false ; <nl> + return true ; <nl> } <nl> <nl>   } 
public class Tmp { public interface ClientDiscoveryHandler { <nl> } <nl> <nl> - public void onDiscoveredHost ( DatagramPacket packet , Kryo kryo ) { <nl> + public void onDiscoveredHost ( DatagramPacket datagramPacket , Kryo kryo ) { { <nl> <nl> } <nl>   } } } 
import com . zaxxer . hikari . util . UtilityElf ; <nl> public class ConnectionStateTest <nl> { <nl> - <nl> + <nl> public void testAutoCommit ( ) throws SQLException <nl> { <nl> try ( HikariDataSource ds = new HikariDataSource ( ) ) { <nl>   } } } 
public class HttpLocationFactory <nl> <nl> <nl> - <nl> { public URI createQueryLocation ( QueryId queryId ) <nl> { <nl> Preconditions . checkNotNull ( queryId , " queryId is null " ) ; <nl>   } } 
class Slurper implements Runnable { <nl> private DBCursor processFullOplog ( ) throws InterruptedException , SlurperException { <nl> Timestamp < ? > currentTimestamp = getCurrentOplogTimestamp ( ) ; <nl> - addInsertToStream ( currentTimestamp , null ) ; <nl> return oplogCursor ( currentTimestamp ) ; <nl> } <nl>   } 
public class InternalOsmAndAPIImpl implements InternalOsmAndAPI { <nl> <nl> public TargetPointsHelper getTargetPointsHelper ( ) { <nl> - <nl> - return null ; <nl> + return app . getTargetPointsHelper ( ) ; <nl> } <nl> <nl>   } 
import java . util . Vector ; <nl> <nl> <nl> public class PortalInitableUtil { <nl> + <nl> public synchronized static void init ( PortalInitable initable ) { <nl> if ( _initables == null ) { <nl> initable . portalInit ( ) ; <nl>   } } } 
class CatalogExpander extends NetworkItemsLoader { public void test ( ) { { { <nl> if ( myAuthenticator != null ) { <nl> myAuthenticator . run ( f . URL ) ; <nl> } <nl> - System . err . println ( " AUTH URI XX = " + f . URL ) ; <nl> } <nl> } <nl> } <nl>   } 
package com . mongodb ; <nl> - public class MongoException extends Exception { <nl> + public class MongoException extends RuntimeException { <nl> } public MongoException ( String msg ) { <nl> super ( msg ) ; <nl>   } } 
class InstanceInfoReplicator implements Runnable { <nl> <nl> public void stop ( ) { <nl> - scheduler . shutdown ( ) ; <nl> + scheduler . shutdownNow ( ) ; <nl> started . set ( false ) ; <nl> } <nl>   } 
package com . jwetherell . algorithms . sequence ; <nl> public class SubsequenceCounter { <nl> + <nl> private static char [ ] seq = null ; <nl> private static char [ ] subseq = null ; <nl> private static int [ ] [ ] tbl = null ; <nl>   } 
public class PortletConfigurationPortlet extends StrutsPortlet { <nl> <nl> } <nl> - class ConfigurationPortletPortletConfig extends PortletConfigImpl { <nl> + private class ConfigurationPortletPortletConfig extends PortletConfigImpl { <nl> ConfigurationPortletPortletConfig ( <nl> PortletConfigImpl wrappedPortletConfig ) { <nl>   } } } 
public class PythonUtil { public void test ( ) { { { <nl> allComponents . addNativeLibraries ( <nl> Paths . get ( ent . getKey ( ) ) , <nl> ent . getValue ( ) , <nl> - params . getBuildTarget ( ) ) ; <nl> + nativeLinkable . getBuildTarget ( ) ) ; <nl> } <nl> } <nl> } <nl>   } 
public class Tmp { public void test ( ) { <nl> + <nl> <nl> <nl> <nl>   } } 
public class CompilerOptions implements Serializable { <nl> <nl> public static LanguageMode fromString ( String value ) { <nl> + if ( value == null ) { <nl> + return null ; <nl> + } <nl> switch ( value ) { <nl> case " ECMASCRIPT6_STRICT " : <nl> case " ES6_STRICT " : <nl>   } } } 
public class SQLExprParser extends SQLParser { public void test ( ) { <nl> SQLExpr notTarget = expr ( ) ; <nl> accept ( Token . RPAREN ) ; <nl> - notTarget = exprRest ( notTarget ) ; <nl> sqlExpr = new SQLNotExpr ( notTarget ) ; <nl>   } } 
public class K2JvmCliTest extends CliBaseTest { <nl> public void script ( ) throws Exception { <nl> executeCompilerCompareOutputJVM ( ) ; <nl> } <nl> + <nl> + <nl> + public void classpath ( ) throws Exception { <nl> + executeCompilerCompareOutputJVM ( ) ; <nl> + } <nl> } <nl>   
public class LocalTachyonClusterResource implements TestRule { public void test ( ) { <nl> mConfParams = confParams ; <nl> } <nl> - <nl> <nl> <nl> <nl>   } 
public final class UiAutomation { public void test ( ) { <nl> canvas . translate ( - screenshotWidth / 2 , - screenshotHeight / 2 ) ; <nl> canvas . drawBitmap ( screenShot , 0 , 0 , null ) ; <nl> canvas . setBitmap ( null ) ; <nl> + screenShot . recycle ( ) ; <nl> screenShot = unrotatedScreenShot ; <nl> } <nl>   } 
public class TxLog <nl> <nl> { public void close ( ) throws IOException <nl> { { <nl> + logBuffer . force ( ) ; <nl> logBuffer . getFileChannel ( ) . close ( ) ; <nl> } <nl>   } } 
public class Tmp { public void test ( ) { <nl> <nl> <nl> <nl> <nl> <nl>   } } 
package android . animation ; <nl> import java . util . ArrayList ; <nl> import java . util . Collection ; <nl> import java . util . HashMap ; <nl> - import java . util . Iterator ; <nl> import java . util . List ; <nl> <nl>   
public class MetaHistoryServiceImpl <nl> { public void test ( ) { <nl> synchronized ( progressListeners ) <nl> { <nl> - progressListeners . add ( listener ) ; <nl> + if ( ! progressListeners . contains ( listener ) ) <nl> + progressListeners . add ( listener ) ; <nl> } <nl> } <nl>   } 
import java . util . Map ; <nl> public class MapSizeRequest extends MapAllPartitionsClientRequest implements Portable , RetryableRequest , SecureRequest { <nl> - private String name ; <nl> - <nl> public MapSizeRequest ( ) { <nl> } <nl>   } 
public class HeadlessMaterial extends BaseMaterial { <nl> <nl> public void reload ( MaterialData newData ) { <nl> - this . data = data ; <nl> + this . data = newData ; <nl> } <nl> <nl>   } 
import android . test . suitebuilder . annotation . LargeTest ; <nl> import java . io . File ; <nl> - public class SQLiteGeneralTest extends AndroidTestCase { <nl> + public class SQLiteStatementTest extends AndroidTestCase { <nl> private SQLiteDatabase mDatabase ; <nl> private File mDatabaseFile ; <nl>   } } 
public class HttpRequest { <nl> <nl> public static class HttpRequestException extends RuntimeException { <nl> - <nl> private static final long serialVersionUID = - 1170466989781746231L ; <nl> <nl>   } } 
public class TestSelectorOptions { <nl> <nl> public String getDefaultMetaVariable ( ) { { { <nl> - return " LIST < TEST - SELECTORS > " ; <nl> + return " TEST - SELECTOR " ; <nl> } <nl> } <nl> } <nl>   } 
public final class UndertowSession implements Session { <nl> <nl> public String getNegotiatedSubprotocol ( ) { <nl> - return null ; <nl> + return " " ; <nl> } <nl> <nl>   } 
public class BubbleView extends FrameLayout { <nl> <nl> protected void loadFavicon ( ) { <nl> + mThemeColor = null ; <nl> maybeCancelFaviconLoad ( ) ; <nl> final int tabFaviconSize = getResources ( ) . getDimensionPixelSize ( R . dimen . browser_toolbar_favicon_size ) ; <nl>   } } 
public class SourceCodeTraversal extends TraversalHelper { public void test ( ) { { { { <nl> break ; <nl> } <nl> } <nl> + acceptSiblings ( currentNode , followSiblings ) ; <nl> } <nl> } <nl>   } 
public class TileBuilder extends TileAbstractBuilder implements IMachine { public void test ( ) { <nl> updateRequirements ( ) ; <nl> + sendNetworkUpdate ( ) ; <nl> + <nl> return ; <nl> } <nl>   } 
public class IdeSettingsDialog extends DialogWrapper implements DataProvider { public void test ( ) { { { <nl> myEditor . apply ( ) ; <nl> myEditor . revalidate ( ) ; <nl> myEditor . repaint ( ) ; <nl> + updateStatus ( ) ; <nl> } <nl> } <nl> } <nl>   } 
public class ZenFooter extends LinearLayout { <nl> public void onConfigurationChanged ( ) { { <nl> mSpTexts . update ( ) ; <nl> + Util . setText ( mEndNowButton , mContext . getString ( R . string . volume_zen_end_now ) ) ; <nl> } <nl> } <nl>   } 
public class Tmp { public ISeq rest ( ) { <nl> } public int count ( ) { { <nl> if ( oa != null ) <nl> - return oa . length ; <nl> + return oa . length - i ; <nl> return Array . getLength ( array ) - i ; <nl> } <nl>   } } 
class AccessibilityInjectorFallback { public void test ( ) { { <nl> event . setFromIndex ( 0 ) ; <nl> event . setToIndex ( selection . length ( ) ) ; <nl> sendAccessibilityEvent ( event ) ; <nl> - event . recycle ( ) ; <nl> } <nl> } <nl>   } 
public class PhoneWindowManager implements WindowManagerPolicy { public void test ( ) { { { <nl> msg . setAsynchronous ( true ) ; <nl> msg . sendToTarget ( ) ; <nl> } <nl> + break ; <nl> } <nl> } <nl>   } 
public class ViewOverlay { <nl> public void clear ( ) { <nl> removeAllViews ( ) ; <nl> if ( mDrawables != null ) { <nl> + for ( Drawable drawable : mDrawables ) { <nl> + drawable . setCallback ( null ) ; <nl> + } <nl> mDrawables . clear ( ) ; <nl> } <nl> } <nl>   } 
public class GridSearch extends Job { public void test ( ) { <nl> } <nl> void updateErrors ( ArrayList < JobInfo > infos ) { <nl> + if ( jobs == null ) return ; <nl> errors = new double [ jobs . length ] ; <nl> int i = 0 ; <nl> for ( Job job : jobs ) { <nl>   } } } 
public class ViaInstruction extends Instruction <nl> { public int getViaCount ( ) <nl> { { <nl> + if ( viaPosition < 0 ) <nl> + throw new IllegalStateException ( " Uninitialized via count in instruction " + getName ( ) ) ; <nl> + <nl> return viaPosition ; <nl> } <nl>   } } 
public abstract class MediaBrowserService extends Service { <nl> <nl> <nl> <nl> <nl> <nl> public class Result < T > { <nl> private Object mDebug ; <nl>   } } 
public class WifiConfiguration implements Parcelable { <nl> <nl> <nl> public boolean isValid ( ) { <nl> - if ( SSID == null ) <nl> - return false ; <nl> if ( allowedKeyManagement == null ) <nl> return false ; <nl>   } } 
public class BuildoutConfigurable implements Configurable , NonDefaultProjectConf <nl> <nl> <nl> { public String getDisplayName ( ) { { <nl> - return " Buildout Support " ; <nl> + return " Buildout " ; <nl> } <nl> <nl>   } } 
public class MainActivity extends ReactActivity { <nl> <nl> protected List < ReactPackage > getPackages ( ) { <nl> return Arrays . < ReactPackage > asList ( <nl> - new MainReactPackage ( ) ) ; <nl> + new MainReactPackage ( ) <nl> + ) ; <nl> } <nl> } <nl>   
public abstract class BaseDownloadTask { <nl> <nl> <nl> public boolean isRunning ( ) { <nl> + <nl> if ( ! isUsing ( ) ) { <nl> return false ; <nl> } <nl>   } } 
public class PortletDisplayTemplateImpl implements PortletDisplayTemplate { <nl> <nl> private static final Transformer _transformer = new Transformer ( <nl> - PropsKeys . DYNAMIC_DATA_LISTS_ERROR_TEMPLATE , true ) ; <nl> + PropsKeys . PORTLET_DISPLAY_TEMPLATES_ERROR , true ) ; <nl> } <nl>   
public final class AlluxioLineage extends AbstractLineageClient { <nl> <nl> <nl> <nl> <nl> <nl> public static synchronized AlluxioLineage get ( LineageContext context ) { <nl>   } } 
public class DistTest <nl> <nl> <nl> + <nl> { public void testLikeDistro_SetupDemoBase ( ) throws Exception <nl> { <nl> File basePath = testdir . getEmptyDir ( ) ; <nl>   } } 
public class Poller extends PollerBase implements Runnable <nl> { public void start ( ) <nl> { { <nl> worker = new Thread ( this , name ) ; <nl> + worker . setDaemon ( true ) ; <nl> worker . start ( ) ; <nl> } <nl>   } } 
public class OperationDialog extends JDialog { public void test ( ) { <nl> contentPane . add ( makeButtonPanel ( ) , BorderLayout . SOUTH ) ; <nl> pack ( ) ; <nl> + setResizable ( false ) ; <nl> } <nl> <nl>   } 
public class TemplateContextHelper { public void test ( ) { <nl> try { <nl> variables . put ( <nl> - " saxReaderUtil " , <nl> + " saxReader " , <nl> utilLocator . findUtil ( SAXReaderUtil . class . getName ( ) ) ) ; <nl> } <nl> catch ( SecurityException se ) { <nl>   } } } 
public class ServerTestCase { public void test ( ) { { <nl> if ( server != null ) <nl> server . stop ( ) ; <nl> } <nl> - <nl> - <nl> } <nl>   } 
public class PhotoView extends ImageView implements IPhotoView { <nl> <nl> public Matrix getDisplayMatrix ( ) { <nl> - return mAttacher . getDrawMatrix ( ) ; <nl> + return mAttacher . getDisplayMatrix ( ) ; <nl> } <nl> <nl>   } 
public class DiagnosticGroups { public void test ( ) { <nl> DiagnosticGroups . registerGroup ( " invalidProvide " , <nl> ProcessClosurePrimitives . INVALID_PROVIDE_ERROR ) ; <nl> + DiagnosticGroups . registerGroup ( " lateProvide " , <nl> + ProcessClosurePrimitives . LATE_PROVIDE_ERROR ) ; <nl> + <nl> DiagnosticGroups . registerGroup ( " es6Typed " , <nl> RhinoErrorReporter . MISPLACED_TYPE_SYNTAX ) ; <nl> } <nl>   } 
public class Tmp { public interface ExecHandle { <nl> <nl> ExecHandle start ( ) ; <nl> + ExecHandleState getState ( ) ; <nl> + <nl> void abort ( ) ; <nl> ExecResult waitForFinish ( ) ; <nl>   } } 
public class WorldSpecificSaveHandler implements ISaveHandler <nl> <nl> { public File getMapFileFromName ( String name ) <nl> { { { <nl> - System . out . println ( new File ( dataDir , name + " . dat " ) ) ; <nl> return new File ( dataDir , name + " . dat " ) ; <nl> } <nl> } <nl>   } } 
public class Tmp { public enum TreeType { <nl> <nl> SMALL_JUNGLE , <nl> <nl> <nl> <nl> + COCOA_TREE , <nl> + <nl> <nl> <nl> JUNGLE_BUSH , <nl>   } } 
public class CommonShortcuts { <nl> <nl> public static ShortcutSet getMoveEnd ( ) { <nl> - return shortcutsById ( IdeActions . ACTION_EDITOR_MOVE_LINE_START ) ; <nl> + return shortcutsById ( IdeActions . ACTION_EDITOR_MOVE_LINE_END ) ; <nl> } <nl> public static ShortcutSet getRecentFiles ( ) { <nl>   } } 
public class MockFSDirectoryService extends FsDirectoryService { <nl> <nl> public Directory [ ] build ( ) throws IOException { <nl> - return helper . wrapAllInplace ( delegateService . build ( ) ) ; <nl> + return delegateService . build ( ) ; <nl> } <nl> <nl>   } 
public class TileLaser extends TileBuildCraft implements IPowerReceptor { <nl> <nl> protected void findTable ( ) { <nl> - System . out . println ( " SEARCH " ) ; <nl> int meta = worldObj . getBlockMetadata ( xCoord , yCoord , zCoord ) ; <nl> int minX = xCoord - 5 ; <nl>   } } 
public class Astroboy2Test { <nl> <nl> public void teardown ( ) { <nl> + <nl> RoboGuice . destroyInjector ( Robolectric . application ) ; <nl> } <nl>   } 
public class ShadowLocation { <nl> public void __constructor__ ( String provider ) { <nl> this . provider = provider ; <nl> + time = System . currentTimeMillis ( ) ; <nl> } <nl> <nl>   } 
class ItemLoader { <nl> <nl> public void run ( ) { <nl> + Process . setThreadPriority ( Process . THREAD_PRIORITY_BACKGROUND ) ; <nl> + <nl> if ( itemViewReused ( mRequest ) ) { <nl> return ; <nl> } <nl>   } } 
public class JmfMediaManager extends JingleMediaManager { <nl> <nl> public JmfMediaManager ( ) { <nl> setupPayloads ( ) ; <nl> - setupJMF ( ) ; <nl> } <nl> <nl>   } 
import de . danielnaber . languagetool . rules . RuleMatch ; <nl> <nl> <nl> <nl> - public class Main { <nl> + class Main { <nl> private final static int CONTEXT_SIZE = 25 ; <nl>   } } 
package mypackage ; <nl> import java . io . IOException ; <nl> import java . io . PrintWriter ; <nl> - import java . util . Enumeration ; <nl> import javax . servlet . ServletException ; <nl> import javax . servlet . http . HttpServlet ; <nl>   
public class Tmp { public interface DSLContext extends Scope , AutoCloseable { <nl> + <nl> + <nl> + <nl> <nl> <nl> <nl>   } } 
public class DescriptorResolver { <nl> <nl> public static ConstructorDescriptorImpl createPrimaryConstructorForObject ( <nl> - PsiElement object , <nl> + PsiElement object , <nl> ClassDescriptor classDescriptor , <nl> BindingTrace trace <nl> ) { <nl>   } } 
public class PluginManagerMain { <nl> public void filter ( ) { <nl> if ( installedPluginTable . isShowing ( ) ) { <nl> filter ( installedPluginsModel , myFilteredInstalled ) ; <nl> + installedPluginsModel . modifyData ( pluginsList ) ; <nl> } <nl> else { <nl> filter ( availablePluginsModel , myFilteredAvailable ) ; <nl>   } } } 
public class PhotoViewerActivity extends SherlockFragmentActivity implements OnP <nl> <nl> { public void onPhotoLoadStatusChanged ( boolean finished ) { <nl> - setProgressBarIndeterminateVisibility ( ! finished ) ; <nl> + <nl> } <nl> public void onPlacePicked ( Place place ) { <nl>   } } 
public class PhoneWindow extends Window implements MenuBuilder . Callback { public void test ( ) { <nl> if ( cb == null ) { <nl> return false ; <nl> } else { <nl> + sendCloseSystemWindows ( ) ; <nl> return cb . onSearchRequested ( ) ; <nl> } <nl> } <nl>   } 
public class CordovaActivity extends Activity { <nl> protected void onSaveInstanceState ( Bundle outState ) <nl> { <nl> - super . onSaveInstanceState ( outState ) ; <nl> cordovaInterface . onSaveInstanceState ( outState ) ; <nl> + super . onSaveInstanceState ( outState ) ; <nl> } <nl> <nl>   } 
public class SvnVersionFilterComponent extends StandardVersionFilterComponent { <nl> protected void installCheckBoxListener ( final ActionListener filterListener ) { <nl> super . installCheckBoxListener ( filterListener ) ; <nl> + myUseAuthorFilter . addActionListener ( filterListener ) ; <nl> myAuthorField . addActionListener ( filterListener ) ; <nl> } <nl>   } 
class PreferenceInflater { public void test ( ) { <nl> for ( final String prefix : prefixes ) { <nl> try { <nl> clazz = classLoader . loadClass ( prefix + name ) ; <nl> + break ; <nl> } catch ( final ClassNotFoundException e ) { <nl> notFoundException = e ; <nl> } <nl>   } } } 
public class LibraryLoadTest extends TestCase { <nl> <nl> public void testLoadAWTAfterJNA ( ) { <nl> + if ( GraphicsEnvironment . isHeadless ( ) ) return ; <nl> + <nl> if ( Pointer . SIZE > 0 ) { <nl> Toolkit . getDefaultToolkit ( ) ; <nl> } <nl>   } } 
public class MarkupBuilder extends BuilderSupport { <nl> <nl> <nl> <nl> - public Object getMkp ( ) { <nl> + } public MarkupBuilderHelper getMkp ( ) { <nl> return new MarkupBuilderHelper ( this ) ; <nl> } <nl>   } 
public class S3Client { public void test ( ) { { { <nl> } <nl> } <nl> + <nl> + <nl> + <nl> } <nl>   } 
public abstract class AbstractBaseTest { <nl> protected Configuration configuration = Connections . getConfiguration ( ) ; <nl> - protected SQLTemplates templates = configuration . getTemplates ( ) ; <nl> - <nl> <nl> protected String expectedQuery ; <nl>   } 
import java . util . Properties ; <nl> <nl> <nl> <nl> + <nl> public class ExternalResources { <nl> private ExternalResources ( ) { <nl>   } } 
public class CommandFailureException extends MongoException { <nl> <nl> <nl> <nl> <nl> <nl> + <nl> public CommandResult getCommandResult ( ) { <nl> return commandResult ; <nl> } <nl>   } 
public final class MeasureKey { <nl> <nl> <nl> - public Developer getDevelope ( ) { <nl> + } public Developer getDeveloper ( ) { <nl> return developer ; <nl> } <nl>   } 
import sun . misc . URLClassPath ; <nl> <nl> <nl> <nl> - public class QuasarURLClassLoaderHelper { <nl> + public final class QuasarURLClassLoaderHelper { <nl> private final URLClassLoader cl ; <nl> private final QuasarInstrumentor instrumentor ; <nl>   } } 
class TiffUtil { <nl> public static int getAutoRotateAngleFromOrientation ( int orientation ) { <nl> switch ( orientation ) { <nl> case ExifInterface . ORIENTATION_NORMAL : <nl> + case ExifInterface . ORIENTATION_UNDEFINED : <nl> return 0 ; <nl> case ExifInterface . ORIENTATION_ROTATE_180 : <nl> return 180 ; <nl>   } } } 
public class TrainParser { public void test ( ) { { { { <nl> state = transition . apply ( state ) ; <nl> } <nl> } <nl> - <nl> - System . err . println ( transitionIndex ) ; <nl> - <nl> } <nl> } <nl>   } 
public class BasicBSONObject extends LinkedHashMap < String , Object > implements BSO <nl> <nl> <nl> <nl> + <nl> { public boolean containsKey ( String key ) { { <nl> return containsField ( key ) ; <nl> } <nl>   } } 
public class ClientSession extends Session { <nl> public void packetReceived ( Packet packet ) { <nl> packet . setFrom ( getAddress ( ) ) ; <nl> } <nl> + <nl> + public String toString ( ) { <nl> + return super . toString ( ) + " presence : " + presence ; <nl> + } <nl> } <nl>   
public abstract class StoreBase <nl> { public void processExpires ( ) { <nl> String [ ] keys = null ; <nl> - if ( ! started ) { <nl> + if ( ! started ) { <nl> return ; <nl> } <nl>   } } } 
public class Tmp { public enum SQLDialect { <nl> + <nl> + <nl> + <nl> + <nl> + <nl> + <nl> + <nl> ; <nl> private static final SQLDialect [ ] FAMILIES ; <nl>   } } 
public class MockitoTest extends TestBase { public void test ( ) { <nl> <nl> <nl> + <nl> } <nl>   } 
public class DebugProcessEvents extends DebugProcessImpl { public void test ( ) { { { { { <nl> return ; <nl> } <nl> } <nl> + ( ( SuspendManagerImpl ) getSuspendManager ( ) ) . popContext ( context ) ; <nl> } <nl> } <nl> } <nl>   } 
public class WsSession implements Session { public void test ( ) { { { { <nl> } <nl> } <nl> } <nl> - <nl> - <nl> } <nl>   } 
import java . text . ParseException ; <nl> import java . util . ArrayList ; <nl> import java . util . Date ; <nl> import java . util . List ; <nl> - import java . util . Locale ; <nl> import org . joda . time . DateTime ; <nl> import org . joda . time . DateTimeConstants ; <nl>   
public class EmojiconTextView extends TextView { <nl> <nl> public void setEmojiconSize ( int pixels ) { <nl> mEmojiconSize = pixels ; <nl> + <nl> + super . setText ( getText ( ) ) ; <nl> } <nl> <nl>   } 
abstract public class GraphView extends LinearLayout { public void test ( ) { <nl> setLayoutParams ( new LayoutParams ( LayoutParams . FILL_PARENT , LayoutParams . FILL_PARENT ) ) ; <nl> if ( title == null ) <nl> - title = " " ; <nl> + this . title = " " ; <nl> else <nl> this . title = title ; <nl>   } } 
public class TermSettings { <nl> private String mShell ; <nl> private String mInitialCommand ; <nl> private boolean mUTF8ByDefault = false ; <nl> - private int mBackKeyAction = BACK_KEY_SENDS_ESC ; <nl> + private int mBackKeyAction = BACK_KEY_STOPS_SERVICE ; <nl> private String mTermType ; <nl> private boolean mCloseOnExit = true ; <nl>   } 
import java . util . regex . Pattern ; <nl> <nl> <nl> <nl> <nl> <nl> <nl> public class DefaultGroovyMethods { public void test ( ) { <nl>   } } 
public class RouterImpl implements Router { <nl> <nl> public List < Route > getRoutes ( ) { <nl> - return _routes ; <nl> + return new ArrayList < > ( _routes ) ; <nl> } <nl> <nl>   } 
public class PyStringLiteralFileReferenceSet extends RootFileReferenceSet { <nl> <nl> protected void reparse ( ) { <nl> + <nl> if ( myStringLiteralExpression != null ) { <nl> MyTextRangeConsumer textRangeConsumer = new MyTextRangeConsumer ( this ) ; <nl>   } } } 
import java . util . List ; <nl> import java . util . Random ; <nl> import android . content . Context ; <nl> - import android . os . Binder ; <nl> import android . os . Build ; <nl> import android . os . Process ; <nl> import android . util . Log ; <nl>   
public class Client implements Runnable { public void test ( ) { { <nl> } <nl> if ( isDisposeRegistered ) { <nl> parent . unregisterMethod ( " dispose " , this ) ; <nl> + isDisposeRegistered = false ; <nl> } <nl> dispose ( ) ; <nl> } <nl>   } 
import java . io . IOException ; <nl> <nl> <nl> <nl> <nl> <nl> public class AssetBundleEntryInfo implements Struct { public void test ( ) { <nl>   } } 
public class GPXUtilities { public void test ( ) { <nl> double totalSpeedSum = 0 ; <nl> points = 0 ; <nl> - double channelThres = 5 ; <nl> + double channelThres = 10 ; <nl> double channelBase ; <nl> double channelTop ; <nl> double channelBottom ; <nl>   } } 
public abstract class GoStubbedElementImpl < T extends StubBase < ? > > extends StubBa <nl> <nl> { public String toString ( ) { { <nl> - return getNode ( ) . getElementType ( ) . toString ( ) ; <nl> + return getElementType ( ) . toString ( ) ; <nl> } <nl> <nl>   } } 
import alluxio . client . WriteType ; <nl> import alluxio . shell . AbstractAlluxioShellTest ; <nl> import org . junit . Assert ; <nl> + import org . junit . Ignore ; <nl> import org . junit . Test ; <nl> <nl>   
public class ExpandedActivity extends Activity { public void test ( ) { <nl> if ( Constant . EXPANDED_ACTIVITY_DEBUG ) { <nl> rootView . setBackgroundColor ( 0x5500ff00 ) ; <nl> + } else { <nl> + rootView . setWillNotDraw ( true ) ; <nl> } <nl> initHotwordService ( ) ; <nl>   } } 
package tachyon . util . io ; <nl> - import java . io . File ; <nl> import java . io . FileOutputStream ; <nl> import java . io . IOException ; <nl> import java . nio . ByteBuffer ; <nl>   
public class ModifyKeyboardShortcutsWidget extends ModalDialogBase <nl> <nl> { public Object getKey ( CommandBinding item ) <nl> { { { <nl> - return item . getName ( ) ; <nl> + return item . hashCode ( ) ; <nl> } <nl> } ; <nl>   } } 
class PowerManagerService extends IPowerManager . Stub <nl> { public void enableUserActivity ( boolean enabled ) { { <nl> synchronized ( mLocks ) { <nl> mUserActivityAllowed = enabled ; <nl> - mLastEventTime = SystemClock . uptimeMillis ( ) ; <nl> } <nl> } <nl>   } } 
public class YAxis extends AxisBase { <nl> <nl> <nl> public void setGranularityEnabled ( boolean enabled ) { <nl> - mGranularityEnabled = true ; <nl> + mGranularityEnabled = enabled ; <nl> } <nl> <nl>   } 
final class Log4JLogger extends Logger { <nl> <nl> <nl> public void error ( String message , Throwable th ) { { <nl> - error ( message , th ) ; <nl> + LOGGER . error ( message , th ) ; <nl> } <nl> } <nl>   } 
public class NativeLibraryHelper { <nl> <nl> public static boolean removeNativeBinariesLI ( String nativeLibraryPath ) { <nl> + if ( nativeLibraryPath == null ) return false ; <nl> return removeNativeBinariesFromDirLI ( new File ( nativeLibraryPath ) ) ; <nl> } <nl>   } 
import android . widget . FrameLayout ; <nl> import android . widget . ImageView ; <nl> import android . widget . LinearLayout ; <nl> import android . widget . PopupWindow ; <nl> + import android . widget . ScrollView ; <nl> import android . widget . TextView ; <nl> <nl>   
import java . util . concurrent . ConcurrentHashMap ; <nl> import java . util . concurrent . atomic . AtomicInteger ; <nl> - public class Var implements IFn { <nl> + public final class Var implements IFn { <nl> static class Frame { <nl> <nl>   } } } 
import voldemort . utils . Time ; <nl> public class KeyedResourcePoolTest { <nl> protected static int POOL_SIZE = 5 ; <nl> - protected static long TIMEOUT_MS = 100 ; <nl> + protected static long TIMEOUT_MS = 200 ; <nl> protected TestResourceFactory factory ; <nl> protected KeyedResourcePool < String , TestResource > pool ; <nl>   } 
public class GroupLocalServiceImpl extends GroupLocalServiceBaseImpl { public void test ( ) { <nl> <nl> + exportImportConfigurationLocalService . <nl> + deleteGroupExportImportConfigurations ( group . getGroupId ( ) ) ; <nl> + <nl> unscheduleStaging ( group ) ; <nl> if ( group . hasStagingGroup ( ) ) { <nl>   } } } 
public class FileConsumerCustomExceptionHandlerTest extends ContextTestSupport { public void test ( ) { { { <nl> } <nl> } ; <nl> } <nl> - <nl> + <nl> <nl> <nl>   } 
public class WordPress extends Application { <nl> <nl> public void onActivityCreated ( Activity activity , Bundle arg1 ) { <nl> + <nl> WPActivityUtils . applyLocale ( activity ) ; <nl> } <nl>   } 
public class SubtasksListFragment extends TaskListFragment { <nl> <nl> protected void refresh ( ) { <nl> + initializeTaskListMetadata ( ) ; <nl> setUpTaskList ( ) ; <nl> } <nl>   } 
public class IndexRangesMigrationPeriodical extends Periodical { <nl> <nl> public boolean isDaemon ( ) { <nl> - return false ; <nl> + return true ; <nl> } <nl> <nl>   } 
public class SimpleAppServer extends AbstractAppServer <nl> <nl> { public String getDescription ( ) <nl> { { { { <nl> - return " Built - in command . Exits the client " ; <nl> + return " Exits the client " ; <nl> } <nl> } <nl> } <nl>   } } 
public class AtmosphereFramework { <nl> <nl> public void objectFactory ( AtmosphereObjectFactory objectFactory ) { <nl> this . objectFactory = objectFactory ; <nl> + this . objectFactory . configure ( config ) ; <nl> } <nl> <nl>   } 
public class GitMergeUtil { public void test ( ) { <nl> for ( String fileName : unmergedNames ) { <nl> VirtualFile f = lfs . findFileByPath ( fileName ) ; <nl> if ( f != null ) { <nl> + f . refresh ( false , false ) ; <nl> unmerged . add ( f ) ; <nl> } <nl> } <nl>   } } 
public class ResourceLinkFactory <nl> <nl> <nl> { public static void setGlobalContext ( Context newGlobalContext ) { { <nl> - if ( globalContext != null ) <nl> - return ; <nl> globalContext = newGlobalContext ; <nl> } <nl>   } } 
public class DBObjectCodec implements CollectibleCodec < DBObject > { <nl> private final CodecRegistry codecRegistry ; <nl> private final BsonTypeClassMap bsonTypeClassMap ; <nl> - private final DB db ; <nl> private final DBObjectFactory objectFactory ; <nl> private final IdGenerator idGenerator = new ObjectIdGenerator ( ) ; <nl>   } 
public class Leg { <nl> <nl> <nl> <nl> - public boolean interlineWithPreviousLeg = false ; <nl> + public Boolean interlineWithPreviousLeg ; <nl> <nl>   } 
package voldemort . server . protocol . admin ; <nl> <nl> <nl> public class AsyncOperationStatus { <nl> - private String status ; <nl> + private String status = " initializing " ; <nl> private boolean complete = false ; <nl> private final int id ; <nl>   } 
public class CameraPreview extends SurfaceView implements SurfaceHolder . Callback <nl> <nl> { public void surfaceCreated ( SurfaceHolder surfaceHolder ) { { <nl> mSurfaceCreated = true ; <nl> - showCameraPreview ( ) ; <nl> } <nl> <nl>   } } 
public class TridentKafkaState implements State { public void test ( ) { { { { { <nl> } <nl> } <nl> } <nl> - } <nl> } <nl>   } 
public final class ServerImpl extends Server { public void test ( ) { <nl> if ( shutdown ) { <nl> return this ; <nl> } <nl> - transportServer . shutdown ( ) ; <nl> shutdown = true ; <nl> + transportServer . shutdown ( ) ; <nl> timeoutService . shutdown ( ) ; <nl> return this ; <nl> } <nl>   } 
public class ClassFilterEditor extends JPanel implements ComponentWithEmptyText <nl> { public void removeRow ( final int idx ) { { { <nl> myFilters . remove ( idx ) ; <nl> - fireTableDataChanged ( ) ; <nl> + fireTableRowsDeleted ( idx , idx ) ; <nl> } <nl> } <nl>   } } 
public class CompilerOptions implements Serializable , Cloneable { <nl> <nl> <nl> <nl> <nl> private LanguageMode languageOut ; <nl>   } 
final class ZLOwnXMLParser { public void test ( ) { <nl> while ( true ) { <nl> int count = streamReader . read ( buffer ) ; <nl> if ( count <= 0 ) { <nl> + streamReader . close ( ) ; <nl> return ; <nl> } <nl> if ( count < buffer . length ) { <nl>   } } } } 
public final class MediaBrowserCompat { <nl> <nl> <nl> <nl> - public static class SubscriptionCallbackApi21 extends SubscriptionCallback { <nl> + static class SubscriptionCallbackApi21 extends SubscriptionCallback { <nl> SubscriptionCallback mSubscriptionCallback ; <nl> private final Object mSubscriptionCallbackObj ; <nl> private Bundle mOptions ; <nl>   } } } 
public class DefaultBroadcaster implements Broadcaster { <nl> <nl> protected void entryDone ( final BroadcasterFuture < ? > f ) { <nl> - notifyBroadcastListener ( ) ; <nl> if ( f != null ) f . done ( ) ; <nl> } <nl>   } 
public abstract class FilteredSearchContext extends SearchContext { <nl> <nl> public void accessed ( long accessTime ) { <nl> - accessed ( accessTime ) ; <nl> + in . accessed ( accessTime ) ; <nl> } <nl> <nl>   } 
public class RedisClient extends DB { public void test ( ) { <nl> String password = props . getProperty ( PASSWORD_PROPERTY ) ; <nl> if ( password != null ) { <nl> jedis . auth ( password ) ; <nl> - jedis . flushAll ( ) ; <nl> } <nl> } <nl>   } 
public class SchedulingPolicyService extends ISchedulingPolicyService . Stub { <nl> <nl> private static final int PRIORITY_MIN = 1 ; <nl> - private static final int PRIORITY_MAX = 2 ; <nl> + private static final int PRIORITY_MAX = 3 ; <nl> public SchedulingPolicyService ( ) { <nl> } <nl>   } 
public class OpenIDAuthenticationProcessingFilter extends AbstractProcessingFilt <nl> <nl> { public int getOrder ( ) { { { <nl> - return FilterChainOrder . AUTHENTICATION_PROCESSING_FILTER ; <nl> + return FilterChainOrder . OPENID_PROCESSING_FILTER ; <nl> } <nl> } <nl>   } } 
class TelephonyRegistry extends ITelephonyRegistry . Stub { public void test ( ) { <nl> if ( ! checkNotifyPermission ( " notifyDataActivity ( ) " ) ) { <nl> return ; <nl> } <nl> - handleRemoveListLocked ( ) ; <nl> synchronized ( mRecords ) { <nl> mDataActivity = state ; <nl> for ( Record r : mRecords ) { <nl>   } } } } 
public class PortletPreferencesListener implements ModelListener { <nl> <nl> public void onAfterCreate ( BaseModel model ) throws ModelListenerException { <nl> - clearCache ( model ) ; <nl> } <nl> public void onBeforeRemove ( BaseModel model ) throws ModelListenerException { <nl>   } } 
public class XIoBridge extends XHook { public void test ( ) { { <nl> return ; <nl> <nl> - if ( isRestricted ( param ) ) <nl> + if ( isRestricted ( param , mFileName ) ) <nl> param . setResult ( new FileNotFoundException ( ) ) ; <nl> } <nl> } <nl>   } 
public class DelaunayTriangulatorTest extends GdxTest { public void test ( ) { <nl> } <nl> void triangulate ( ) { <nl> - seed = 4139368480425561099l ; <nl> + <nl> MathUtils . random . setSeed ( seed ) ; <nl> int pointCount = 100 ; <nl>   } } 
public class FocusTrackback { <nl> <nl> private boolean wrongOS ( ) { <nl> - return SystemInfo . isWindows ; <nl> + return ! SystemInfo . isMac ; <nl> } <nl> private void register ( final Window parent ) { <nl>   } } 
public class ActivityShare extends Activity { public void test ( ) { <nl> <nl> setContentView ( R . layout . sharelist ) ; <nl> - getWindow ( ) . setSoftInputMode ( WindowManager . LayoutParams . SOFT_INPUT_STATE_ALWAYS_HIDDEN ) ; <nl> <nl> if ( action . equals ( ACTION_TOGGLE ) ) { <nl>   } } } 
public class PacketTransceiverImpl implements PacketTransceiver { <nl> <nl> <nl> - <nl> public void receive ( Packet packet ) { <nl> if ( packet . isHeaderSet ( Packet . HEADER_OP ) ) { <nl> operationService . executeOperation ( packet ) ; <nl>   } } } 
public class ClientConfig { <nl> <nl> <nl> <nl> <nl> <nl> <nl> public TimeoutConfig getTimeoutConfig ( ) { <nl> return timeoutConfig ; <nl>   } } 
public class DrawerLayout extends ViewGroup { <nl> <nl> public int getViewHorizontalDragRange ( View child ) { <nl> - return child . getWidth ( ) ; <nl> + return isDrawerView ( child ) ? child . getWidth ( ) : 0 ; <nl> } <nl> <nl>   } 
public class AtmosphereRequest extends HttpServletRequestWrapper { <nl> <nl> <nl> public HttpSession getSession ( ) { <nl> - return b . request . getSession ( false ) ; <nl> + return getSession ( false ) ; <nl> } <nl> <nl>   } 
public class PLWJGL extends PGL { <nl> <nl> protected void getGL ( PGL pgl ) { <nl> + glThread = pgl . glThread ; <nl> } <nl> } <nl>   
public class FreeFlowContainer extends AbsLayoutContainer { public void test ( ) { <nl> v . setRotation ( 0 ) ; <nl> v . setScaleX ( 1f ) ; <nl> v . setScaleY ( 1f ) ; <nl> + v . setAlpha ( 1f ) ; <nl> viewpool . returnViewToPool ( v ) ; <nl> } <nl>   } 
public class CompatibilityEngine extends AbstractEngine { <nl> <nl> public void initScreenshot ( GL gl , GLU glu ) { <nl> initDisplayLists ( gl , glu ) ; <nl> + textManager . initRenderer ( ) ; <nl> } <nl> <nl>   } 
public class Form { <nl> public static final String TYPE_FORM = " form " ; <nl> public static final String TYPE_SUBMIT = " submit " ; <nl> + public static final String TYPE_CANCEL = " cancel " ; <nl> public static final String TYPE_RESULT = " result " ; <nl> private DataForm dataForm ; <nl>   } 
public class StreamRule { public void test ( ) { { <nl> for ( Type type : Type . values ( ) ) <nl> if ( type . id == id ) <nl> return type ; <nl> + return null ; <nl> } <nl> } <nl>   } 
import org . codehaus . groovy . runtime . InvokerInvocationException ; <nl> <nl> <nl> <nl> <nl> <nl> <nl> public class GroovyMain { public void test ( ) { <nl>   } } 
public class Canvas { <nl> <nl> <nl> <nl> <nl> <nl> <nl> + <nl> public final Matrix getMatrix ( ) { <nl> Matrix m = new Matrix ( ) ; <nl> <nl>   } } 
public class ProjectJdkImpl extends UserDataHolderBase implements JDOMExternaliz <nl> <nl> { public void rootsChanged ( ) { <nl> + resetVersionString ( ) ; <nl> if ( myListeners . isEmpty ( ) ) { <nl> return ; <nl> } <nl>   } } 
import water . * ; <nl> public class WaterMeterCpuTicks extends Iced { <nl> <nl> - int nodeidx ; <nl> + public int nodeidx ; <nl> <nl> public long [ ] [ ] cpu_ticks ; <nl>   } 
import java . util . List ; <nl> public class ReadonlyStatusHandlerImpl extends ReadonlyStatusHandler implements ProjectComponent , JDOMExternalizable { <nl> private final Project myProject ; <nl> - public boolean SHOW_DIALOG ; <nl> + public boolean SHOW_DIALOG = true ; <nl> public ReadonlyStatusHandlerImpl ( Project project ) { <nl> myProject = project ; <nl>   } } 
public class Client implements IConnection { <nl> private final int buffer_size ; <nl> private boolean closing ; <nl> - private Integer messageBatchSize ; <nl> + private int messageBatchSize ; <nl> private AtomicLong pendings ; <nl>   } 
public class Tmp { public enum Material { <nl> RAW_CHICKEN ( 365 ) , <nl> COOKED_CHICKEN ( 366 ) , <nl> ROTTEN_FLESH ( 367 ) , <nl> - ENDER_PEARL ( 368 ) , <nl> + ENDER_PEARL ( 368 , 16 ) , <nl> BLAZE_ROD ( 369 ) , <nl> GHAST_TEAR ( 370 ) , <nl> GOLD_NUGGET ( 371 ) , <nl>   } } 
public class PShader { public void test ( ) { <nl> parent = null ; <nl> pgMain = null ; <nl> pgl = null ; <nl> - context = pgl . createEmptyContext ( ) ; <nl> + context = - 1 ; <nl> this . vertexURL = null ; <nl> this . fragmentURL = null ; <nl>   } } 
public class RecyclerView extends ViewGroup { public void test ( ) { { <nl> mLayout . onAdapterChanged ( oldAdapter , mAdapter ) ; <nl> } <nl> mRecycler . onAdapterChanged ( oldAdapter , mAdapter ) ; <nl> + mStructureChanged = true ; <nl> + markKnownViewsInvalid ( ) ; <nl> requestLayout ( ) ; <nl> } <nl>   } 
public class StorageService implements IEndpointStateChangeSubscriber , StorageSe <nl> { <nl> public void run ( ) <nl> { <nl> + stopRPCServer ( ) ; <nl> Gossiper . instance . stop ( ) ; <nl> MessagingService . instance ( ) . shutdown ( ) ; <nl> StageManager . shutdownNow ( ) ; <nl>   } } 
public final class ContactsContract { <nl> public static final int TYPE_HOME = 1 ; <nl> public static final int TYPE_WORK = 2 ; <nl> public static final int TYPE_OTHER = 3 ; <nl> + public static final int TYPE_MOBILE = 4 ; <nl> <nl> <nl>   } 
public class PlaybackService { public void test ( ) { <nl> if ( mSeek > 0 ) { <nl> mPlayer . seekTo ( mSeek ) ; <nl> } <nl> + mPlayer . setLooping ( true ) ; <nl> mPlayer . start ( ) ; <nl> break ; <nl> } <nl>   } 
public class ClearScrollResponse extends ActionResponse implements StatusToXCont <nl> <nl> { public XContentBuilder toXContent ( XContentBuilder builder , Params params ) throws IOException { { <nl> - builder . startObject ( ) ; <nl> - builder . endObject ( ) ; <nl> return builder ; <nl> } <nl>   } } 
public class FMLServerHandler implements IFMLSidedHandler <nl> { public void test ( ) { <nl> server = minecraftServer ; <nl> ObfuscationReflectionHelper . detectObfuscation ( World . class ) ; <nl> - FMLCommonHandler . instance ( ) . beginLoading ( this ) ; <nl> Loader . instance ( ) . loadMods ( ) ; <nl> } <nl>   } 
public class Tmp { public void test ( ) { <nl> <nl> <nl> <nl> <nl> <nl>   } } 
package info . ata4 . unity ; <nl> <nl> public class DisUnity { <nl> - private static final String VERSION = " 0 . 2 . 2 " ; <nl> + private static final String VERSION = " 0 . 3 . 0 " ; <nl> public static String getVersion ( ) { <nl> return VERSION ; <nl>   } } 
public class RequestFacade implements HttpServletRequest { <nl> public void login ( String username , String password ) <nl> throws ServletException { <nl> - login ( username , password ) ; <nl> + request . login ( username , password ) ; <nl> } <nl> public void logout ( ) throws ServletException { <nl>   } } 
public class MessageHistoryServiceImpl <nl> { public void localUserPresenceChanged ( LocalUserChatRoomPresenceChangeEvent evt ) <nl> { <nl> if ( evt . getEventType ( ) == <nl> - LocalUserChatRoomPresenceChangeEvent . CHAT_ROOM_JOINED ) <nl> + LocalUserChatRoomPresenceChangeEvent . LOCAL_USER_JOINED ) <nl> { <nl> evt . getChatRoom ( ) . addMessageListener ( this ) ; <nl> } <nl>   } } 
public class AccelListener extends Plugin implements SensorEventListener { public void test ( ) { <nl> if ( this . status == AccelListener . STOPPED ) { <nl> return ; <nl> } <nl> + Log . d ( " ACCEL " , " accuracy is now " + accuracy ) ; <nl> this . accuracy = accuracy ; <nl> } <nl>   } 
public class HikariDataSource extends HikariConfig implements DataSource <nl> <nl> { public int hashCode ( ) <nl> { { <nl> - return password . hashCode ( ) ; <nl> + return ( password == null ? 0 : password . hashCode ( ) ) ; <nl> } <nl> <nl>   } } 
public abstract class BaseDataReader { <nl> public void stop ( ) { <nl> isStopped = true ; <nl> + resumeReading ( ) ; <nl> } <nl> public void waitFor ( ) throws InterruptedException { <nl>   } } 
public class FloatTextureData implements TextureData { <nl> public boolean isManaged ( ) { <nl> return true ; <nl> } <nl> + <nl> + public FloatBuffer getBuffer ( ) { <nl> + return buffer ; <nl> + } <nl> } <nl>   
public class TwoWayView extends AdapterView < ListAdapter > { public void test ( ) { { <nl> } <nl> lp . id = mAdapter . getItemId ( position ) ; <nl> - lp . viewType = mAdapter . getItemViewType ( position ) ; <nl> child . setLayoutParams ( lp ) ; <nl> } <nl>   } 
package zmq ; <nl> public class YQueue < T > <nl> { <nl> <nl> - private class Chunk < T > <nl> + private static class Chunk < T > <nl> { <nl> final T [ ] values ; <nl> final int [ ] pos ; <nl>   } } 
public final class RingBuffer < T > extends Sequencer <nl> { public void test ( ) { <nl> this ( eventFactory , size , <nl> ClaimStrategy . Option . MULTI_THREADED , <nl> - WaitStrategy . Option . SLEEPING ) ; <nl> + WaitStrategy . Option . BLOCKING ) ; <nl> } <nl> <nl>   } 
public class TtsService extends Service implements OnCompletionListener { public void test ( ) { { { <nl> if ( synthAvailable ) { <nl> synthesizerLock . unlock ( ) ; <nl> } <nl> + processSpeechQueue ( ) ; <nl> } <nl> } <nl> } <nl>   } 
import javax . swing . * ; <nl> <nl> <nl> public class UnassignedVariableAccessInspection extends GroovyLocalInspectionBase { <nl> - public boolean myIgnoreBooleanExpressions = false ; <nl> + public boolean myIgnoreBooleanExpressions = true ; <nl> <nl> <nl>   } 
public class Helper <nl> { public static final double round2 ( double value ) <nl> { { { <nl> - return Math . round ( value * 100 ) / 100 ; <nl> + return Math . round ( value * 100 ) / 100d ; <nl> } <nl> } <nl>   } } 
public class NumpyUfuncs { public void test ( ) { { <nl> UFUNC_LIST . add ( " ceil " ) ; <nl> UFUNC_LIST . add ( " trunc " ) ; <nl> + UFUNC_LIST . add ( " fabs " ) ; <nl> } <nl> } <nl>   } 
public class ZContext implements Closeable <nl> <nl> { public ZContext ( int ioThreads_ ) { <nl> - context = null ; <nl> sockets = new CopyOnWriteArrayList < Socket > ( ) ; <nl> ioThreads = ioThreads_ ; <nl> linger = 0 ; <nl>   } } 
public class NinePatch { <nl> public float getTotalHeight ( ) { <nl> return topHeight + middleHeight + bottomHeight ; <nl> } <nl> - <nl> - public Texture getTexture ( ) { <nl> - return texture ; <nl> - } <nl> } <nl>   
public abstract class TwoWayLayoutManager extends LayoutManager { <nl> <nl> public int getFirstVisiblePosition ( ) { <nl> + if ( getChildCount ( ) == 0 ) { <nl> + return RecyclerView . NO_POSITION ; <nl> + } <nl> + <nl> return mFirstPosition ; <nl> } <nl>   } 
public class UserGroupLocalServiceImpl extends UserGroupLocalServiceBaseImpl { <nl> <nl> public UserGroup fetchUserGroup ( long companyId , String name ) <nl> - throws PortalException , SystemException { <nl> + throws SystemException { <nl> return userGroupPersistence . fetchByC_N ( companyId , name ) ; <nl> } <nl>   } } 
import android . webkit . WebView ; <nl> <nl> <nl> - public class WebElementCreator { <nl> + class WebElementCreator { <nl> private ArrayList < WebElement > webElements ; <nl> private Sleeper sleeper ; <nl>   } } 
public class PortletDisplay implements Serializable { <nl> <nl> public void setTitle ( String title ) { <nl> - title = HtmlUtil . escape ( title ) ; <nl> - <nl> _title = title ; <nl> <nl>   } } 
public class SSLHostConfigCertificate { <nl> <nl> - public Type getType ( ) { <nl> + } public Type getType ( ) { <nl> return type ; <nl> } <nl>   } 
public class BlockDoesNotExistException extends AlluxioException { <nl> <nl> <nl> <nl> <nl> <nl> public BlockDoesNotExistException ( String message ) { <nl>   } } 
public class AIRobotLookForStation extends AIRobot { public void test ( ) { <nl> return ; <nl> } <nl> - <nl> - <nl> double potentialStationDistance = Float . MAX_VALUE ; <nl> DockingStation potentialStation = null ; <nl>   } 
public class VoldemortIOUtilsTest { <nl> <nl> public void testCloseQuietlyNullHttpResponse ( ) { <nl> - VoldemortIOUtils . closeQuietly ( null ) ; <nl> + VoldemortIOUtils . closeQuietly ( ( HttpResponse ) null ) ; <nl> } <nl> <nl>   } 
public class CommitLog implements CommitLogMBean <nl> <nl> { public void resetUnsafe ( ) <nl> { { <nl> + sync ( true ) ; <nl> allocator . resetUnsafe ( ) ; <nl> } <nl>   } } 
public class ContentExchange extends CachedExchange <nl> { <nl> int _contentLength = 1024 ; <nl> String _encoding = " utf - 8 " ; <nl> - ByteArrayOutputStream _responseContent ; <nl> + protected ByteArrayOutputStream _responseContent ; <nl> File _fileForUpload ; <nl>   } 
final class SocketReceiveBufferPool { public void test ( ) { { <nl> } <nl> ByteBuffer buf = ByteBuffer . allocateDirect ( normalizeCapacity ( size ) ) ; <nl> - buf . clear ( ) ; <nl> return buf ; <nl> } <nl>   } 
public class TextureView extends View { <nl> public void setOpaque ( boolean opaque ) { <nl> if ( opaque != mOpaque ) { <nl> mOpaque = opaque ; <nl> - updateLayer ( ) ; <nl> + if ( mLayer != null ) { <nl> + updateLayer ( ) ; <nl> + } <nl> } <nl> } <nl>   } 
public class ApplicationMode { <nl> <nl> public static List < ApplicationMode > allPossibleValues ( OsmandSettings settings ) { <nl> - return values ; <nl> + return new ArrayList < ApplicationMode > ( values ) ; <nl> } <nl>   } 
public class JournalShutdownIntegrationTest { <nl> private ExecutorService mExecutorsForClient ; <nl> <nl> - public static SystemPropertyRule mDisableHdfsCacheRule = <nl> + public static SystemPropertyRule sDisableHdfsCacheRule = <nl> new SystemPropertyRule ( " fs . hdfs . impl . disable . cache " , " true " ) ; <nl> <nl>   } 
import org . opensolaris . opengrok . web . Util ; <nl> public class TarAnalyzer extends FileAnalyzer { <nl> private StringBuilder content ; <nl> - private int len ; <nl> private static final Reader dummy = new StringReader ( " " ) ; <nl>   } 
public class Editor { public void test ( ) { <nl> if ( mPositionListener != null ) { <nl> mPositionListener . onScrollChanged ( ) ; <nl> } <nl> + if ( mSelectionActionMode != null ) { <nl> + mSelectionActionMode . invalidateContentRect ( ) ; <nl> + } <nl> } <nl> <nl>   } 
public class BooksIntegrationTest { <nl> <nl> public static void tearDown ( ) { <nl> - Spark . clearRoutes ( ) ; <nl> Spark . stop ( ) ; <nl> } <nl>   } 
public class ConsistencyCheck { public void test ( ) { { { <nl> } <nl> } <nl> } <nl> - <nl>   } 
package com . mongodb ; <nl> <nl> <nl> <nl> <nl> <nl> + <nl> public class MongoServerSelectionException extends MongoClientException { <nl> private static final long serialVersionUID = - 1497309903649297430L ; <nl>   } 
public class User implements Cacheable { <nl> <nl> public String getEmail ( ) { <nl> - return email ; <nl> + return email == null ? " " : email ; <nl> } <nl> public void setEmail ( String email ) { <nl>   } } 
public class Tool { <nl> <nl> - public File inputDirectory ; <nl> + public File inputDirectory ; <nl> public String outputDirectory ; <nl> public String libDirectory ; <nl> public boolean generate_ATN_dot = false ; <nl>   } 
public class CommonUtils { public void test ( ) { <nl> ByteBuffer ret = ByteBuffer . allocate ( buf . limit ( ) - buf . position ( ) ) ; <nl> ret . put ( buf ) ; <nl> ret . flip ( ) ; <nl> + buf . flip ( ) ; <nl> return ret ; <nl> } <nl>   } 
public class EventDispatcher extends VirtualFileAdapter implements VirtualFileMa <nl> <nl> { public void updatingDone ( ) { <nl> - assert isRefreshing ( ) ; <nl> if ( myRefreshDepth == 0 ) { <nl> <nl>   } } } 
public class LocalSession { <nl> <nl> <nl> <nl> <nl> <nl> <nl> public void setCUIVersion ( int cuiVersion ) { <nl> this . cuiVersion = cuiVersion ; <nl>   } } 
public class ConversationPrefsHelper { <nl> <nl> public SharedPreferences getConversationPrefs ( ) { { <nl> - return mPrefs ; <nl> + return mConversationPrefs ; <nl> } <nl> } <nl>   } 
public class MainService extends Service { <nl> <nl> public void onCreate ( ) { <nl> + super . onCreate ( ) ; <nl> Crashlytics . start ( this ) ; <nl>   } } 
public final class Internal { <nl> <nl> <nl> public static boolean inMilliseconds ( final byte [ ] qualifier , <nl> - final byte offset ) { <nl> + final int offset ) { <nl> return inMilliseconds ( qualifier [ offset ] ) ; <nl> } <nl>   } } 
class WifiController extends StateMachine { public void test ( ) { <nl> registerForStayAwakeModeChange ( handler ) ; <nl> readWifiIdleTime ( ) ; <nl> registerForWifiIdleTimeChange ( handler ) ; <nl> - readStayAwakeConditions ( ) ; <nl> + readWifiSleepPolicy ( ) ; <nl> registerForWifiSleepPolicyChange ( handler ) ; <nl> } <nl>   } 
public class HttpUtils { <nl> <nl> public void configHttpGetCacheDefaultExpiry ( long defaultExpiry ) { <nl> - currRequestExpiry = defaultExpiry ; <nl> HttpGetCache . setDefaultExpiryTime ( defaultExpiry ) ; <nl> + currRequestExpiry = HttpGetCache . getDefaultExpiryTime ( ) ; <nl> } <nl> public void configCurrRequestExpiry ( long currRequestExpiry ) { <nl>   } } 
package com . notnoop . apns ; <nl> <nl> <nl> <nl> - public class APNS { <nl> + public final class APNS { <nl> private APNS ( ) { throw new AssertionError ( " Uninstantiable class " ) ; } <nl>   } } 
public class RenderPipe extends TileEntitySpecialRenderer { <nl> final static private int renderDistanceSq = 24 * 24 ; <nl> - final static private int numItemsToRender = 3 ; <nl> + final static private int numItemsToRender = 5 ; <nl> private final static EntityItem dummyEntityItem = new EntityItem ( null ) ; <nl>   } 
class IonDrawable extends Drawable { <nl> private WeakReference < IonDrawable > ionDrawableRef ; <nl> private WeakReference < ImageView > imageViewRef ; <nl> private String bitmapKey ; <nl> - private String parentKey ; <nl> private SimpleFuture < ImageView > imageViewFuture = new SimpleFuture < ImageView > ( ) ; <nl> private Animation inAnimation ; <nl> private int inAnimationResource ; <nl>   } 
package rajawali . animation ; <nl> import java . util . Stack ; <nl> import rajawali . math . Vector3 ; <nl> - import rajawali . util . RajLog ; <nl> public class BezierPath3D implements ISpline { <nl>   } 
import php . runtime . ext . support . compile . ConstantsContainer ; <nl> public class InfoConstants extends ConstantsContainer { <nl> public static String PATH_SEPARATOR = Constants . PATH_SEPARATOR ; <nl> + public static String DIRECTORY_SEPARATOR = Constants . DIRECTORY_SEPARATOR ; <nl> } <nl>   
public final class KeyDispatcher implements Flow . Dispatcher { <nl> public static final class Builder { <nl> private final Activity activity ; <nl> - private KeyChanger keyChanger ; <nl> + private final KeyChanger keyChanger ; <nl> private Builder ( Activity activity , KeyChanger keyChanger ) { <nl> this . activity = activity ; <nl>   } } } 
public class VariableInspector extends JDialog { public void test ( ) { <nl> thisFields = new ArrayList < VariableNode > ( ) ; <nl> declaredThisFields = new ArrayList < VariableNode > ( ) ; <nl> + scrollPane . setBorder ( BorderFactory . createEmptyBorder ( 0 , 0 , 0 , 0 ) ) ; <nl> return scrollPane ; <nl> } <nl>   } 
public class Base { public void test ( ) { <nl> getSketchbookToolsFolder ( ) . mkdirs ( ) ; <nl> getSketchbookModesFolder ( ) . mkdirs ( ) ; <nl> getSketchbookExamplesFolder ( ) . mkdirs ( ) ; <nl> + getSketchbookTemplatesFolder ( ) . mkdirs ( ) ; <nl> } <nl>   } 
public class ConstantIntroduceHandler extends IntroduceHandler { <nl> <nl> protected String getHelpId ( ) { <nl> - return " refactoring . introduceConstant " ; <nl> + return " python . reference . introduceConstant " ; <nl> } <nl> } <nl>   
public class WebView extends AbsoluteLayout <nl> <nl> <nl> { public Picture capturePicture ( ) { <nl> + if ( mNativeClass == 0 ) return null ; <nl> Picture result = new Picture ( ) ; <nl> nativeCopyBaseContentToPicture ( result ) ; <nl> return result ; <nl>   } } 
<nl> package dagger . internal ; <nl> - import dagger . ObjectGraph ; <nl> import dagger . internal . Binding . InvalidBindingException ; <nl> import java . util . ArrayList ; <nl> import java . util . Collections ; <nl>   
package com . iluwatar ; <nl> public class Item { public void test ( ) { <nl> - <nl> + String name ; <nl> + int level ; <nl> } <nl>   } 
public class EmbeddedElasticSearchClient { public void test ( ) { { <nl> <nl> deleteIndex ( indexName ) ; <nl> + server . getMongoBridge ( ) . removeIndexDateRange ( indexName ) ; <nl> } <nl> } <nl>   } 
public class Image extends Widget { <nl> public void setAlign ( int align ) { <nl> this . align = align ; <nl> + invalidate ( ) ; <nl> } <nl> public float getMinWidth ( ) { <nl>   } } 
public class LabelAdjust extends AbstractLayout implements Layout { <nl> <nl> public void initAlgo ( ) { <nl> + setConverged ( false ) ; <nl> } <nl> public void goAlgo ( ) { <nl>   } } 
public class WXRequest { <nl> <nl> <nl> <nl> - public static final int DEFAULT_TIMEOUT_MS = 2500 ; <nl> + public static final int DEFAULT_TIMEOUT_MS = 3000 ; <nl> } <nl>   
public class WSDecoder { public void test ( ) { <nl> if ( finalFlag ) { <nl> if ( fragmentedOpCode > 0 ) <nl> opcode = fragmentedOpCode ; <nl> + fragmentedOpCode = - 1 ; <nl> switch ( opcode ) { <nl> case OPCODE_TEXT : <nl> return new Frame . TextFrame ( content ) ; <nl>   } } } } 
public class Activity extends ContextThemeWrapper <nl> <nl> { public boolean onMenuOpened ( int featureId , Menu menu ) { <nl> if ( featureId == Window . FEATURE_ACTION_BAR ) { <nl> + initActionBar ( ) ; <nl> if ( mActionBar != null ) { <nl> mActionBar . dispatchMenuVisibilityChanged ( true ) ; <nl> } else { <nl>   } } } } 
public class MBCategoryLocalServiceImpl extends MBCategoryLocalServiceBaseImpl { public void test ( ) { { <nl> curCategory . setDisplayStyle ( displayStyle ) ; <nl> - mbCategoryPersistence . update ( curCategory , false ) ; <nl> + mbCategoryPersistence . update ( curCategory ) ; <nl> } <nl> } <nl>   } 
public class ActivityStack { public void test ( ) { { <nl> } <nl> if ( w > 0 ) { <nl> - return mService . mWindowManager . screenshotApplications ( w , h ) ; <nl> + <nl> } <nl> return null ; <nl> } <nl>   } 
public class Configuration <nl> <nl> <nl> <nl> <nl> <nl> { public void setAllowPackage ( boolean aAllowPackage ) <nl> { <nl>   } } 
public abstract class GroovyPage extends Script { <nl> <nl> public String getPluginContextPath ( ) { <nl> - return pluginContextPath ; <nl> + return pluginContextPath != null ? pluginContextPath : BLANK_STRING ; <nl> } <nl> public void cleanup ( ) { <nl>   } } 
package jackpal . androidterm ; <nl> import android . content . Context ; <nl> import android . util . DisplayMetrics ; <nl> - import android . util . Log ; <nl> import jackpal . androidterm . emulatorview . ColorScheme ; <nl> import jackpal . androidterm . emulatorview . EmulatorView ; <nl>   
public class HttpRequest { <nl> <nl> <nl> public String getParas ( ) { <nl> - return HttpUtils . joinParas ( parasMap ) ; <nl> + return HttpUtils . joinParasWithEncodedValue ( parasMap ) ; <nl> } <nl> <nl>   } 
public class HTML5VideoFullScreen extends HTML5VideoView <nl> <nl> { public void showControllerInFullScreen ( ) { { <nl> - mMediaController . show ( 0 ) ; <nl> + if ( mMediaController != null ) { <nl> + mMediaController . show ( 0 ) ; <nl> + } <nl> } <nl> <nl>   } } 
public final class StripedExecutor implements Executor { public void test ( ) { <nl> for ( Worker worker : workers ) { <nl> worker . workQueue . clear ( ) ; <nl> + worker . interrupt ( ) ; <nl> } <nl> } <nl>   } 
final class ActivityStack { public void test ( ) { <nl> mWindowManager . moveTaskToTop ( tr . taskId ) ; <nl> + mLastPausedActivity = null ; <nl> mStackSupervisor . resumeTopActivitiesLocked ( ) ; <nl> EventLog . writeEvent ( EventLogTags . AM_TASK_TO_FRONT , tr . userId , tr . taskId ) ; <nl>   } } 
public class NativeMemoryChunk implements Closeable { <nl> private static final String TAG = " NativeMemoryChunk " ; <nl> static { <nl> - SoLoaderShim . loadLibrary ( " gnustl_shared " ) ; <nl> SoLoaderShim . loadLibrary ( " memchunk " ) ; <nl> } <nl>   } 
public class JBTabbedPane extends JTabbedPane implements HierarchyListener { public void test ( ) { <nl> UIUtil . setNotOpaqueRecursively ( component ) ; <nl> setInsets ( component ) ; <nl> - revalidate ( ) ; <nl> + revalidate ( ) ; <nl> repaint ( ) ; <nl> } <nl>   } 
public class BinaryRoutePlanner { public void test ( ) { { <nl> ctx . finalReverseEndSegment = next . segmentStart ; <nl> ctx . finalReverseRoute = opposite ; <nl> } <nl> + return true ; <nl> } <nl> <nl> boolean alreadyVisited = visitedSegments . contains ( nts ) ; <nl>   } 
package com . iluwatar . delegation . simple ; <nl> - import com . iluwatar . delegation . simple . printers . App ; <nl> import org . junit . Test ; <nl> public class AppTest { public void test ( ) { <nl>   } } 
public abstract class AbstractContextSelectToolbarStatusPanel extends AbstractPa <nl> { public void contextsChanged ( ) { { <nl> log . debug ( " Contexts changed . . . " ) ; <nl> contextSelectBox . reloadContexts ( false ) ; <nl> + contextSelectBox . setSelectedIndex ( - 1 ) ; <nl> } <nl> <nl>   } } 
public class DRFTest extends TestUtil { public void test ( ) { <nl> parms . _max_depth = 2 ; <nl> parms . _nfolds = 2 ; <nl> parms . _ntrees = 3 ; <nl> + parms . _seed = 11233 ; <nl> DRF job = new DRF ( parms ) ; <nl>   } } 
public class MasterClient extends CommunicationProtocol implements Master , Chann <nl> { public void test ( ) { { <nl> msgLog . logMessage ( " MasterClient shutdown " , true ) ; <nl> channelPool . close ( true ) ; <nl> + executor . shutdownNow ( ) ; <nl> } <nl> } <nl>   } 
public final class ActivityThread { <nl> <nl> private void handleBindApplication ( AppBindData data ) { <nl> + <nl> + VMRuntime . registerSensitiveThread ( ) ; <nl> if ( data . trackAllocation ) { <nl> DdmVmInternal . enableRecentAllocations ( true ) ; <nl> } <nl>   } } 
public class PostsActivity extends WPActionBarActivity implements OnPostSelected <nl> { public void onClick ( DialogInterface dialog , <nl> int whichButton ) { { <nl> post . delete ( ) ; <nl> + popPostDetail ( ) ; <nl> attemptToSelectPost ( ) ; <nl> postList . loadPosts ( false ) ; <nl> } <nl>   } } 
public class App extends Application { <nl> public void onCreate ( ) { { <nl> super . onCreate ( ) ; <nl> PluginManager . init ( this ) ; <nl> - <nl> } <nl> } <nl>   } 
public class StringOutputStream extends OutputStream { <nl> StringBuilder mBuf ; <nl> + <nl> public void write ( int data ) throws IOException { <nl> mBuf . append ( ( char ) data ) ; <nl> } <nl>   } 
public final class Request { public void test ( ) { <nl> parameters . setQuery ( queryMB ) ; <nl> parameters . setURLDecoder ( urlDecoder ) ; <nl> - parameters . setHeaders ( headers ) ; <nl> } <nl>   } 
final class CompilerExecutor { public void test ( ) { { { { <nl> } <nl> return result ; <nl> - } <nl> + } <nl> } <nl>   } 
public class BasicBSONList extends ArrayList < Object > implements BSONObject { <nl> <nl> <nl> <nl> + <nl> public boolean containsKey ( String key ) { <nl> return containsField ( key ) ; <nl> } <nl>   } 
public abstract class AbstractOutputBuffer < S > implements OutputBuffer { <nl> <nl> <nl> <nl> - protected final OutputBuffer outputStreamOutputBuffer ; <nl> + protected OutputBuffer outputStreamOutputBuffer ; <nl> <nl> <nl>   } 
public class TerminalView { public void test ( ) { <nl> if ( myDockContainer == null ) { <nl> myDockContainer = new TerminalDockContainer ( toolWindow ) ; <nl> + Disposer . register ( myProject , myDockContainer ) ; <nl> DockManager . getInstance ( myProject ) . register ( myDockContainer ) ; <nl> } <nl> } <nl>   } 
package Question9_1 ; <nl> - import java . util . HashMap ; <nl> - <nl> public class Question { <nl> public static int countWaysDP ( int n , int [ ] map ) { <nl>   } } 
public class MultipleParentClassLoader extends ClassLoader { public void test ( ) { { <nl> classLoaders . add ( type . getClassLoader ( ) ) ; <nl> } <nl> return append ( classLoaders ) ; <nl> - <nl> } <nl> <nl>   } 
package ninja ; <nl> - import static org . junit . Assert . assertTrue ; <nl> - <nl> import java . lang . reflect . InvocationTargetException ; <nl> import java . lang . reflect . Method ; <nl> import java . util . ArrayList ; <nl>   
public class PhotosBaseAdapter extends BaseAdapter { public void test ( ) { <nl> PhotoItemLayout layout = ( PhotoItemLayout ) view ; <nl> layout . getImageView ( ) . requestThumbnail ( getItem ( position ) , true ) ; <nl> - layout . setChecked ( true ) ; <nl> return view ; <nl> } <nl>   } 
public class Systrace { <nl> public static final long TRACE_TAG_REACT_JAVA_BRIDGE = 0L ; <nl> public static final long TRACE_TAG_REACT_FRESCO = 0L ; <nl> + public static final long TRACE_TAG_REACT_APPS = 0L ; <nl> public enum EventScope { <nl> THREAD ( ' t ' ) , <nl>   } } 
public class CameraView extends ViewGroup implements AutoFocusCallback { public void test ( ) { { <nl> previewDestroyed ( ) ; <nl> removeView ( previewStrategy . getWidget ( ) ) ; <nl> } <nl> + <nl> + lastPictureOrientation = - 1 ; <nl> } <nl> <nl>   } 
public class DownloadActivity extends SherlockFragmentActivity { public void test ( ) { { <nl> } <nl> getSupportActionBar ( ) . setHomeButtonEnabled ( true ) ; <nl> + getSupportActionBar ( ) . setDisplayHomeAsUpEnabled ( true ) ; <nl> } <nl> <nl>   } 
final class PooledUnsafeDirectByteBuf extends PooledByteBuf < ByteBuffer > { <nl> <nl> protected ByteBuffer newInternalNioBuffer ( ByteBuffer memory ) { <nl> - return memory . duplicate ( ) ; <nl> + return memory ; <nl> } <nl> <nl>   } 
public abstract class Pair < T1 , T2 > <nl> <nl> { public T1 first ( ) <nl> { { <nl> - return first ( ) ; <nl> + return first ; <nl> } <nl> <nl>   } } 
public final class ClusterService implements Runnable , Constants { <nl> private long lastCheck = 0 ; <nl> - private boolean running = true ; <nl> + private volatile boolean running = true ; <nl> private final ThreadWatcher threadWatcher = new ThreadWatcher ( ) ; <nl>   } 
public class JUnit3RunnerWithInners extends Runner implements Filterable , Sortab <nl> <nl> { public void filter ( Filter filter ) throws NoTestsRemainException { { <nl> - initialize ( ) ; <nl> + delegateRunner = new JUnit38ClassRunner ( klass ) ; <nl> delegateRunner . filter ( filter ) ; <nl> } <nl>   } } 
public class ScopeConfigurable extends NamedConfigurable < NamedScope > { <nl> <nl> <nl> public String getHelpTopic ( ) { <nl> - return null ; <nl> + return " project . scopes " ; <nl> } <nl> public JComponent createOptionsPanel ( ) { <nl>   } } 
public class Http11InputBuffer implements InputBuffer { <nl> <nl> <nl> <nl> - protected class SocketInputBuffer implements InputBuffer { <nl> + private class SocketInputBuffer implements InputBuffer { <nl> <nl> <nl>   } } } 
package rx . exceptions ; <nl> import static org . junit . Assert . assertEquals ; <nl> - import static org . junit . Assert . assertFalse ; <nl> import java . io . ByteArrayOutputStream ; <nl> import java . io . PrintStream ; <nl>   
public class SelectTemplateStep extends ModuleWizardStep { <nl> <nl> public void updateDataModel ( ) { <nl> + myContext . setProjectBuilder ( myModuleBuilder ) ; <nl> if ( mySettingsStep != null ) { <nl> mySettingsStep . updateDataModel ( ) ; <nl> } <nl>   } } 
public abstract class FragmentHostCallback < E > extends FragmentContainer { public void test ( ) { <nl> } <nl> void onAttachFragment ( Fragment fragment ) { <nl> - fragment . onAttach ( mContext ) ; <nl> } <nl> void doLoaderStart ( ) { <nl>   } } 
public class MotionGroup extends AbstractActionGroup <nl> { public void test ( ) { <nl> int line = EditorHelper . normalizeVisualLine ( editor , EditorHelper . getCurrentVisualLine ( editor ) + cntForward ) ; <nl> - if ( line <= 0 ) <nl> + if ( line < 0 ) <nl> { <nl> return 0 ; <nl> } <nl>   } } 
package org . opensolaris . opengrok . history ; <nl> import java . io . BufferedReader ; <nl> - import java . io . ByteArrayInputStream ; <nl> import java . io . StringReader ; <nl> import org . junit . After ; <nl> import org . junit . AfterClass ; <nl>   
import serializers . JavaBuiltIn ; <nl> import serializers . Serializer ; <nl> import serializers . TestGroups ; <nl> - import data . media . Image ; <nl> - import data . media . Media ; <nl> import data . media . MediaContent ; <nl> import com . alibaba . fastjson . JSON ; <nl>   
import io . undertow . util . HttpString ; <nl> <nl> <nl> <nl> <nl> <nl> <nl> public class SetHeaderHandler implements HttpHandler { public void test ( ) { <nl>   } } 
public class CursorWindow extends SQLiteClosable { public void test ( ) { <nl> if ( mWindowPtr != null ) { <nl> <nl> nativeDispose ( mWindowPtr ) ; <nl> - mWindowPtr = 0 ; <nl> + mWindowPtr = null ; <nl> } <nl> } <nl>   } 
public class Peer { <nl> <nl> <nl> public VersionMessage getVersionMessage ( ) { <nl> - return versionMessage ; <nl> + return conn . getVersionMessage ( ) ; <nl> } <nl> <nl>   } 
public class DebugFlags { <nl> public static final boolean COOKIE_SYNC_MANAGER = false ; <nl> public static final boolean TRACE_API = false ; <nl> public static final boolean TRACE_CALLBACK = false ; <nl> - public static final boolean TRACE_JAVASCRIPT_BRIDGE = false ; <nl> public static final boolean URL_UTIL = false ; <nl> public static final boolean WEB_SYNC_MANAGER = false ; <nl>   } 
public final class Response { <nl> <nl> <nl> <nl> <nl> <nl> <nl> <nl> public String getContentLanguage ( ) { <nl>   } } 
public class DrawerLayout extends ViewGroup { public void test ( ) { { <nl> if ( mListener != null ) { <nl> mListener . onDrawerClosed ( drawerView ) ; <nl> } <nl> - sendAccessibilityEvent ( AccessibilityEvent . TYPE_WINDOW_STATE_CHANGED ) ; <nl> + getRootView ( ) . sendAccessibilityEvent ( AccessibilityEvent . TYPE_WINDOW_STATE_CHANGED ) ; <nl> } <nl> } <nl>   } 
public final class Resources { <nl> <nl> public String toString ( ) { { <nl> - return " Resources . newByteSource ( " + url + " ) " ; <nl> + return " Resources . asByteSource ( " + url + " ) " ; <nl> } <nl> } <nl>   } 
public class ThreadRenamingRunnable implements Runnable { public void test ( ) { <nl> try { <nl> currentThread . setName ( threadName ) ; <nl> renamed = true ; <nl> - } catch ( Exception e ) { <nl> + } catch ( SecurityException e ) { <nl> <nl> } <nl>   } } 
public class ConversationFragment extends Fragment { <nl> <nl> public void success ( Contact contact ) { <nl> + chatMsg . setText ( " " ) ; <nl> activity . encryptTextMessage ( message ) ; <nl> } <nl>   } 
public class Http11AprProcessor implements ActionHook { public void test ( ) { <nl> <nl> error = false ; <nl> + comet = false ; <nl> keepAlive = true ; <nl> int keepAliveLeft = maxKeepAliveRequests ; <nl>   } } 
public class DownloadStatus { <nl> public DownloadStatus ( FeedFile feedfile , String title ) { <nl> this . feedfile = feedfile ; <nl> + if ( feedfile != null ) { <nl> + feedfileType = feedfile . getTypeAsInt ( ) ; <nl> + } <nl> this . title = title ; <nl> } <nl>   } 
import buildcraft . BuildCraftBuilders ; <nl> import buildcraft . core . ItemBuildCraft ; <nl> import buildcraft . core . blueprints . BptBase ; <nl> + import net . minecraft . src . CreativeTabs ; <nl> import net . minecraft . src . Entity ; <nl> import net . minecraft . src . ItemStack ; <nl> import net . minecraft . src . World ; <nl>   
public class SecureNio2Channel extends Nio2Channel { <nl> public void reset ( AsynchronousSocketChannel channel , SocketWrapperBase < Nio2Channel > socket ) <nl> throws IOException { <nl> super . reset ( channel , socket ) ; <nl> + sslEngine = null ; <nl> sniComplete = false ; <nl> handshakeComplete = false ; <nl> closed = false ; <nl>   } } 
import org . gradle . platform . base . TransformationFileType ; <nl> <nl> <nl> <nl> - <nl> <nl> public class JvmResources implements TransformationFileType { public void test ( ) { <nl> } <nl>   } 
public class DirectRequestDispatcherUtil { public void test ( ) { <nl> if ( pos != - 1 ) { <nl> queryString = fullPath . substring ( pos + 1 ) ; <nl> + <nl> fullPath = fullPath . substring ( 0 , pos ) ; <nl> } <nl>   } } 
public class SchematicToBuild { <nl> public Schematic getSchematic ( ) { <nl> if ( schematic == null ) { <nl> - return schematic ; <nl> - } else { <nl> return new SchematicMask ( false ) ; <nl> + } else { <nl> + return schematic ; <nl> } <nl> } <nl>   } 
public final class Constants { <nl> <nl> <nl> <nl> - public static final boolean ASTRID_LITE = true ; <nl> + public static final boolean ASTRID_LITE = false ; <nl> <nl> <nl>   } 
package spark . embeddedserver ; <nl> <nl> public class NotSupportedException extends RuntimeException { <nl> + private static final long serialVersionUID = 1L ; <nl> + <nl> <nl> <nl> <nl>   } 
import com . hazelcast . nio . Address ; <nl> <nl> <nl> <nl> + <nl> class Router { <nl> private final LoadBalancer loadBalancer ; <nl>   } 
public class UndertowConnector implements Connector { <nl> <nl> public boolean isReverse ( ) { <nl> - return true ; <nl> + return false ; <nl> } <nl> <nl>   } 
public class CxxBuckConfig { <nl> public CxxCompilationDatabaseFormat getCompilationDatabaseFormat ( ) { { <nl> return delegate <nl> . getEnum ( cxxSection , " compilation_database_format " , CxxCompilationDatabaseFormat . class ) <nl> - . or ( CxxCompilationDatabaseFormat . NUCLIDE ) ; <nl> + . or ( CxxCompilationDatabaseFormat . CLANG ) ; <nl> } <nl> } <nl>   } 
public class OutputChannel extends Channel { public void test ( ) { <nl> <nl> if ( buffer . size ( ) == 0 ) { <nl> + buffer . recycleBuffer ( ) ; <nl> return ; <nl> } <nl>   } } 
public class CoordinatorLayout extends ViewGroup implements NestedScrollingParen <nl> <nl> <nl> <nl> - <nl> + <nl> { public Behavior getBehavior ( ) { { <nl> return mBehavior ; <nl> } <nl>   } } 
public class ClipboardManager extends android . text . ClipboardManager { <nl> <nl> public boolean hasText ( ) { <nl> try { <nl> - return getService ( ) . hasPrimaryClip ( ) ; <nl> + return getService ( ) . hasClipboardText ( ) ; <nl> } catch ( RemoteException e ) { <nl> return false ; <nl> } <nl>   } } 
public class RedissonLockEntry { <nl> public RedissonLockEntry ( Promise < Boolean > promise ) { <nl> super ( ) ; <nl> - this . latch = new Semaphore ( 1 ) ; <nl> + this . latch = new Semaphore ( 0 ) ; <nl> this . promise = promise ; <nl> } <nl>   } 
import org . junit . Test ; <nl> import cucumber . runtime . RuntimeOptions ; <nl> - <nl> <nl> <nl> public class RuntimeOptionsFactoryTest <nl> { public void test ( ) { <nl> <nl>   } } 
public class FlowManager { <nl> <nl> public static synchronized void destroy ( ) { <nl> context = null ; <nl> + mDatabaseHolder = null ; <nl> } <nl> <nl>   } 
public class AccessCanBeTightenedInspection extends BaseJavaBatchLocalInspection <nl> <nl> <nl> { public String getGroupDisplayName ( ) { { <nl> - return GroupNames . CLASS_LAYOUT_GROUP_NAME ; <nl> + return GroupNames . VISIBILITY_GROUP_NAME ; <nl> } <nl> <nl>   } } 
public final class Settings { <nl> <nl> public static final String [ ] CLONE_TO_MANAGED_PROFILE = { <nl> DATE_FORMAT , <nl> + HAPTIC_FEEDBACK_ENABLED , <nl> + SOUND_EFFECTS_ENABLED , <nl> + TEXT_SHOW_PASSWORD , <nl> TIME_12_24 <nl> } ; <nl>   } 
public class CodeFormatterFacade implements Constants { <nl> <nl> private boolean useNewFormatter ( FileType fileType ) { <nl> - return true ; <nl> + return fileType instanceof LanguageFileType ; <nl> } <nl> private ASTNode processRange ( ASTNode element , int [ ] bounds ) { <nl>   } } 
public class MetaDataMappingService extends AbstractComponent { <nl> <nl> public void onAckTimeout ( ) { <nl> - listener . onResponse ( new ClusterStateUpdateResponse ( true ) ) ; <nl> + listener . onResponse ( new ClusterStateUpdateResponse ( false ) ) ; <nl> } <nl> <nl>   } 
final class ActivityStack { public void test ( ) { <nl> mWindowManager . moveTaskToTop ( tr . taskId ) ; <nl> + mLastPausedActivity = null ; <nl> mStackSupervisor . resumeTopActivitiesLocked ( ) ; <nl> EventLog . writeEvent ( EventLogTags . AM_TASK_TO_FRONT , tr . userId , tr . taskId ) ; <nl>   } } 
public class BroadcastFilterTest { <nl> <nl> } <nl> - private final static class Filter implements BroadcastFilter { <nl> + public final static class Filter implements BroadcastFilter { <nl> final String msg ; <nl>   } } 
public class BinaryMapIndexReader { <nl> ; <nl> - <nl> - <nl> private final RandomAccessFile raf ; <nl> protected final File file ; <nl> <nl>   } 
public class Tmp { public interface Exchange { <nl> String GROUPED_EXCHANGE = " CamelGroupedExchange " ; <nl> + String HTTP_BASE_URI = " CamelHttpBaseUri " ; <nl> String HTTP_CHARACTER_ENCODING = " CamelHttpCharacterEncoding " ; <nl> String HTTP_METHOD = " CamelHttpMethod " ; <nl> String HTTP_PATH = " CamelHttpPath " ; <nl>   } } 
public class ActionBarView extends AbsActionBarView { <nl> <nl> public void setLogo ( int resId ) { <nl> - mContext . getResources ( ) . getDrawable ( resId ) ; <nl> + setLogo ( mContext . getResources ( ) . getDrawable ( resId ) ) ; <nl> } <nl> <nl>   } 
public class AccessibilityNodeInfo implements Parcelable { public void test ( ) { <nl> } <nl> <nl> <nl> <nl> <nl> <nl> <nl>   } 
public class BlockInStream extends InStream { <nl> private InputStream mCheckpointInputStream = null ; <nl> private long mCheckpointReadByte ; <nl> + private BlockOutStream mBlockOutStream = null ; <nl> + <nl> private boolean mClosed = false ; <nl> BlockInStream ( TachyonFile file , ReadType readType , int blockIndex ) throws IOException { <nl>   } } 
public class addAccount extends Activity { public void test ( ) { <nl> boolean success = false ; <nl> if ( blogName == " " ) { <nl> - blogName = " ( No Blog Title ) " ; <nl> + blogNames [ blogCtr ] = " ( No Blog Title ) " ; <nl> } <nl> boolean wpcomFlag = false ; <nl>   } } 
public class FileTypeIndex extends ScalarIndexExtension < FileType > <nl> <nl> { public boolean dependsOnFileContent ( ) { { <nl> - return true ; <nl> + return false ; <nl> } <nl> <nl>   } } 
import java . util . Arrays ; <nl> import java . util . List ; <nl> import javax . security . auth . login . LoginContext ; <nl> - import javax . security . auth . login . LoginException ; <nl> import org . apache . catalina . Realm ; <nl>   
public class EntityMechanicalArm extends Entity implements IEntityAdditionalSpaw <nl> { public EntityMechanicalArm ( World world ) { <nl> super ( world ) ; <nl> - Thread . dumpStack ( ) ; <nl> makeParts ( world ) ; <nl> <nl> dataWatcher . addObject ( 2 , 1 ) ; <nl>   } } 
public class PyExtractSuperclassDialog extends UpDirectedMembersMovingDialog { <nl> <nl> protected String getHelpId ( ) { <nl> - return " refactoring . extract . superclass . dialog " ; <nl> + return " python . reference . extractSuperclass " ; <nl> } <nl> <nl>   } 
public class Authentication extends Model { <nl> private boolean valid ; <nl> - public boolean isValid ( ) { <nl> + } public boolean isValid ( ) { <nl> return valid ; <nl> } <nl>   } 
public abstract class PGL { <nl> <nl> + <nl> + public void requestFBOLayer ( ) { <nl> + enableFBOLayer ( ) ; <nl> + } <nl> + <nl> + <nl> public void enableFBOLayer ( ) { <nl> fboLayerEnabledReq = true ; <nl> } <nl>   } 
public class Http11NioProtocol extends AbstractHttp11JsseProtocol < NioChannel > { <nl> <nl> public int getPollerThreadPriority ( ) { <nl> - return ( ( NioEndpoint ) getEndpoint ( ) ) . getThreadPriority ( ) ; <nl> + return ( ( NioEndpoint ) getEndpoint ( ) ) . getPollerThreadPriority ( ) ; <nl> } <nl>   } 
public class DeltaRequest implements Externalizable { public void test ( ) { <nl> } <nl> <nl> <nl> <nl> <nl> <nl>   } 
public class HighlightableComponent extends JComponent { public void test ( ) { <nl> <nl> + UIUtil . applyRenderingHints ( g ) ; <nl> FontMetrics defFontMetrics = getFontMetrics ( getFont ( ) ) ; <nl> if ( myText == null ) { <nl>   } } } 
public class HitTest { public void test ( ) { <nl> o1 . setFilename ( " bar " ) ; <nl> assertFalse ( o2 . equals ( o1 ) ) ; <nl> assertFalse ( o1 . equals ( o2 ) ) ; <nl> + assertFalse ( o1 . equals ( new Object ( ) ) ) ; <nl> } <nl> <nl>   } 
public class HomeActivity extends Activity { <nl> <nl> - boolean mExpanded = true ; <nl> - <nl> <nl> public void onResume ( ) { <nl> super . onResume ( ) ; <nl>   } } 
import cpw . mods . fml . common . registry . LanguageRegistry ; <nl> public class ModLoader <nl> { <nl> + public static final String fmlMarker = " This is an FML marker " ; <nl> <nl> <nl> <nl>   } 
import java . io . File ; <nl> public class GroovycTask <nl> extends CompileTaskSupport <nl> { <nl> - private boolean force ; <nl> + protected boolean force ; <nl> public void setForce ( final boolean flag ) { <nl> this . force = flag ; <nl>   } } 
public class ImageWallpaper extends WallpaperService { <nl> private static final boolean DEBUG = false ; <nl> static final boolean FIXED_SIZED_SURFACE = true ; <nl> - static final boolean USE_OPENGL = false ; <nl> + static final boolean USE_OPENGL = true ; <nl> WallpaperManager mWallpaperManager ; <nl>   } 
public class View implements Drawable . Callback2 , KeyEvent . Callback , Accessibilit <nl> <nl> <nl> { public void setBackgroundDrawable ( Drawable d ) { <nl> + if ( d == mBGDrawable ) { <nl> + return ; <nl> + } <nl> + <nl> boolean requestLayout = false ; <nl> mBackgroundResource = 0 ; <nl>   } } 
public class FileListListAdapter extends BaseAdapter implements ListAdapter { public void test ( ) { { { <nl> } <nl> } <nl> - <nl> break ; <nl> } <nl>   } 
public class MenuDrawer extends ViewGroup { public void test ( ) { { <nl> Bundle state = ( Bundle ) in ; <nl> final boolean menuOpen = state . getBoolean ( STATE_MENU_VISIBLE ) ; <nl> setContentLeft ( menuOpen ? mMenuWidth : 0 ) ; <nl> + mDrawerState = menuOpen ? STATE_OPEN : STATE_CLOSED ; <nl> } <nl> } <nl>   } 
public class HistoryEntry { public void test ( ) { <nl> if ( date != null ) { <nl> this . date = ( Date ) date . clone ( ) ; <nl> } else { <nl> - date = null ; <nl> + this . date = null ; <nl> } <nl> } <nl>   } 
public class DataFlowRunner { public void test ( ) { { <nl> for ( DfaVariableValue value : vars ) { <nl> copy . flushDependencies ( value ) ; <nl> } <nl> + copy . emptyStack ( ) ; <nl> return copy ; <nl> } <nl> } <nl>   } 
import android . graphics . Bitmap ; <nl> <nl> public class WebHistoryItem implements Cloneable { <nl> - <nl> + <nl> <nl> <nl> + public WebHistoryItem ( ) { <nl> } <nl> <nl>   } 
public class TextIconGenerator { public void test ( ) { <nl> switch ( style ) { <nl> case STYLE_DEFAULT : <nl> case STYLE_WHITE : <nl> - return R . drawable . bubble_white ; <nl> + return R . style . Bubble_TextAppearance_Dark ; <nl> case STYLE_RED : <nl> case STYLE_BLUE : <nl> case STYLE_GREEN : <nl>   } } } 
public class AstCache { <nl> public void close ( ) { <nl> parser . close ( ) ; <nl> - clearDiskCache ( ) ; <nl> + <nl> } <nl>   } 
public class ApplicationServletRegistration <nl> <nl> { public String getClassName ( ) { { <nl> return wrapper . getServletClass ( ) ; <nl> - } <nl> + } <nl> <nl> public String getInitParameter ( String name ) { <nl>   } } 
public class PortletKeys { <nl> public static final String DOCUMENT_LIBRARY_DISPLAY = " 110 " ; <nl> public static final String DOCUMENT_SELECTOR = <nl> - " com_liferay_documentselector_web_portlet_DocumentSelectorPortlet " ; <nl> + " com_liferay_document_selector_web_portlet_DocumentSelectorPortlet " ; <nl> public static final String DYNAMIC_DATA_LIST_DISPLAY = " 169 " ; <nl>   } 
public class NodePencil implements Tool { <nl> public NodePencil ( ) { <nl> <nl> color = Color . BLACK ; <nl> - size = 1f ; <nl> + size = 10f ; <nl> } <nl> public void select ( ) { <nl>   } } 
public class BatteryProperty implements Parcelable { <nl> public static final int BATTERY_PROP_CHARGE_COUNTER = 1 ; <nl> public static final int BATTERY_PROP_CURRENT_NOW = 2 ; <nl> public static final int BATTERY_PROP_CURRENT_AVG = 3 ; <nl> + public static final int BATTERY_PROP_CAPACITY = 4 ; <nl> public int valueInt ; <nl>   } 
public interface CommonClassNames { public void test ( ) { <nl> String CLASS_FILE_EXTENSION = " . class " ; <nl> String JAVA_LANG_STRING_SHORT = " String " ; <nl> + <nl> + String JAVA_UTIL_CONCURRENT_FUTURE = " java . util . concurrent . Future " ; <nl> } <nl>   } 
<nl> package zmq ; <nl> - import java . util . ArrayList ; <nl> import java . util . Iterator ; <nl> import java . util . Map ; <nl> import java . util . Map . Entry ; <nl>   
public class DataStructures { <nl> private static Integer [ ] unsorted = null ; <nl> private static String string = null ; <nl> private static boolean debug = false ; <nl> - private static boolean debugTime = true ; <nl> + private static boolean debugTime = false ; <nl> public static void main ( String [ ] args ) { <nl>   } } 
public class TestsuiteSanityTestCase { public void test ( ) { <nl> } <nl> + <nl>   } 
public class ContextConfig implements LifecycleListener { <nl> <nl> private String getJaspicAppContext ( ) { <nl> + <nl> return context . getServletContext ( ) . getVirtualServerName ( ) + " " + context . getPath ( ) ; <nl> } <nl>   } 
public class MenuDrawer extends ViewGroup { public void test ( ) { { <nl> break ; <nl> <nl> + Log . d ( TAG , " [ DrawerState ] Unknown : " + state ) ; <nl> } <nl> } <nl>   } 
public class Tmp { public enum Material { <nl> NETHER_BRICK ( 112 ) , <nl> NETHER_FENCE ( 113 ) , <nl> NETHER_BRICK_STAIRS ( 114 ) , <nl> - NETHER_WATER ( 115 ) , <nl> + NETHER_WARTS ( 115 ) , <nl> ENCHANTMENT_TABLE ( 116 ) , <nl> BREWING_STAND ( 117 ) , <nl> CAULDRON ( 118 ) , <nl>   } } 
public class DrawableContainer extends Drawable implements Drawable . Callback { <nl> private long mExitAnimationEnd ; <nl> private Drawable mLastDrawable ; <nl> - private Insets mInsets ; <nl> + private Insets mInsets = Insets . NONE ; <nl> <nl>   } 
import java . lang . reflect . Field ; <nl> <nl> public abstract class AbstractViewModel { <nl> public void unsubscribe ( ) { { <nl> + SubscriptionAnnotationUtils . unsubscribeAllAnnotated ( this ) ; <nl> } <nl> } <nl>   } 
public class EditPostActivity extends Activity { <nl> private static int PAGE_SETTINGS = 1 ; <nl> private static int PAGE_PREVIEW = 2 ; <nl> - private static final int AUTOSAVE_INTERVAL_MILLIS = 30000 ; <nl> + private static final int AUTOSAVE_INTERVAL_MILLIS = 5000 ; <nl> private Handler mAutoSaveHandler ; <nl> <nl>   } 
import java . util . regex . Pattern ; <nl> <nl> <nl> <nl> <nl> <nl> <nl> public class DefaultGroovyMethods { public void test ( ) { <nl>   } } 
public abstract class BSONReader implements Closeable { <nl> <nl> } <nl> - protected enum State { <nl> + public enum State { <nl> <nl> <nl> <nl>   } } 
public class AsmClassGenerator extends ClassGenerator { <nl> <nl> public void visitTryCatchFinally ( TryCatchStatement statement ) { <nl> - onLineNumber ( statement , " visitTryCatchFinally " ) ; <nl> visitStatement ( statement ) ; <nl> MethodVisitor mv = controller . getMethodVisitor ( ) ; <nl> CompileStack compileStack = controller . getCompileStack ( ) ; <nl>   } } 
class DatabaseHelper extends SQLiteOpenHelper { <nl> private void executeSqlScript ( SQLiteDatabase db , String file ) { <nl> Log . d ( Params . LOGGING_TAG , file ) ; <nl> + db . execSQL ( file ) ; <nl> } <nl> private static void createTable ( SQLiteDatabase db , Class < ? extends ActiveRecordBase < ? > > table ) { <nl>   } } 
import net . minecraft . src . ItemStack ; <nl> public class LiquidManager { <nl> + public static final int BUCKET_VOLUME = 1000 ; <nl> public static LinkedList < LiquidData > liquids = new LinkedList < LiquidData > ( ) ; <nl> public static LiquidStack getLiquidForFilledItem ( ItemStack filledItem ) { <nl>   } } 
public class LambdaExpression { public void test ( ) { <nl> if ( formalParamCount > argCount ) { <nl> throw new ELException ( Util . message ( context , <nl> - " error . lambda . args . tooFew " , <nl> + " lambdaExpression . tooFewArgs " , <nl> Integer . valueOf ( argCount ) , <nl> Integer . valueOf ( formalParamCount ) ) ) ; <nl> } <nl>   } } 
public class ParserAnnotator implements Annotator { <nl> <nl> public Set < Requirement > requires ( ) { <nl> - return TOKENIZE_AND_SSPLIT ; <nl> + return parser . requiresTags ( ) ? TOKENIZE_SSPLIT_POS : TOKENIZE_AND_SSPLIT ; <nl> } <nl> <nl>   } 
public class ExportImportImpl implements ExportImport { public void test ( ) { <nl> portletDataContext . addReferenceElement ( <nl> entityStagedModel , entityElement , fileEntry , <nl> - FileEntry . class , <nl> + DLFileEntry . class , <nl> PortletDataContext . REFERENCE_TYPE_DEPENDENCY , <nl> ! exportReferencedContent ) ; <nl>   } } 
public class TestBatchInsert <nl> <nl> <nl> + <nl> { public void makeSureLoopsCanBeCreated ( ) <nl> { <nl> BatchInserter graphDb = newBatchInserter ( ) ; <nl>   } } 
import tachyon . worker . WorkerContext ; <nl> <nl> public final class LocalTachyonCluster extends AbstractLocalTachyonCluster { <nl> private LocalTachyonMaster mMaster ; <nl> - private TachyonConf mClientConf ; <nl> <nl> <nl>   } 
import android . app . FragmentManager ; <nl> import android . content . Context ; <nl> import android . support . v13 . app . FragmentPagerAdapter ; <nl> - <nl> public class SampleAdapter extends FragmentPagerAdapter { <nl> Context ctxt = null ; <nl>   } 
public class ProtocolProviderServiceJabberImpl <nl> <nl> { public SmackServiceNode getJingleNodesServiceNode ( ) <nl> { { <nl> - return jingleNodesServiceNode ; <nl> + synchronized ( jingleNodesSyncRoot ) <nl> + { <nl> + return jingleNodesServiceNode ; <nl> + } <nl> } <nl> <nl>   } } 
package com . ning . billing . account ; <nl> import com . ning . billing . KillbillTestSuite ; <nl> - public class AccountTestSuite extends KillbillTestSuite { <nl> + public abstract class AccountTestSuite extends KillbillTestSuite { <nl> } <nl>   } 
public class Auth <nl> <nl> { public static void setup ( ) <nl> { <nl> + if ( DatabaseDescriptor . getAuthenticator ( ) instanceof AllowAllAuthenticator ) <nl> + return ; <nl> + <nl> setupAuthKeyspace ( ) ; <nl> setupUsersTable ( ) ; <nl>   } } 
public class NotificationCompat { public void test ( ) { <nl> CharSequence mContentInfo ; <nl> int mNumber ; <nl> int mPriority ; <nl> - boolean mShowWhen ; <nl> + boolean mShowWhen = true ; <nl> boolean mUseChronometer ; <nl> Style mStyle ; <nl> CharSequence mSubText ; <nl>   } } 
public abstract class MasterDetailsComponent implements Configurable , DetailsCom <nl> <nl> { public JComponent createComponent ( ) { <nl> + myTree . updateUI ( ) ; <nl> reInitWholePanelIfNeeded ( ) ; <nl> updateSelectionFromTree ( ) ; <nl>   } } 
public final class Multimaps { public void test ( ) { <nl> <nl> } <nl> - <nl>   } 
class EmbeddedChannel extends AbstractChannel { <nl> <nl> <nl> - protected int doRead ( ) throws Exception { <nl> + protected int doRead ( ChannelBufferHolder < Object > buf ) throws Exception { <nl> return 0 ; <nl> } <nl>   } } 
import java . util . Random ; <nl> <nl> public class ControlledRandom extends Random { <nl> public ControlledRandom ( ) { <nl> - super ( ) ; <nl> + super ( 123 ) ; <nl> } <nl> <nl> <nl>   } 
public class SingleInspectionProfilePanel extends JPanel { <nl> <nl> protected void onScopeAdded ( ) { <nl> + myTreeTable . getTree ( ) . updateUI ( ) ; <nl> updateOptionsAndDescriptionPanel ( ) ; <nl> } <nl> } ; <nl>   
public class MyListActivity extends ListActivity { <nl> String [ ] bestFoods ; <nl> <nl> - MyBaseAdapter adapter ; <nl> + ListAdapter adapter ; <nl> <nl> protected void onCreate ( Bundle savedInstanceState ) { <nl>   } } 
public class ListScrollingUtil { public void test ( ) { <nl> Rectangle cellBounds = list . getCellBounds ( top , bottom ) ; <nl> if ( cellBounds != null ) { <nl> cellBounds . x = 0 ; <nl> - cellBounds . y = 0 ; <nl> list . scrollRectToVisible ( cellBounds ) ; <nl> } <nl> } <nl>   } 
public class GroupRole extends BaseIdentifiable { <nl> <nl> public boolean isAnyone ( ) { <nl> - return groupId == ANYONE_GROUP_ID ; <nl> + return groupId == null ; <nl> } <nl> <nl>   } 
public class SubscriptionInfo implements Parcelable { <nl> private CharSequence mDisplayName ; <nl> <nl> <nl> <nl> <nl> <nl> private CharSequence mCarrierName ; <nl>   } 
public class TCKTest { public void test ( ) { { <nl> Config conf = FluxMain . buildConfig ( topologyDef ) ; <nl> StormTopology topology = FluxMain . buildTopology ( topologyDef ) ; <nl> assertNotNull ( topology ) ; <nl> - <nl> + topology . validate ( ) ; <nl> } <nl> } <nl>   } 
public class IconTag extends IncludeTag { public void test ( ) { { <nl> id = PortalUtil . generateRandomKey ( request , IconTag . class . getName ( ) ) ; <nl> } <nl> + id = HtmlUtil . getAUICompatibleId ( id ) ; <nl> + <nl> return id ; <nl> } <nl>   } 
package org . json ; <nl> <nl> <nl> <nl> <nl> <nl> <nl> public class JSONException extends RuntimeException { public void test ( ) { <nl> <nl>   } } 
public abstract class Constant { <nl> <nl> - <nl> <nl> public String toString ( ) { <nl> return " [ " + tag + " ] " ; <nl>   } } 
public class SPTWalker { public void test ( ) { <nl> <nl> if ( speed > avgSpeed ) <nl> speed = avgSpeed ; <nl> - speed = avgSpeed ; <nl> } <nl> <nl>   } 
public class LayoutManager extends RecyclerView . LayoutManager { public void test ( ) { <nl> isHeader = a . getBoolean ( <nl> R . styleable . superslim_LayoutManager_slm_isHeader , <nl> false ) ; <nl> + <nl> headerDisplay = a . getInt ( <nl> R . styleable . superslim_LayoutManager_slm_headerDisplay , <nl> DEFAULT_HEADER_DISPLAY ) ; <nl>   } } 
public class PhoneStatusBar extends BaseStatusBar { <nl> <nl> public void createAndAddWindows ( ) { <nl> addStatusBarWindow ( ) ; <nl> - addExpandedWindow ( ) ; <nl> } <nl> private void addStatusBarWindow ( ) { <nl>   } } 
public class Main { public void test ( ) { <nl> if ( options . has ( HELP ) ) { <nl> parser . printHelpOn ( System . out ) ; <nl> + exitWithSuccess ( options ) ; <nl> } <nl> configureLogger ( options ) ; <nl>   } } 
public class FindMethodDuplicatesTest extends LightCodeInsightTestCase { <nl> <nl> protected Sdk getProjectJDK ( ) { <nl> - return JavaSdkImpl . getMockJdk ( " java 1 . 5 " ) ; <nl> + return JavaSdkImpl . getMockJdk15 ( " java 1 . 5 " ) ; <nl> } <nl> private void doTest ( ) throws Exception { <nl>   } } 
class IInputMethodSessionWrapper extends IInputMethodSession . Stub <nl> <nl> { public void executeMessage ( Message msg ) { <nl> + if ( mInputMethodSession == null ) return ; <nl> + <nl> switch ( msg . what ) { <nl> case DO_FINISH_INPUT : <nl> mInputMethodSession . finishInput ( ) ; <nl>   } } } 
public class BatteryProperty implements Parcelable { <nl> <nl> public static final int BATTERY_PROP_CHARGE_COUNTER = 1 ; <nl> public static final int BATTERY_PROP_CURRENT_NOW = 2 ; <nl> + public static final int BATTERY_PROP_CURRENT_AVG = 3 ; <nl> public int valueInt ; <nl>   } 
public class TestTomcatClassLoader extends TomcatBaseTest { <nl> private static final class ClassLoaderReport extends HttpServlet { <nl> private static final long serialVersionUID = 1L ; <nl> - ClassLoader custom ; <nl> + private transient ClassLoader custom ; <nl> public ClassLoaderReport ( ClassLoader custom ) { <nl> this . custom = custom ; <nl>   } } } 
package org . geometerplus . android . fbreader ; <nl> import java . util . LinkedList ; <nl> import android . app . SearchManager ; <nl> + import android . content . Content ; <nl> import android . content . Intent ; <nl> import android . net . Uri ; <nl> import android . os . Bundle ; <nl>   
public class NetworkIdentity { <nl> <nl> public int hashCode ( ) { <nl> - return Objects . hashCode ( mType , mSubType , mSubscriberId ) ; <nl> + return Objects . hashCode ( mType , mSubType , mSubscriberId , mRoaming ) ; <nl> } <nl> <nl>   } 
<nl> <nl> <nl> - public class PlaceHolder { <nl> + public class PlaceHolder { } <nl>   } 
public class TestDistributeConfigSerialization extends AbstractServerClusterTest <nl> <nl> { public void test ( ) throws Exception { { <nl> - init ( 2 ) ; <nl> + init ( 1 ) ; <nl> execute ( ) ; <nl> } <nl>   } } 
import junit . framework . TestCase ; <nl> import edu . stanford . nlp . parser . lexparser . LexicalizedParser ; <nl> import edu . stanford . nlp . tagger . maxent . MaxentTagger ; <nl> - import org . junit . Test ; <nl> <nl> <nl>   
public class FMLCommonHandler <nl> { public boolean shouldServerBeKilledQuietly ( ) <nl> { { <nl> + if ( sidedDelegate == null ) <nl> + { <nl> + return false ; <nl> + } <nl> return sidedDelegate . shouldServerShouldBeKilledQuietly ( ) ; <nl> } <nl>   } } 
public class ShadowTextView extends ShadowView { <nl> <nl> public void setText ( int textResourceId ) { <nl> this . text = getResources ( ) . getText ( textResourceId ) ; <nl> - System . out . println ( text ) ; <nl> } <nl> <nl>   } 
public class CallbackProxy extends Handler implements EventSender , LayoutTestCon <nl> <nl> { public void clearAllDatabases ( ) { <nl> - WebStorage . getInstance ( ) . deleteAllDatabases ( ) ; <nl> + WebStorage . getInstance ( ) . deleteAllData ( ) ; <nl> } <nl> public void setDatabaseQuota ( long quota ) { <nl>   } } 
import antlr . LexerSharedInputState ; <nl> <nl> <nl> <nl> <nl> <nl> public class UnicodeLexerSharedInputState extends LexerSharedInputState { <nl> private final UnicodeEscapingReader escapingReader ; <nl>   } 
public class SpringLoadedPositionManager implements PositionManager { public void test ( ) { { { <nl> } <nl> } <nl> + if ( element != null ) { <nl> + return getClassNameForJvm ( ( PsiClass ) element ) ; <nl> + } <nl> + <nl> return null ; <nl> } <nl>   } 
public class DatePicker extends FrameLayout { public void test ( ) { <nl> mYear = ss . getYear ( ) ; <nl> mMonth = ss . getMonth ( ) ; <nl> mDay = ss . getDay ( ) ; <nl> + updateSpinners ( ) ; <nl> } <nl> <nl>   } 
public class Tmp { public enum BSONType { <nl> MAX_KEY ( 0x7f ) ; <nl> private static final BSONType [ ] LOOKUP_TABLE = new BSONType [ MIN_KEY . getValue ( ) + 1 ] ; <nl> - <nl> private final int value ; <nl> static { <nl>   } } } 
import tachyon . conf . TachyonConf ; <nl> public final class Version { <nl> public static final String VERSION ; <nl> - private Version ( ) { } <nl> + private Version ( ) { } <nl> static { <nl> TachyonConf tachyonConf = new TachyonConf ( ) ; <nl>   } } 
public class Stage extends InputAdapter implements Disposable { <nl> public void reset ( ) { { { <nl> listenerActor = null ; <nl> listener = null ; <nl> + target = null ; <nl> } <nl> } <nl> } <nl>   } 
public class GenericExporter { public void test ( ) { <nl> } <nl> <nl> <nl> <nl> <nl> <nl> <nl>   } 
import tachyon . TachyonURI ; <nl> import tachyon . conf . TachyonConf ; <nl> import tachyon . thrift . InvalidPathException ; <nl> import tachyon . underfs . UnderFileSystem ; <nl> + <nl> import sun . misc . Cleaner ; <nl> import sun . nio . ch . DirectBuffer ; <nl>   
package org . graylog2 . messagehandlers . gelf ; <nl> - import java . io . IOException ; <nl> import java . net . DatagramPacket ; <nl> import java . util . concurrent . ExecutorService ; <nl> import java . util . concurrent . Executors ; <nl>   
import io . realm . RealmChangeListener ; <nl> import io . realm . RealmList ; <nl> - public class RealmTest extends AndroidTestCase { <nl> + public class ParameterizedTestExample extends AndroidTestCase { <nl> private Realm realm ; <nl>   } } 
public class ResourceBundleRenameUtil { <nl> <nl> public boolean checkInput ( final String inputString ) { <nl> - return inputString . indexOf ( ' . ' ) < 0 ; <nl> + return true ; <nl> } <nl> <nl>   } 
public class ThemePreviewFragment extends Fragment { public void test ( ) { <nl> mWebView . getSettings ( ) . setCacheMode ( WebSettings . LOAD_NO_CACHE ) ; <nl> mWebView . getSettings ( ) . setSavePassword ( false ) ; <nl> + mWebView . getSettings ( ) . setJavaScriptEnabled ( true ) ; <nl> loadAuthenticatedUrl ( previewURL ) ; <nl>   } } 
public class MediaPlayer <nl> <nl> <nl> <nl> <nl> <nl> <nl> { public native boolean isPlaying ( ) ; <nl>   } 
public abstract class WsRemoteEndpointImplBase implements RemoteEndpoint { <nl> <nl> <nl> <nl> <nl> private static class OutputBufferFlushSendHandler implements SendHandler { <nl>   } } 
package tachyon . master . next . filesystem ; <nl> - import java . io . FileNotFoundException ; <nl> import java . io . IOException ; <nl> import java . util . ArrayList ; <nl> import java . util . Collections ; <nl>   
public class PApplet extends Activity implements PConstants , Runnable { <nl> public void onDestroy ( ) { <nl> System . out . println ( " PApplet . onDestroy ( ) called " ) ; <nl> super . onDestroy ( ) ; <nl> + finish ( ) ; <nl> } <nl>   } 
public class XmppConnectionService extends Service { <nl> <nl> public void deleteAccount ( Account account ) { <nl> - Log . d ( LOGTAG , " called delete account " ) ; <nl> if ( account . getXmppConnection ( ) != null ) { <nl> this . disconnect ( account , true ) ; <nl> } <nl>   } } 
public class MapConfig implements DataSerializable { <nl> private StorageType storageType = null ; <nl> - private boolean statisticsEnabled = false ; <nl> + private boolean statisticsEnabled = true ; <nl> public enum InMemoryFormat { <nl> BINARY , OBJECT , CACHED <nl>   } } 
public class RedissonConcurrentMapTest extends BaseConcurrentTest { public void test ( ) { { <nl> } <nl> assertMapSize ( 5 , name ) ; <nl> - redisson . getKeys ( ) . flushdb ( ) ; <nl> - redisson . shutdown ( ) ; <nl> } <nl> <nl>   } 
public class PSurfaceNEWT implements PSurface { public void test ( ) { { <nl> System . err . println ( " 3 . set size " ) ; <nl> sketchWidth = sketch . width = width ; <nl> sketchHeight = sketch . height = height ; <nl> + graphics . setSize ( width , height ) ; <nl> } <nl> } <nl>   } 
public class MockFactory < T > { public void test ( ) { <nl> <nl> <nl> + <nl> enhancer . setClassLoader ( MockFactory . class . getClassLoader ( ) ) ; <nl> return enhancer ; <nl>   } } 
public class StreamStateMachine { <nl> public synchronized void closeIfIdle ( ) { <nl> - if ( state == State . IDLE ) { <nl> - state = State . CLOSED_FINAL ; <nl> - } <nl> + stateChange ( State . IDLE , State . CLOSED_FINAL ) ; <nl> } <nl>   } 
public class VideoEditorImpl implements VideoEditor { public void test ( ) { <nl> <nl> int height = 480 ; <nl> int width = 854 ; <nl> - switch ( getAspectRatio ( ) ) { <nl> + switch ( mI . getAspectRatio ( ) ) { <nl> case MediaProperties . ASPECT_RATIO_3_2 : <nl> width = 720 ; <nl> break ; <nl>   } } } } 
class InstallPluginCommand extends CliTool . Command { public void test ( ) { { { <nl> zipInput . closeEntry ( ) ; <nl> } <nl> } <nl> + Files . delete ( zip ) ; <nl> return target ; <nl> } <nl>   } 
public class DataStructures { <nl> private static Integer [ ] unsorted = null ; <nl> private static String string = null ; <nl> private static boolean debug = false ; <nl> - private static boolean debugTime = true ; <nl> + private static boolean debugTime = false ; <nl> public static void main ( String [ ] args ) { <nl>   } } 
public final class AnimChannel { public void test ( ) { { { <nl> } <nl> } <nl> animation = null ; <nl> - <nl> notified = false ; <nl> } <nl>   } 
public class MustacheWriter extends Writer { <nl> private static ExecutorService es = Executors . newCachedThreadPool ( ) ; <nl> private Writer writer ; <nl> - protected MustacheWriter ( Writer writer ) { <nl> + public MustacheWriter ( Writer writer ) { <nl> this . writer = writer ; <nl> } <nl>   } } 
public class GraphCommitCellRender extends AbstractPaddingCellRender { <nl> <nl> private GraphCommitCell getAssertGraphCommitCell ( Object value ) { <nl> - assert value instanceof GraphCommitCell ; <nl> return ( GraphCommitCell ) value ; <nl> } <nl>   } 
public class JSError { <nl> public final String sourceName ; <nl> <nl> - final Node node ; <nl> + public final Node node ; <nl> <nl> public final int lineNumber ; <nl>   } 
public class ImportingJob implements Jsonizable { public void test ( ) { <nl> JSONUtilities . safePut ( cfg , " hasData " , false ) ; <nl> this . config = cfg ; <nl> + lastTouched = System . currentTimeMillis ( ) ; <nl> + <nl> dir . mkdirs ( ) ; <nl> } <nl>   } 
public class ProcessorUtility implements ControllerListener { <nl> <nl> public synchronized boolean waitForState ( Processor processor , int state ) <nl> { <nl> - System . out . println ( " d1 " ) ; <nl> processor . addControllerListener ( this ) ; <nl> setFailed ( false ) ; <nl>   } } 
public class KeyguardUpdateMonitor { public void test ( ) { <nl> <nl> mSimState = IccCard . State . READY ; <nl> - mBatteryStatus = BATTERY_STATUS_FULL ; <nl> + mBatteryStatus = BATTERY_STATUS_UNKNOWN ; <nl> mBatteryLevel = 100 ; <nl> mTelephonyPlmn = getDefaultPlmn ( ) ; <nl>   } } 
import org . apache . commons . lang . builder . HashCodeBuilder ; <nl> <nl> public class FieldModifiers { <nl> - String one ; <nl> + public String one ; <nl> String two ; <nl> protected String three ; <nl> private String four ; <nl>   } 
class TemplateParser { <nl> <nl> protected void onValue ( DbSqlBuilder sqlBuilder , String expression ) { <nl> - sqlBuilder . value ( expression ) ; <nl> + sqlBuilder . colvalue ( expression ) ; <nl> } <nl>   } 
import com . liferay . portal . kernel . exception . PortalException ; <nl> <nl> <nl> <nl> + <nl> public class ReservedUserScreenNameException extends PortalException { <nl> public ReservedUserScreenNameException ( ) { <nl>   } } 
public class ImageListActivity extends AbsListViewBaseActivity { public void test ( ) { { <nl> if ( firstDisplay ) { <nl> FadeInBitmapDisplayer . animate ( imageView , 500 ) ; <nl> displayedImages . add ( imageUri ) ; <nl> - } else { <nl> - imageView . setImageBitmap ( loadedImage ) ; <nl> } <nl> } <nl> } <nl>   } 
public final class EmbeddedNeo implements NeoService <nl> { public EmbeddedNeo ( String storeDir ) <nl> { { <nl> - <nl> + this . shellServer = null ; <nl> + NeoJvmInstance . start ( null , storeDir , true ) ; <nl> } <nl> <nl>   } } 
public class DrmManagerClient { <nl> <nl> public int acquireRights ( DrmInfoRequest drmInfoRequest ) { <nl> DrmInfo drmInfo = acquireDrmInfo ( drmInfoRequest ) ; <nl> + if ( null == drmInfo ) { <nl> + return ERROR_UNKNOWN ; <nl> + } <nl> return processDrmInfo ( drmInfo ) ; <nl> } <nl>   } 
public class TouchFeedbackDrawable extends LayerDrawable { public void test ( ) { <nl> if ( mActiveRipplesCount >= MAX_RIPPLES ) { <nl> Log . e ( LOG_TAG , " Max ripple count exceeded " , new RuntimeException ( ) ) ; <nl> + return ; <nl> } <nl> final Ripple ripple = mTouchedRipples . get ( id ) ; <nl>   } } 
public abstract class MasterBase implements Master { <nl> protected boolean isLeaderMode ( ) { <nl> return mIsLeader ; <nl> } <nl> - <nl> + <nl> protected boolean isStandbyMode ( ) { <nl> return ! mIsLeader ; <nl> } <nl>   } 
public class FastArray implements Cloneable { <nl> public Object [ ] getArray ( ) { <nl> return data ; <nl> } <nl> + <nl> + public String toString ( ) { <nl> + return toList ( ) . toString ( ) ; <nl> + } <nl> } <nl>   
import rx . plugins . RxJavaPlugins ; <nl> <nl> <nl> <nl> - public class Schedulers { <nl> + public final class Schedulers { <nl> private final Scheduler computationScheduler ; <nl> private final Scheduler ioScheduler ; <nl>   } } 
public class Allocation extends BaseObj { public void test ( ) { <nl> if ( typeID != 0 ) { <nl> mType = new Type ( typeID , mRS ) ; <nl> mType . updateFromNative ( ) ; <nl> + updateCacheInfo ( mType ) ; <nl> } <nl> } <nl>   } 
public class ActivityStack { public void test ( ) { { <nl> } <nl> if ( w > 0 ) { <nl> - return mService . mWindowManager . screenshotApplications ( w , h ) ; <nl> + <nl> } <nl> return null ; <nl> } <nl>   } 
public abstract class TWLayoutManager extends LayoutManager { <nl> <nl> public void scrollToPosition ( int position ) { <nl> - Log . d ( " BOOM " , " scrollToPosition called : " + position ) ; <nl> scrollToPositionWithOffset ( position , 0 ) ; <nl> } <nl>   } 
public class S3Client { public void test ( ) { { { <nl> } <nl> } <nl> - <nl> - <nl> - <nl> } <nl>   } 
public class MockBlock extends Block <nl> { <nl> public MockBlock ( int id ) <nl> { { <nl> - super ( id , Material . field_1316_v ) ; <nl> + super ( id , Material . field_76259_v ) ; <nl> } <nl> } <nl>   } 
public class OtpsEvaluatedIndividual { <nl> private OtpsIndividual individual ; <nl> - <nl> private long time ; <nl> private int boardings ; <nl>   } 
public class NewLineBlocksIterator implements Iterator < Block > { <nl> <nl> public void remove ( ) { { <nl> + throw new UnsupportedOperationException ( ) ; <nl> } <nl> } <nl>   } 
public class JazzyViewPager extends ViewPager { public void test ( ) { { { <nl> ViewHelper . setScaleY ( right , mScale ) ; <nl> ViewHelper . setTranslationX ( right , mTrans ) ; <nl> } <nl> + if ( left != null ) { <nl> + left . bringToFront ( ) ; <nl> + } <nl> } <nl> } <nl>   } 
public final class GitPusher { public void test ( ) { { { <nl> break ; <nl> } <nl> } <nl> + GitRepositoryManager . getInstance ( myProject ) . updateAllRepositories ( GitRepository . TrackedTopic . BRANCHES ) ; <nl> return pushResult ; <nl> } <nl>   } 
public class ConcurrentMapConfiguration extends AbstractConfiguration { <nl> <nl> <nl> - protected final void addPropertyDirect ( String key , Object value ) { <nl> + protected void addPropertyDirect ( String key , Object value ) { <nl> props . put ( key , value ) ; <nl> } <nl>   } } 
public class ZooClient extends AbstractZooKeeperManager <nl> <nl> { public void shutdown ( ) <nl> { { <nl> + msgLog . close ( ) ; <nl> this . shutdown = true ; <nl> super . shutdown ( ) ; <nl> } <nl>   } } 
import static com . zegoggles . smssync . App . TAG ; <nl> public class ThreadHelper { <nl> - private Class telephonyThreads ; <nl> + private Class < ? > telephonyThreads ; <nl> private Method getOrCreateThreadId ; <nl> private boolean threadsAvailable = true ; <nl>   } 
public class ShadowAdapterView extends ShadowViewGroup { <nl> <nl> <nl> - public Object getSelectedItem ( ) { <nl> + } public Object getSelectedItem ( ) { <nl> int pos = getSelectedItemPosition ( ) ; <nl> return getItemAtPosition ( pos ) ; <nl> } <nl>   } 
public final class GnssStatus { <nl> <nl> <nl> public float getElevationDegrees ( int satIndex ) { <nl> - return 0f ; <nl> + return mElevations [ satIndex ] ; <nl> } <nl> <nl>   } 
public class ServletRequestWrapper implements ServletRequest { <nl> <nl> public void addAsyncListener ( AsyncListener listener , <nl> ServletRequest servletRequest , ServletResponse servletResponse ) { <nl> - addAsyncListener ( listener , servletRequest , servletResponse ) ; <nl> + request . addAsyncListener ( listener , servletRequest , servletResponse ) ; <nl> } <nl> <nl>   } 
import java . util . Date ; <nl> import android . app . Activity ; <nl> import android . os . Bundle ; <nl> - import android . view . KeyEvent ; <nl> import android . widget . TextView ; <nl> import com . googlecode . androidannotations . annotations . EActivity ; <nl>   
public class BatteryStatsImpl extends BatteryStats { <nl> <nl> <nl> public LongSamplingCounter getIdleTimeCounter ( ) { <nl> - return mRxTimeMillis ; <nl> + return mIdleTimeMillis ; <nl> } <nl> <nl>   } 
class SwitchProfileAction extends FBAction { <nl> public void run ( ) { { <nl> Reader . setColorProfileName ( myProfileName ) ; <nl> + Reader . resetView ( ) ; <nl> Reader . repaintView ( ) ; <nl> } <nl> } <nl>   } 
public final class HandlerScheduler extends Scheduler { <nl> static class HandlerWorker extends Worker { <nl> - private final Handler handler ; <nl> + final Handler handler ; <nl> private final CompositeSubscription compositeSubscription = new CompositeSubscription ( ) ; <nl>   } } 
public final class ReinitializeFileEntry extends JournalEntry { <nl> <nl> <nl> <nl> <nl> <nl> <nl> public long getTTL ( ) { <nl>   } } 
public class GitVcs extends AbstractVcs < CommittedChangeList > { <nl> <nl> <nl> public GitVersion getVersion ( ) { <nl> + if ( myVersion == null ) { <nl> + checkVersion ( ) ; <nl> + } <nl> return myVersion ; <nl> } <nl>   } 
class InterceptedInvocation implements Invocation , VerificationAwareInvocation { <nl> <nl> public int hashCode ( ) { <nl> + <nl> return 1 ; <nl> } <nl>   } 
public abstract class AbstractAndroidMojo extends AbstractMojo { <nl> <nl> <nl> <nl> <nl> <nl> private Sdk sdk ; <nl>   } 
public class PGraphicsOpenGL extends PGraphics { <nl> protected void reinitPrimary ( ) { <nl> - lightsAllocated = false ; <nl> - matricesAllocated = false ; <nl> - <nl> allocate ( ) ; <nl> <nl>   } } 
import buildcraft . transport . BlockGenericPipe ; <nl> import buildcraft . transport . Gate ; <nl> import buildcraft . transport . GateVanilla ; <nl> import buildcraft . transport . Pipe ; <nl> - import buildcraft . transport . Gate . GateKind ; <nl> import net . minecraft . src . Block ; <nl> import net . minecraft . src . ItemStack ; <nl>   
public class BSONBinaryWriterTest { <nl> <nl> public void testWriteObjectId ( ) { <nl> - final ObjectId id = ObjectId . massageToObjectId ( " 50d3332018c6a1d8d1662b61 " ) ; <nl> + final ObjectId id = new ObjectId ( " 50d3332018c6a1d8d1662b61 " ) ; <nl> writer . writeStartDocument ( ) ; <nl>   } } 
public class ServiceBeanMethodInvocationFactoryImplTest { public void test ( ) { <nl> EmailAddress emailAddress = EmailAddressUtil . create ( emailAddressId ) ; <nl> + emailAddress . setCompanyId ( TestPropsValues . getCompanyId ( ) ) ; <nl> emailAddress . setAddress ( address ) ; <nl> return emailAddress ; <nl>   } } 
public class AccessorForPropertyDescriptor extends PropertyDescriptor { public void test ( ) { { { <nl> super ( property , Collections . < AnnotationDescriptor > emptyList ( ) , Modality . FINAL , Visibilities . PUBLIC , <nl> false , <nl> false , Kind . DECLARATION ) ; <nl> + initializeDefault ( ) ; <nl> } <nl> } <nl> } <nl>   } 
public final class TimestampType <nl> <nl> <nl> - <nl> { public String getName ( ) <nl> { <nl> return " timestamp " ; <nl>   } } 
public class MessageList <nl> { public void test ( ) { { <nl> finish ( ) ; <nl> <nl> - Accounts . listAccounts ( getApplicationContext ( ) ) ; <nl> + Accounts . listAccounts ( this ) ; <nl> } <nl> } <nl>   } 
package com . interview . tree ; <nl> + <nl> class Count { public void test ( ) { <nl> int size ; <nl> } <nl>   } 
public class JDBCStore extends StoreBase { public void test ( ) { <nl> <nl> <nl> <nl> <nl> <nl> <nl> <nl>   } } 
final class ActivityRecord { public void test ( ) { <nl> configDestroy = false ; <nl> keysPaused = false ; <nl> inHistory = false ; <nl> - visible = true ; <nl> + visible = false ; <nl> nowVisible = false ; <nl> idle = false ; <nl> hasBeenLaunched = false ; <nl>   } } 
public class Explode extends Visibility { <nl> public Explode ( Context context , AttributeSet attrs ) { <nl> super ( context , attrs ) ; <nl> + setPropagation ( new CircularPropagation ( ) ) ; <nl> } <nl> private void captureValues ( TransitionValues transitionValues ) { <nl>   } } 
public class IconDrawable extends Drawable { <nl> <nl> public int getOpacity ( ) { { <nl> - return 255 ; <nl> + return this . alpha ; <nl> } <nl> } <nl>   } 
public class AsyncHttpClientConfig { <nl> <nl> <nl> <nl> - public Builder addRequestFilter ( ResponseFilter responseFilter ) { <nl> + } public Builder addResponseFilter ( ResponseFilter responseFilter ) { <nl> responseFilters . add ( responseFilter ) ; <nl> return this ; <nl> } <nl>   } 
public class DrawHandler extends Handler { <nl> <nl> public long getCurrentTime ( ) { <nl> + if ( ! mReady ) { <nl> + return 0 ; <nl> + } <nl> if ( mInSeekingAction ) { <nl> return mDesireSeekingTime ; <nl> } <nl>   } } 
public class BikeRentalStationService { <nl> <nl> public void addStation ( BikeRentalStation station ) { <nl> + stations . remove ( station ) ; <nl> stations . add ( station ) ; <nl> } <nl>   } 
public class DB { <nl> <nl> <nl> public void dropDatabase ( ) { { <nl> - database . commands ( ) . drop ( ) ; <nl> + database . admin ( ) . drop ( ) ; <nl> } <nl> } <nl>   } 
public class QueryOperators { <nl> public static final String SIZE = " $ size " ; <nl> public static final String EXISTS = " $ exists " ; <nl> public static final String WHERE = " $ where " ; <nl> + public static final String NEAR = " $ near " ; <nl> } <nl>   
public class FileProjectManager extends ProjectManager { public void test ( ) { { { { <nl> } <nl> } <nl> } <nl> + <nl> + tin . close ( ) ; <nl> } <nl> <nl>   } 
public class NativeObjectManager { public void test ( ) { { { <nl> } <nl> } <nl> refMap . clear ( ) ; <nl> + refQueue = new ReferenceQueue < Object > ( ) ; <nl> } <nl> <nl>   } 
public abstract class NanoHTTPD { <nl> private final int myPort ; <nl> - private ServerSocket myServerSocket ; <nl> + private volatile ServerSocket myServerSocket ; <nl> private SSLServerSocketFactory sslServerSocketFactory ; <nl>   } 
import org . mockito . stubbing . Answer ; <nl> public class ReturnsVoid implements Answer < Object > { <nl> - <nl> public Object answer ( InvocationOnMock invocation ) throws Throwable { <nl> return null ; <nl> } <nl>   } 
public class TwoWayView extends AdapterView < ListAdapter > { <nl> <nl> } <nl> - private static class SavedState extends BaseSavedState { <nl> + static class SavedState extends BaseSavedState { <nl> int position ; <nl> int offset ; <nl>   } } 
public final class ContactsContract { <nl> <nl> <nl> <nl> - public static final String IS_READ_ONLY = " is_read_only " ; <nl> + public static final String RAW_CONTACT_IS_READ_ONLY = " raw_contact_is_read_only " ; <nl> } <nl> <nl>   
public abstract class Visibility extends Transition { public void test ( ) { { <nl> if ( mIsForcedVisibility ) { <nl> mView . setTransitionAlpha ( 0 ) ; <nl> } else { <nl> - mView . setTransitionVisibility ( mFinalVisibility ) ; <nl> + mView . setVisibility ( mFinalVisibility ) ; <nl> } <nl> } <nl> } <nl>   } 
public class RunMojo <nl> <nl> <nl> <nl> <nl> <nl> { public ActivityNotFoundException ( ) <nl> { <nl>   } } 
public class StringServletResponse extends HttpServletResponseWrapper { public void test ( ) { <nl> _unsyncByteArrayOutputStream . reset ( ) ; <nl> - _unsyncStringWriter = new UnsyncStringWriter ( true ) ; <nl> + _unsyncStringWriter . reset ( ) ; <nl> _printWriter = new PrintWriter ( _unsyncStringWriter ) ; <nl> } <nl>   } 
public class FakeBase64 { <nl> <nl> public static String encodeToString ( byte [ ] input , int flags ) { { <nl> - System . out . println ( " HELLO ! ! ! " ) ; <nl> return new String ( input ) + " __fake_Base64_encode_string__ " + flags ; <nl> } <nl> } <nl>   } 
public class ExecutionDelayTest extends HazelcastTestSupport { <nl> public static class Task implements Callable , Serializable { <nl> - private String uuid ; <nl> - <nl> } public Task ( ) { <nl> } <nl>   } 
import org . junit . * ; <nl> import water . * ; <nl> import water . fvec . * ; <nl> - public class DRFClassificationTest extends TestUtil { <nl> + public class DRFTest extends TestUtil { <nl> } public static void stall ( ) { stall_till_cloudsize ( 1 ) ; } <nl>   } 
package android . view ; <nl> - import android . animation . Animatable ; <nl> import android . animation . Animator ; <nl> import android . animation . ValueAnimator ; <nl> import android . animation . TimeInterpolator ; <nl>   
public class KafkaUtils { public void test ( ) { { { { <nl> } <nl> } <nl> } <nl> - <nl> - ; <nl> } <nl>   } 
public class Account implements BaseAccount <nl> { public void test ( ) { <nl> try <nl> { <nl> - LocalStore localStore = getLocalStore ( ) ; <nl> - localStore . resetVisibleLimits ( getDisplayCount ( ) ) ; <nl> + getLocalStore ( ) . resetVisibleLimits ( getDisplayCount ( ) ) ; <nl> } <nl> catch ( MessagingException e ) <nl> { <nl>   } } } 
public class Mockito extends Matchers { public void test ( ) { <nl> } <nl> <nl> <nl> <nl> <nl> <nl> <nl>   } 
public class FilterInvocation { <nl> <nl> public HttpServletResponse getHttpResponse ( ) { <nl> - return ( HttpServletResponse ) response ; <nl> + return response ; <nl> } <nl> <nl>   } 
public class PyPreFormatProcessor implements PreFormatProcessor { public void test ( ) { { <nl> } <nl> myRange = range ; <nl> element . accept ( this ) ; <nl> - return element . getTextRange ( ) ; <nl> + return range ; <nl> } <nl> <nl>   } 
import java . io . * ; <nl> import java . util . zip . Inflater ; <nl> public class GELFServer { <nl> - private static final int MAX_PACKET_SIZE = 4096 ; <nl> + private static final int MAX_PACKET_SIZE = 8192 ; <nl> private DatagramSocket serverSocket = null ; <nl>   } 
public class CheckerTest <nl> { public void testPackageNames ( ) throws CheckstyleException <nl> { <nl> final Checker c = new Checker ( ) ; <nl> + assertNotNull ( c ) ; <nl> <nl> <nl>   } } 
public class RotateAnimation3D extends Animation3D { <nl> protected double mDegreesToRotate ; <nl> protected double mRotateFrom ; <nl> protected double mRotationAngle ; <nl> - protected double mRotateX , mRotateY , mRotateZ ; <nl> + protected double mRotateX ; <nl> + protected double mRotateY ; <nl> + protected double mRotateZ ; <nl> protected Number3D mRotationAxis ; <nl> protected Quaternion mQuat ; <nl> protected Quaternion mQuatFrom ; <nl>   } 
public abstract class Structure { <nl> public AutoAllocated ( int size ) { { <nl> super ( size ) ; <nl> <nl> - clear ( ) ; <nl> + super . clear ( ) ; <nl> } <nl> } <nl>   } 
public class MtpDatabase { public void test ( ) { <nl> return new int [ ] { <nl> <nl> MtpConstants . FORMAT_UNDEFINED , <nl> + MtpConstants . FORMAT_ASSOCIATION , <nl> + MtpConstants . FORMAT_ABSTRACT_AV_PLAYLIST , <nl> } ; <nl> } <nl>   } 
class AndroidParcelableExtension implements TypeGenerationExtension { <nl> private final Types types ; <nl> - public AndroidParcelableExtension ( Types types ) { <nl> + AndroidParcelableExtension ( Types types ) { <nl> this . types = types ; <nl> } <nl>   } } 
public class ServletContextImpl implements ServletContext { <nl> <nl> public String getServerInfo ( ) { <nl> - return null ; <nl> + return " Undertow 1 . 0 . Alpha1 " ; <nl> } <nl> <nl>   } 
public class DeltaSession extends StandardSession implements Externalizable , Clus <nl> <nl> <nl> { public void setId ( String id ) { { <nl> - super . setId ( id ) ; <nl> + super . setId ( id , true ) ; <nl> resetDeltaRequest ( ) ; <nl> } <nl>   } } 
final class DefaultChannelPipeline implements ChannelPipeline { <nl> <nl> } <nl> - static abstract class HeadHandler implements ChannelOutboundHandler { <nl> + abstract static class HeadHandler implements ChannelOutboundHandler { <nl> protected final Unsafe unsafe ; <nl> ByteBuf byteSink ; <nl>   } } 
package com . phonegap ; <nl> - import java . lang . reflect . Field ; <nl> - <nl> + import android . app . Activity ; <nl> import android . os . Bundle ; <nl> public class StandAlone extends DroidGap { <nl>   } 
public class ApplicationInitializerTest { <nl> private FeatureToggleService featureToggleService ; <nl> <nl> private CcTrayActivityListener ccTrayActivityListener ; <nl> - <nl> + <nl> + private ConsoleService consoleService ; <nl> <nl> private ContextRefreshedEvent contextRefreshedEvent ; <nl>   } 
package tachyon . master ; <nl> import java . io . File ; <nl> import java . io . IOException ; <nl> - import java . net . InetSocketAddress ; <nl> import java . util . ArrayList ; <nl> import java . util . List ; <nl>   
public class ProjectCommandTest { public void test ( ) { <nl> checkPredicate ( projectConfigPredicate , EMPTY_PARSE_DATA , javaLibraryRule , false ) ; <nl> checkPredicate ( projectConfigPredicate , EMPTY_PARSE_DATA , ruleConfig , true ) ; <nl> - <nl> BuildCommandOptions buildOptions = command . buildCommandOptions ; <nl> MoreAsserts . assertContainsOne ( <nl> buildOptions . getArguments ( ) , javaLibraryTargetName . getFullyQualifiedName ( ) ) ; <nl>   } } 
public class CypherPluginFunctionalTest implements GraphHolder <nl> <nl> { public void startServer ( ) { <nl> + graphdb . cleanContent ( ) ; <nl> server = new WrappingNeoServerBootstrapper ( <nl> graphdb ) ; <nl> server . start ( ) ; <nl>   } } 
public abstract class DataConnection extends HierarchicalStateMachine { public void test ( ) { <nl> clearSettings ( ) ; <nl> - setDbg ( true ) ; <nl> + setDbg ( false ) ; <nl> addState ( mDefaultState ) ; <nl> addState ( mInactiveState , mDefaultState ) ; <nl> addState ( mActivatingState , mDefaultState ) ; <nl>   } } 
package com . liferay . portal . model . impl ; <nl> <nl> public class ReleaseImpl extends ReleaseBaseImpl { <nl> + <nl> public String getBundleSymbolicName ( ) { <nl> return getServletContextName ( ) ; <nl> } <nl>   } 
public class WriteResult { <nl> <nl> <nl> <nl> <nl> <nl> <nl> <nl> public int getN ( ) { <nl>   } } 
public class ShadowView { <nl> public void clearAnimation ( ) { <nl> if ( animation != null ) { <nl> animation . cancel ( ) ; <nl> + animation = null ; <nl> } <nl> } <nl>   } 
import java . util . Set ; <nl> <nl> <nl> <nl> <nl> <nl> <nl> final class PolymerPass extends AbstractPostOrderCallback implements HotSwapCompilerPass { public void test ( ) { <nl>   } } 
public final class SQLiteDebug { <nl> <nl> <nl> <nl> <nl> <nl> public static class DbStats { <nl> <nl>   } } 
public abstract class TableRef { <nl> public abstract String getName ( ) ; <nl> public boolean isRoot ( ) { <nl> - return getName ( ) . isEmpty ( ) ; <nl> + return ! getParent ( ) . isPresent ( ) ; <nl> } <nl> <nl>   } 
public class SortedQueryResultSet extends AbstractSet < Map . Entry > { <nl> <nl> } <nl> - private class EmptyIterator implements Iterator { <nl> + private static class EmptyIterator implements Iterator { <nl> <nl> public boolean hasNext ( ) { <nl>   } } } 
public class FieldTripRequest extends GenericModel { <nl> public List < FieldTripNote > notes ; <nl> <nl> + <nl> public String submitterNotes ; <nl> <nl>   } 
public final class PropertiesExpander <nl> <nl> <nl> <nl> <nl> <nl> { public PropertiesExpander ( Properties properties ) { <nl> if ( properties == null ) { <nl>   } } } 
public class Music extends BaseAudioEntity { <nl> <nl> public void stop ( ) { <nl> this . mMediaPlayer . stop ( ) ; <nl> - this . mMediaPlayer . seekTo ( 0 ) ; <nl> } <nl> <nl>   } 
public class ScriptIntrinsicColorMatrix extends ScriptIntrinsic { public void test ( ) { <nl> } <nl> <nl> <nl> <nl> <nl> <nl> <nl>   } 
public abstract class AbstractChartView extends View implements Chart { <nl> <nl> public void selectValue ( SelectedValue selectedValue ) { <nl> chartRenderer . selectValue ( selectedValue ) ; <nl> + callTouchListener ( ) ; <nl> ViewCompat . postInvalidateOnAnimation ( this ) ; <nl> } <nl>   } 
public abstract class Structure { <nl> <nl> <nl> <nl> - private int calculateSize ( boolean force ) { <nl> + protected int calculateSize ( boolean force ) { <nl> return calculateSize ( force , false ) ; <nl> } <nl>   } } 
import io . airlift . configuration . Config ; <nl> public class CompilerConfig <nl> { <nl> private boolean interpreterEnabled = true ; <nl> - private boolean useNewByteCodeGenerator = true ; <nl> public boolean isInterpreterEnabled ( ) <nl> { <nl>   } } 
public class CharTableImpl implements CharTable { <nl> <nl> } <nl> - private static class WeakCharEntryMap extends ReferenceMap { <nl> + private static final class WeakCharEntryMap extends ReferenceMap { <nl> public WeakCharEntryMap ( ) { <nl> super ( ReferenceMap . WEAK , ReferenceMap . WEAK , true ) ; <nl> } <nl>   } } 
public final class JGroupsFilters { public void test ( ) { { { { <nl> return true ; <nl> } <nl> } ; <nl> - <nl> } <nl> } <nl>   } 
import groovy . text . SimpleTemplateEngine ; <nl> import groovy . text . Template ; <nl> import junit . framework . TestCase ; <nl> - import java . io . BufferedWriter ; <nl> import java . io . IOException ; <nl> import java . io . StringWriter ; <nl> import java . io . Writer ; <nl>   
import android . content . Context ; <nl> import android . content . ContextWrapper ; <nl> import android . view . LayoutInflater ; <nl> - public class MortarContextWrapper extends ContextWrapper implements HasMortarScope { <nl> + class MortarContextWrapper extends ContextWrapper implements HasMortarScope { <nl> private final MortarScope scope ; <nl> private LayoutInflater inflater ; <nl>   } } 
public final class Futures { public void test ( ) { { { { <nl> } <nl> } <nl> } <nl> - <nl> } <nl> <nl>   } 
public class WordPress extends Application { public void test ( ) { <nl> editor . putBoolean ( IS_SIGNED_OUT_PREFERENCE , true ) ; <nl> editor . commit ( ) ; <nl> - <nl> wpDB . updateLastBlogId ( - 1 ) ; <nl> currentBlog = null ; <nl>   } } 
import com . fasterxml . jackson . annotation . JsonProperty ; <nl> public class RetryQueryRunnerConfig <nl> { <nl> <nl> - private int numTries = 4 ; <nl> + private int numTries = 0 ; <nl> <nl> private boolean returnPartialResults = false ; <nl>   } 
public class FirebirdDatabase extends AbstractDatabase { <nl> <nl> public boolean supportsDDLInTransaction ( ) { <nl> - return true ; <nl> + return false ; <nl> } <nl> <nl>   } 
public class SubtasksTagListFragment extends TagViewFragment { <nl> <nl> protected void refresh ( ) { <nl> + initializeTaskListMetadata ( ) ; <nl> setUpTaskList ( ) ; <nl> } <nl>   } 
import java . util . List ; <nl> import java . util . Map ; <nl> import java . util . UUID ; <nl> - import org . apache . commons . codec . binary . Base64 ; <nl> - <nl> import android . content . SharedPreferences ; <nl> import android . util . Log ; <nl>   
public final class MenuItemImpl implements MenuItem { <nl> <nl> public boolean expandActionView ( ) { <nl> - if ( hasCollapsibleActionView ( ) ) { <nl> + if ( ! hasCollapsibleActionView ( ) ) { <nl> return false ; <nl> } <nl>   } } } 
public class BottomSheetLayout extends FrameLayout { <nl> protected void onDetachedFromWindow ( ) { <nl> super . onDetachedFromWindow ( ) ; <nl> velocityTracker . clear ( ) ; <nl> + cancelCurrentAnimation ( ) ; <nl> } <nl> <nl>   } 
public class JarFileUrlNestedJar implements Jar { <nl> <nl> public InputStream getEntryInputStream ( ) throws IOException { <nl> if ( jarInputStream == null ) { <nl> - createJarInputStream ( ) ; <nl> + jarInputStream = createJarInputStream ( ) ; <nl> } <nl> return jarInputStream ; <nl> } <nl>   } 
public class TransportStopsLayer extends OsmandMapLayer implements ContextMenuLa <nl> <nl> { public boolean drawInScreenPixels ( ) { { <nl> - return false ; <nl> + return true ; <nl> } <nl> <nl>   } } 
class IdentityVirtualFilePointer implements VirtualFilePointer { <nl> <nl> public VirtualFile getFile ( ) { <nl> - return myFile ; <nl> + return isValid ( ) ? myFile : null ; <nl> } <nl> <nl>   } 
public class Shader { <nl> public boolean getLocalMatrix ( Matrix localM ) { <nl> if ( mLocalMatrix != null ) { <nl> localM . set ( mLocalMatrix ) ; <nl> - return true ; <nl> + return ! mLocalMatrix . isIdentity ( ) ; <nl> } <nl> return false ; <nl> } <nl>   } 
public class Node implements Writable { <nl> <nl> public List children ( ) { <nl> - return this . children ( ) ; <nl> + return this . children ; <nl> } <nl> public void addChild ( final Object child ) { <nl>   } } 
public abstract class AbstractSchedulerTests { <nl> <nl> public void onError ( Throwable e ) { <nl> - completed . countDown ( ) ; <nl> error . set ( e ) ; <nl> + completed . countDown ( ) ; <nl> } <nl> <nl>   } 
class ApplicationHttpRequest extends HttpServletRequestWrapper { <nl> <nl> <nl> public String getPathTranslated ( ) { <nl> + if ( getPathInfo ( ) == null ) { <nl> + return null ; <nl> + } <nl> + <nl> return getServletContext ( ) . getRealPath ( getPathInfo ( ) ) ; <nl> } <nl>   } 
public class NativeFormatPlugin extends FormatPlugin { <nl> <nl> public void detectLanguageAndEncoding ( Book book ) { <nl> detectLanguageAndEncodingNative ( book ) ; <nl> - book . save ( ) ; <nl> } <nl> public native void detectLanguageAndEncodingNative ( Book book ) ; <nl>   } 
abstract class BaseActivity extends Activity { public void test ( ) { { <nl> onCurrentDirectoryChanged ( ANIM_NONE ) ; <nl> onStackRestored ( mRestoredStack , mExternal ) ; <nl> - <nl> - getDisplayState ( ) . restored = true ; <nl> - onCurrentDirectoryChanged ( ANIM_NONE ) ; <nl> } <nl> } <nl>   } 
public class BazelCppRuleClasses { public void test ( ) { <nl> new String [ ] { <nl> " cc_inc_library " , <nl> " cc_library " , <nl> + " objc_library " , <nl> } ; <nl> <nl>   } } 
public class PyFileElementType extends IStubFileElementType < PyFileStub > { <nl> <nl> public int getStubVersion ( ) { <nl> - return 40 ; <nl> + return 41 ; <nl> } <nl> <nl>   } 
public class Circle implements Serializable , Shape { <nl> public Vector3 getCenter ( ) { { <nl> return new Vector3 ( x , y , 0 ) ; <nl> } <nl> + } <nl>   } 
public class ListeningMultiSemaphore { <nl> <nl> private boolean fairnessAllowsReordering ( ) { <nl> - return fairness == ResourceAllocationFairness . FAIR ; <nl> + return fairness == ResourceAllocationFairness . FAST ; <nl> } <nl> } <nl>   
import org . mockito . exceptions . base . MockitoException ; <nl> public class MockitoAnnotations { public void test ( ) { <nl> <nl> <nl> <nl> <nl> <nl>   } } 
import java . util . HashSet ; <nl> import java . util . Hashtable ; <nl> import java . util . Iterator ; <nl> import java . util . List ; <nl> - import java . util . Map ; <nl> import java . util . Set ; <nl> import javax . naming . Context ; <nl>   
public class Select < T > implements Iterable { public void test ( ) { <nl> return sql . toString ( ) ; <nl> } <nl> - String getWhereClause ( ) { <nl> + String getWhereCond ( ) { <nl> return whereClause ; <nl> } <nl>   } } 
package processing . app . windows ; <nl> import java . io . File ; <nl> import java . io . UnsupportedEncodingException ; <nl> - import java . util . ArrayList ; <nl> import processing . app . Base ; <nl> import processing . app . Preferences ; <nl>   
public class SyncManager { public void test ( ) { { { { <nl> Slog . v ( TAG , " Pushing back running sync due to a higher priority sync " ) ; <nl> } <nl> deferActiveSyncH ( asc ) ; <nl> + break ; <nl> } <nl> } <nl> } <nl>   } 
import java . util . List ; <nl> <nl> <nl> <nl> - <nl> class RuleMatchesAsJsonSerializer { <nl> private static final int API_VERSION = 1 ; <nl>   } 
package android . database . sqlite ; <nl> <nl> <nl> <nl> <nl> <nl> public class DatabaseObjectNotClosedException extends RuntimeException <nl> { public void test ( ) { <nl>   } } 
public class AppleTest extends AbstractBuildRule implements TestRule { <nl> public ImmutableList < Step > getBuildSteps ( <nl> BuildContext context , <nl> BuildableContext buildableContext ) { <nl> - return null ; <nl> + return ImmutableList . of ( ) ; <nl> } <nl> <nl>   } 
public class LabelPropertyRenderer < V > extends JLabel implements PropertyRenderer <nl> { public LabelPropertyRenderer ( ) { <nl> setOpaque ( true ) ; <nl> + putClientProperty ( " html . disable " , true ) ; <nl> } <nl> public LabelPropertyRenderer ( String staticText ) { <nl>   } } 
public class ValueAnimator extends Animator { public void test ( ) { <nl> mRunning = false ; <nl> mStarted = false ; <nl> mStartListenersCalled = false ; <nl> + mPlayingBackwards = false ; <nl> } <nl> <nl>   } 
public class PJOGL extends PGL { <nl> <nl> public void reshape ( GLAutoDrawable glDrawable , int x , int y , int w , int h ) { <nl> - getGL ( glDrawable ) ; <nl> + <nl> } <nl> private void getGL ( GLAutoDrawable glDrawable ) { <nl>   } } 
public class WordPress extends Application { public void test ( ) { <nl> EventBus . builder ( ) <nl> . logNoSubscriberMessages ( false ) <nl> . sendNoSubscriberEvent ( false ) <nl> + . throwSubscriberException ( true ) <nl> . installDefaultEventBus ( ) ; <nl> RestClientUtils . setUserAgent ( getUserAgent ( ) ) ; <nl>   } } 
public class CheckerTest <nl> { <nl> public BriefLogger ( OutputStream out ) <nl> { <nl> - super ( out ) ; <nl> + super ( out , false ) ; <nl> } <nl> public void auditStarted ( AuditEvent evt ) { } <nl> public void fileFinished ( AuditEvent evt ) { } <nl>   } 
public class CommonLVCS extends LocalVcs implements ProjectComponent , FileConten <nl> <nl> { public synchronized void endAction ( LvcsActionImpl action ) { <nl> - checkOldLvcsEnabled ( ) ; <nl> + if ( ! isOldLvcsEnabled ( ) ) return ; <nl> commitAllUnsavedDocuments ( ) ; <nl> if ( LOG . isDebugEnabled ( ) ) { <nl>   } } } 
public class CDMAPhone extends PhoneBase { public void test ( ) { <nl> CdmaCallTracker mCT ; <nl> CdmaSMSDispatcher mSMS ; <nl> CdmaServiceStateTracker mSST ; <nl> - RuimFileHandler mRuimFileHandler ; <nl> RuimRecords mRuimRecords ; <nl> RuimCard mRuimCard ; <nl> ArrayList < CdmaMmiCode > mPendingMmis = new ArrayList < CdmaMmiCode > ( ) ; <nl>   } } 
public final class NioEventLoop extends SingleThreadEventLoop { public void test ( ) { { <nl> logger . debug ( " Epoll - bug workaround enabled = " + EPOLL_BUG_WORKAROUND ) ; <nl> } <nl> } <nl> + <nl> <nl> <nl> <nl>   } 
public abstract class DjangoManageTestTask extends PyExecutionFixtureTestTask { public void test ( ) { <nl> task . setParameters ( parametersString . build ( ) ) ; <nl> - myProcessHandler = task . createProcess ( ) ; <nl> + myProcessHandler = task . createProcess ( null ) ; <nl> myProcessHandler . addProcessListener ( createProcessListener ( ) ) ; <nl>   } } 
public class ViewTest { <nl> public void testHasEmptyLayoutParams ( ) throws Exception { <nl> DroidSugarAndroidTestRunner . addProxy ( View . class , FakeView . class ) ; <nl> + <nl> ViewGroup . LayoutParams layoutParams = new View ( null ) . getLayoutParams ( ) ; <nl> assertThat ( layoutParams , notNullValue ( ) ) ; <nl> } <nl>   } 
package org . wordpress . android . ui ; <nl> import android . view . View ; <nl> - import android . content . Intent ; <nl> abstract class MenuDrawerItem { public void test ( ) { <nl> <nl>   } } 
public class WikiSubscriptionLocalizedContentTest <nl> extends BaseSubscriptionLocalizedContentTestCase { <nl> <nl> + <nl> public void setUp ( ) throws Exception { <nl> super . setUp ( ) ; <nl>   } } 
final class DefaultPermissionGrantPolicy { public void test ( ) { { <nl> grantRuntimePermissionsLPw ( wearHomePackage , PHONE_PERMISSIONS , true , userId ) ; <nl> grantRuntimePermissionsLPw ( wearHomePackage , MICROPHONE_PERMISSIONS , false , <nl> userId ) ; <nl> + grantRuntimePermissionsLPw ( wearHomePackage , LOCATION_PERMISSIONS , false , <nl> + userId ) ; <nl> } <nl> } <nl>   } 
public class HqlDomain { <nl> <nl> public static class SimpleTypes { <nl> + transient int test ( ) ; <nl> long id ; <nl> BigDecimal bigDecimal ; <nl> Byte bbyte ; <nl>   } } 
public class PolishWordRepeatRule extends PolishRule { <nl> <nl> <nl> public void reset ( ) { <nl> - <nl> + <nl> } <nl>   } 
public class PeerEurekaNode { public void test ( ) { <nl> cancelProcessor . shutdown ( ) ; <nl> statusProcessor . shutdown ( ) ; <nl> asgStatusProcessor . shutdown ( ) ; <nl> + replicationClient . shutdown ( ) ; <nl> } <nl> <nl>   } 
public class GitPushDialog extends DialogWrapper { public void test ( ) { <nl> init ( ) ; <nl> setOKButtonText ( " Push " ) ; <nl> + setOKButtonMnemonic ( ' P ' ) ; <nl> setTitle ( " Git Push " ) ; <nl> } <nl>   } 
public class RemoteExportException extends PortalException { <nl> public static final int NO_PERMISSIONS = 5 ; <nl> + public static final int SAME_GROUP = 4 ; <nl> + <nl> public RemoteExportException ( int type ) { <nl> _type = type ; <nl> } <nl>   } 
public class MersenneRandom extends Random { <nl> <nl> <nl> - public double nextStandNormalDistrDouble ( ) { <nl> + } public double nextGaussian ( ) { <nl> return mersenne . nextGaussian ( ) ; <nl> } <nl>   } 
public class BinaryDoubleExpressionHelper extends BinaryLongExpressionHelper { <nl> <nl> protected ClassNode getNormalOpResultType ( ) { <nl> - return ClassHelper . long_TYPE ; <nl> + return ClassHelper . double_TYPE ; <nl> } <nl> <nl>   } 
public class CvsHistoryProvider implements VcsHistoryProvider { <nl> <nl> public String getHelpId ( ) { <nl> - return " cvs . selectionHistory " ; <nl> + return " reference . versionControl . toolwindow . history " ; <nl> } <nl> <nl>   } 
import java . util . concurrent . ConcurrentHashMap ; <nl> <nl> <nl> <nl> <nl> <nl> <nl> public class PresenceUpdateHandler extends BasicModule implements ChannelHandler { public void test ( ) { <nl>   } } 
public class TraversalRequirements { public void test ( ) { { { <nl> return false ; <nl> } <nl> } <nl> - return e . getPermission ( ) . allows ( modes ) ; <nl> + return e . canTraverse ( modes ) ; <nl> } <nl> <nl>   } 
public class TitlePageIndicator extends View implements PageIndicator { <nl> public void setFooterLineHeight ( float footerLineHeight ) { <nl> mFooterLineHeight = footerLineHeight ; <nl> + mPaintFooterLine . setStrokeWidth ( mFooterLineHeight ) ; <nl> invalidate ( ) ; <nl> } <nl>   } 
public abstract class Conference implements IConferenceable { <nl> private final List < Connection > mUnmodifiableConferenceableConnections = <nl> Collections . unmodifiableList ( mConferenceableConnections ) ; <nl> - private PhoneAccountHandle mPhoneAccount ; <nl> + protected PhoneAccountHandle mPhoneAccount ; <nl> private AudioState mAudioState ; <nl> private int mState = Connection . STATE_NEW ; <nl> private DisconnectCause mDisconnectCause ; <nl>   } 
public class PortletServletRequest extends HttpServletRequestWrapper { public void test ( ) { { { <nl> } <nl> } <nl> - <nl> - System . out . println ( name + " : " + retVal ) ; <nl> - <nl> return retVal ; <nl> } <nl>   } 
public class AudioFormat { public void test ( ) { <nl> switch ( audioFormat ) { <nl> case ENCODING_PCM_8BIT : <nl> return 1 ; <nl> + case ENCODING_PCM_FLOAT : <nl> + return 4 ; <nl> case ENCODING_PCM_16BIT : <nl> case ENCODING_DEFAULT : <nl> return 2 ; <nl>   } } } 
import java . util . Set ; <nl> <nl> public class PointQuadTree < T extends PointQuadTree . Item > { <nl> - public static interface Item { <nl> + } public interface Item { <nl> Point getPoint ( ) ; <nl> } <nl>   } 
public abstract class HardwareRenderer { <nl> <nl> <nl> <nl> - private static final int PROFILE_MAX_FRAMES = 64 ; <nl> + private static final int PROFILE_MAX_FRAMES = 128 ; <nl> <nl> <nl>   } 
public class Tmp { public void test ( ) { <nl> <nl> <nl>   } } 
public class TachyonFile { <nl> public void append ( byte b ) throws IOException { <nl> <nl> + appendCurrentBuffer ( Config . USER_BUFFER_PER_PARTITION_BYTES ) ; <nl> + <nl> mBuffer . put ( b ) ; <nl> } <nl>   } 
package org . mockito ; <nl> import org . mockito . internal . returnvalues . EmptyReturnValues ; <nl> <nl> - <nl> public class DefaultMockitoConfiguration implements IMockitoConfiguration { <nl> public ReturnValues getReturnValues ( ) { <nl>   } } 
public class JarHell { public void test ( ) { { { <nl> } <nl> } <nl> } <nl> + <nl>   } 
public final class Settings { <nl> <nl> public static final String CERT_PIN_UPDATE_METADATA_URL = " cert_pin_metadata_url " ; <nl> - <nl> + <nl> <nl> <nl> <nl>   } 
package a ; <nl> + import kotlin . jvm . functions . Function0 ; <nl> + <nl> public class A { public void test ( ) { <nl> } <nl>   } 
import android . telephony . Rlog ; <nl> public final class CellInfoLte extends CellInfo implements Parcelable { <nl> private static final String LOG_TAG = " CellInfoLte " ; <nl> - private static final boolean DBG = true ; <nl> + private static final boolean DBG = false ; <nl> private CellIdentityLte mCellIdentityLte ; <nl> private CellSignalStrengthLte mCellSignalStrengthLte ; <nl>   } 
package org . mapdb ; <nl> - import com . sun . deploy . cache . CacheEntry ; <nl> - <nl> import java . lang . ref . ReferenceQueue ; <nl> import java . lang . ref . SoftReference ; <nl> import java . lang . ref . WeakReference ; <nl>   
public class LocalIndexesFragment extends OsmandExpandableListFragment { public void test ( ) { { <nl> listAdapter . addLocalIndexInfo ( info ) ; <nl> } <nl> listAdapter . sortData ( ) ; <nl> + getExpandableListView ( ) . setAdapter ( listAdapter ) ; <nl> } <nl> ActionBar actionBar = getDownloadActivity ( ) . getSupportActionBar ( ) ; <nl> <nl>   } 
public class Tmp { public interface Part { <nl> <nl> <nl> <nl> <nl> <nl> <nl> } public String getSubmittedFileName ( ) ; <nl>   } 
public class Python2Target extends Target { <nl> <nl> public String getVersion ( ) { <nl> - return " 4 . 5 " ; <nl> + return " 4 . 5 . 1 " ; <nl> } <nl> public Set < String > getBadWords ( ) { <nl>   } } 
public class ConsoleConfigurable implements SearchableConfigurable , Configurable <nl> <nl> <nl> { public String getDisplayName ( ) { { <nl> - return " Console Folding " ; <nl> + return " Console " ; <nl> } <nl> <nl>   } } 
public class Graylog2Reporter extends ScheduledReporter { <nl> <nl> public String buildShortMessage ( String name ) { { <nl> - return name ; <nl> + return " metrics " ; <nl> } <nl> } <nl>   } 
import org . codehaus . groovy . runtime . InvokerInvocationException ; <nl> <nl> <nl> <nl> <nl> <nl> <nl> public class GroovyMain { public void test ( ) { <nl>   } } 
public abstract class BuilderSupport extends GroovyObjectSupport { <nl> protected Object getCurrent ( ) { <nl> return current ; <nl> } <nl> + <nl> + protected void setCurrent ( Object current ) { <nl> + this . current = current ; <nl> + } <nl> } <nl>   
public class RequestSchemeAttribute implements ExchangeAttribute { <nl> <nl> public String readAttribute ( final HttpServerExchange exchange ) { <nl> - return exchange . getRequestMethod ( ) . toString ( ) ; <nl> + return exchange . getRequestScheme ( ) ; <nl> } <nl> <nl>   } 
class SourceMapLineDecoder { <nl> <nl> private static final String BASE64_MAP = <nl> " ABCDEFGHIJKLMNOPQRSTUVWXYZ " + <nl> - " abcdefghijklmnopqrstuvwzyz " + <nl> + " abcdefghijklmnopqrstuvwxyz " + <nl> " 0123456789 + / " ; <nl> <nl>   } 
public class TerminateRemoteProcessDialog { <nl> <nl> public boolean isToBeShown ( ) { <nl> - return myAlwaysUseDefault ? ! myDetachIsDefault : myDontTerminate ; <nl> + return myAlwaysUseDefault ? myDetachIsDefault : myDontTerminate ; <nl> } <nl> <nl>   } 
public class ContextForcedUserPanel extends AbstractContextPropertiesPanel { <nl> <nl> public User getElementAt ( int index ) { <nl> - log . info ( " Getting " + tableModel . getElement ( index ) ) ; <nl> return tableModel . getElement ( index ) ; <nl> } <nl>   } 
public class ManagedServlet implements Lifecycle { <nl> <nl> public void release ( ) { { { <nl> - instance . destroy ( ) ; <nl> + <nl> } <nl> } ; <nl> } <nl>   } 
public class BlockFlowEvent extends BlockEvent { <nl> <nl> public boolean equals ( BlockFlow flow ) { <nl> - return flow . flowDirection . equals ( flow ) ; <nl> + return flowDirection . equals ( flow . flowDirection ) ; <nl> } <nl> <nl>   } 
public class TestContextConfigAnnotation extends TestCase { public void test ( ) { { { <nl> if ( antFile . lastModified ( ) >= eclipseFile . lastModified ( ) ) { <nl> return antFile ; <nl> } <nl> + return eclipseFile ; <nl> } <nl> + return antFile ; <nl> } <nl> return eclipseFile ; <nl> } <nl>   } 
public class PyDuplocatorTest extends PyTestCase { <nl> public void testIgnoreStringLiteral ( ) throws Exception { <nl> myDuplocatorSettings . DISTINGUISH_LITERALS = false ; <nl> try { <nl> - doTest ( 2 ) ; <nl> + doTest ( 1 ) ; <nl> } <nl> finally { <nl> myDuplocatorSettings . DISTINGUISH_LITERALS = true ; <nl>   } } } 
public class Tmp { public interface JSONWebServiceActionMapping { <nl> } public Object getActionObject ( ) ; <nl> + public String getContextName ( ) ; <nl> + <nl> public String getContextPath ( ) ; <nl> public String getMethod ( ) ; <nl>   } 
public class RaptorWorkerData implements Serializable { public void test ( ) { <nl> continue ; <nl> timetablesForPattern . add ( timetable ) ; <nl> + timetable . raptorData = this ; <nl> <nl>   } } 
public class SlidingLayer extends FrameLayout { <nl> <nl> public void setOpenOnTapEnabled ( boolean _openOnTapEnabled ) { <nl> - _openOnTapEnabled = _openOnTapEnabled ; <nl> + openOnTapEnabled = _openOnTapEnabled ; <nl> } <nl>   } 
final class PooledUnsafeDirectByteBuf extends PooledByteBuf < ByteBuffer > { <nl> <nl> protected ByteBuffer newInternalNioBuffer ( ByteBuffer memory ) { <nl> - return memory ; <nl> + return memory . duplicate ( ) ; <nl> } <nl> <nl>   } 
public class PreferenceManager { <nl> private OnPreferenceTreeClickListener mOnPreferenceTreeClickListener ; <nl> - <nl> <nl> <nl> - public PreferenceManager ( Activity activity , int firstRequestCode ) { <nl> + PreferenceManager ( Activity activity , int firstRequestCode ) { <nl> mActivity = activity ; <nl> mNextRequestCode = firstRequestCode ; <nl>   } } } 
import java . util . Set ; <nl> <nl> <nl> public class NodeTraversal { <nl> - <nl> private final AbstractCompiler compiler ; <nl> private final Callback callback ; <nl>   } 
public class DeepLearningSpiralsTest extends TestUtil { public void test ( ) { { { { { <nl> } <nl> } <nl> } <nl> - fr . delete ( ) ; <nl> + frame . delete ( ) ; <nl> Scope . exit ( ) ; <nl> } <nl> } <nl>   } 
public class ByteDecoder extends Bytes { public void test ( ) { <nl> switch ( type ) { <nl> case NULL : <nl> + case UNDEFINED : <nl> break ; <nl> case BOOLEAN : <nl>   } } } 
public class NavBarPanel extends JPanel implements DataProvider , PopupOwner , Dis <nl> <nl> { public void dispose ( ) { { <nl> + getNavBarUI ( ) . clearItems ( ) ; <nl> myDisposed = true ; <nl> NavBarListener . unsubscribeFrom ( this ) ; <nl> } <nl>   } } 
public abstract class ATransformable3D extends AFrameTask implements IGraphNodeM <nl> <nl> { public void setScale ( Vector3 scale ) { { <nl> - mScale = scale ; <nl> + mScale . setAll ( scale ) ; <nl> if ( mGraphNode != null ) mGraphNode . updateObject ( this ) ; <nl> } <nl>   } } 
package com . zaxxer . hikari . metrics ; <nl> <nl> public class MetricsTracker <nl> { <nl> - private static final Context NO_CONTEXT = new Context ( ) ; <nl> + protected static final Context NO_CONTEXT = new Context ( ) ; <nl> public static class Context <nl> { <nl>   } } 
public final class Calendar { <nl> public static final int EDITOR_ACCESS = 600 ; <nl> <nl> public static final int OWNER_ACCESS = 700 ; <nl> + <nl> public static final int ROOT_ACCESS = 800 ; <nl> <nl>   } 
public final class DiskLruCache implements Closeable { <nl> <nl> <nl> <nl> - public long getMaxSize ( ) { <nl> + } public synchronized long getMaxSize ( ) { <nl> return maxSize ; <nl> } <nl>   } 
public class EpisodesFragment extends SherlockFragment { public void test ( ) { { { <nl> } <nl> } <nl> - if ( handled ) { <nl> - adapter . notifyDataSetChanged ( ) ; <nl> - } <nl> resetContextMenuSelection ( ) ; <nl> return handled ; <nl> } <nl>   } 
public abstract class RajawaliRenderer implements IRajawaliSurfaceRenderer { <nl> final AFrameTask task = new AFrameTask ( ) { <nl> <nl> protected void doTask ( ) { <nl> + renderTarget . create ( ) ; <nl> mRenderTargets . add ( renderTarget ) ; <nl> } <nl> } ; <nl>   } 
public class MapReduceOutput { public void test ( ) { <nl> } <nl> <nl> <nl> <nl> <nl> <nl> <nl>   } 
public class CatchablePokemon { public void test ( ) { <nl> try { <nl> response = CatchPokemonResponse . parseFrom ( result ) ; <nl> - System . out . println ( response ) ; <nl> } catch ( InvalidProtocolBufferException e ) { <nl> throw new RemoteServerException ( e ) ; <nl> } <nl>   } } 
public class EthernetDataTracker implements NetworkStateTracker { <nl> public String getTcpBufferSizesPropName ( ) { <nl> return " net . tcp . buffersize . wifi " ; <nl> } <nl> + <nl> + public void setDependencyMet ( boolean met ) { <nl> + <nl> + } <nl> } <nl>   
public class LabeledScoredTreeReaderFactory implements TreeReaderFactory { <nl> private final TreeNormalizer tm ; <nl> <nl> <nl> <nl> <nl> public LabeledScoredTreeReaderFactory ( ) { <nl> lf = CoreLabel . factory ( ) ; <nl>   } } 
public class Publication implements AutoCloseable <nl> <nl> { public boolean hasBeenConnected ( ) <nl> { { <nl> + ensureOpen ( ) ; <nl> + <nl> return positionLimit . getVolatile ( ) > 0 ; <nl> } <nl>   } } 
public class AndroidPrebuiltAar extends AndroidLibrary implements HasAndroidReso <nl> <nl> { public void addToCollector ( AndroidPackageableCollector collector ) { { { <nl> + super . addToCollector ( collector ) ; <nl> collector . addNativeLibsDirectory ( getBuildTarget ( ) , nativeLibsDirectory ) ; <nl> } <nl> } <nl>   } } 
public class TileBlueprintLibrary extends TileBuildCraft implements IInventory { <nl> <nl> public int getInventoryStackLimit ( ) { <nl> - return 64 ; <nl> + return 1 ; <nl> } <nl> <nl>   } 
public class BlogsIndexer extends BaseIndexer { <nl> public static final String PORTLET_ID = PortletKeys . BLOGS ; <nl> public BlogsIndexer ( ) { <nl> + setFilterSearch ( true ) ; <nl> setPermissionAware ( true ) ; <nl> } <nl>   } 
public class PlaybackService extends Service { public void test ( ) { { <nl> Log . w ( TAG , " Something went wrong . Shutting down . . . " ) ; <nl> stopSelf ( ) ; <nl> } <nl> - return Service . START_STICKY ; <nl> + return Service . START_NOT_STICKY ; <nl> } <nl> <nl>   } 
public class EditingTargetCodeExecution <nl> { public void test ( ) { { <nl> if ( ! docDisplay_ . moveSelectionToNextLine ( true ) ) <nl> docDisplay_ . moveSelectionToBlankLine ( ) ; <nl> + docDisplay_ . ensureCursorVisible ( ) ; <nl> } <nl> } <nl>   } 
public class ThrottleService extends IThrottleManager . Stub { <nl> private void checkThrottleAndPostNotification ( long currentTotal ) { <nl> <nl> if ( mPolicyThreshold == 0 ) { <nl> + clearThrottleAndNotification ( ) ; <nl> return ; <nl> } <nl>   } } 
public class TestModulePropertiesImpl extends TestModuleProperties implements Pe <nl> <nl> { public void loadState ( TestModulePropertiesState state ) { <nl> - <nl> + setProductionModuleName ( state . moduleName ) ; <nl> } <nl> public static class TestModulePropertiesState { <nl>   } } 
public class SpanishXMLTreeReader implements TreeReader { <nl> private static final String ATTR_ELLIPTIC = " elliptic " ; <nl> private static final String EMPTY_LEAF = " - NONE - " ; <nl> - private static final String MISSING_PHRASAL = " DUMMYP " ; <nl> - private static final String MISSING_POS = " DUMMY " ; <nl> private NodeList sentences ; <nl> private int sentIdx ; <nl>   } 
public class PrivacyService { public void test ( ) { <nl> if ( hook . isDangerous ( ) ) { <nl> result . methodName = hook . getName ( ) ; <nl> result . restricted = false ; <nl> - result . asked = false ; <nl> + result . asked = true ; <nl> setRestrictionInternal ( result ) ; <nl> } <nl> } <nl>   } 
import java . util . List ; <nl> <nl> public abstract class ByteToMessageDecoder extends ChannelInboundHandlerAdapter { <nl> - protected ByteBuf cumulation ; <nl> + ByteBuf cumulation ; <nl> private boolean singleDecode ; <nl> private boolean decodeWasNull ; <nl>   } 
public class RecoveryTests extends CrateIntegrationTest { public void test ( ) { { { <nl> assertThat ( length , greaterThanOrEqualTo ( 1L ) ) ; <nl> } <nl> + for ( Thread writer : writers ) { <nl> + writer . join ( 6000 ) ; <nl> + } <nl> } <nl> } <nl>   } 
public class VcsLogUiImpl implements VcsLogUi , Disposable { <nl> <nl> public void dispose ( ) { { <nl> getTable ( ) . removeAllHighlighters ( ) ; <nl> + myVisiblePack = VisiblePack . EMPTY ; <nl> } <nl> } <nl>   } 
public class Table extends JTable { public void test ( ) { <nl> add ( editorComp ) ; <nl> editorComp . validate ( ) ; <nl> + editorComp . requestFocusInWindow ( ) ; <nl> + <nl> setCellEditor ( editor ) ; <nl> setEditingRow ( row ) ; <nl> setEditingColumn ( column ) ; <nl>   } } 
public class Tmp { public interface PacketExtension { <nl> } public String getNamespace ( ) ; <nl> <nl> <nl> <nl> <nl> <nl> <nl>   } 
public class SerializableHasSerialVersionUIDFieldInspection <nl> extends SerializableInspection { <nl> <nl> + public boolean isEnabledByDefault ( ) { <nl> + return true ; <nl> + } <nl> + <nl> + <nl> <nl> public String getID ( ) { <nl> return " serial " ; <nl>   } } 
public final class ContactsContract { <nl> public static final int TYPE_WORK_MOBILE = 17 ; <nl> public static final int TYPE_WORK_PAGER = 18 ; <nl> public static final int TYPE_ASSISTANT = 19 ; <nl> + public static final int TYPE_MMS = 20 ; <nl> <nl> <nl>   } 
import static org . elasticsearch . action . ValidateActions . addValidationError ; <nl> <nl> <nl> - public class ClearScrollRequest extends ActionRequest { <nl> + public class ClearScrollRequest extends ActionRequest < ClearScrollRequest > { <nl> private List < String > scrollIds ; <nl>   } } 
public final class Annotation implements Comparable < Annotation > { public void test ( ) { <nl> boolean has_changes = false ; <nl> for ( Map . Entry < String , Boolean > entry : changed . entrySet ( ) ) { <nl> if ( entry . getValue ( ) ) { <nl> - System . out . println ( entry . getKey ( ) ) ; <nl> has_changes = true ; <nl> break ; <nl> } <nl>   } } } 
public class SchematicDoor extends SchematicBlock { <nl> <nl> public void rotateLeft ( IBuilderContext context ) { <nl> meta = rotateMeta ( meta ) ; <nl> - upperMeta = rotateMeta ( upperMeta ) ; <nl> } <nl> private int rotateMeta ( int meta ) { <nl>   } } 
public class Drawer { <nl> <nl> public Drawer withAccountHeader ( AccountHeader . Result accountHeader ) { <nl> this . mAccountHeader = accountHeader ; <nl> + <nl> + mHeaderOffset = 1 ; <nl> return this ; <nl> } <nl>   } 
public class XPrivacy implements IXposedHookLoadPackage , IXposedHookZygoteInit { public void test ( ) { <nl> <nl> hookAll ( XCamera . getInstances ( ) ) ; <nl> - <nl> - hookAll ( XClipboardManager . getInstances ( null ) ) ; <nl> - <nl> <nl> hookAll ( XConnectivityManager . getInstances ( ) ) ; <nl>   } } 
public class FileDisplayActivity extends HookActivity <nl> <nl> { public void onBrowsedDownTo ( OCFile directory ) { <nl> cleanSecondFragment ( ) ; <nl> + setFile ( directory ) ; <nl> updateActionBarTitle ( ) ; <nl> <nl> startSyncFolderOperation ( directory , false ) ; <nl>   } } 
public final class From implements Sqlable { public void test ( ) { <nl> if ( mLimit != null ) { <nl> sql . append ( " LIMIT " ) ; <nl> + sql . append ( mLimit ) ; <nl> sql . append ( " " ) ; <nl> } <nl>   } } 
public class Constants { <nl> public static final long SCALE_ANIMATION_DURATION_FULL_DISTANCE = 800 ; <nl> - public static final int DISPLAY_PHOTO_SIZE = 800 ; <nl> + public static final int DISPLAY_PHOTO_SIZE = 640 ; <nl> public static final String FACEBOOK_APP_ID = " 134669876670695 " ; <nl>   } 
public class MainService extends Service { public void test ( ) { <nl> unregisterReceiver ( mPackageBroadcastReceiver ) ; <nl> unregisterReceiver ( mDialogReceiver ) ; <nl> unregisterReceiver ( mBroadcastReceiver ) ; <nl> - unregisterReceiver ( mPackageBroadcastReceiver ) ; <nl> MainController . destroy ( ) ; <nl> } <nl>   } 
public class Switch extends CompoundButton { <nl> <nl> public void setChecked ( boolean checked ) { <nl> super . setChecked ( checked ) ; <nl> - mThumbPosition = checked ? getThumbScrollRange ( ) : 0 ; <nl> + mThumbPosition = isChecked ( ) ? getThumbScrollRange ( ) : 0 ; <nl> invalidate ( ) ; <nl> } <nl>   } 
public class Tmp { public enum TreeType { <nl> <nl> BIRCH , <nl> <nl> <nl> <nl> + JUNGLE , <nl> + <nl> <nl> <nl> RED_MUSHROOM , <nl>   } } 
public abstract class AbstractBasicTest { <nl> <nl> public void onThrowable ( Throwable t ) { { <nl> t . printStackTrace ( ) ; <nl> - fail ( " Unexpected exception : " + t . getMessage ( ) , t ) ; <nl> } <nl> } <nl>   } 
public class OsmBugsDbHelper extends SQLiteOpenHelper { public void test ( ) { { { { <nl> } while ( query . moveToNext ( ) ) ; <nl> } <nl> query . close ( ) ; <nl> + db . close ( ) ; <nl> } <nl> return cachedOsmbugsPoints ; <nl> } <nl>   } 
import android . content . pm . PackageInfo ; <nl> import android . content . pm . PackageManager ; <nl> import android . net . Uri ; <nl> import android . support . v4 . app . NotificationCompat ; <nl> - import android . util . Log ; <nl> public class PackageChange extends BroadcastReceiver { <nl>   } 
public class CalendarView extends FrameLayout { <nl> <nl> <nl> <nl> - private int mCurrentMonthDisplayed ; <nl> + private int mCurrentMonthDisplayed = - 1 ; <nl> <nl> <nl>   } 
public class ApplicationInfo extends PackageItemInfo implements Parcelable { public void test ( ) { <nl> manageSpaceActivityName = orig . manageSpaceActivityName ; <nl> descriptionRes = orig . descriptionRes ; <nl> uiOptions = orig . uiOptions ; <nl> + backupAgentName = orig . backupAgentName ; <nl> } <nl>   } 
public class ConsistencyCheck { public void test ( ) { { { <nl> } <nl> } <nl> } <nl> + <nl>   } 
public abstract class WindowOrientationListener { public void test ( ) { <nl> if ( LOG ) { <nl> Log . d ( TAG , " WindowOrientationListener enabled " ) ; <nl> } <nl> + mSensorEventListener . reset ( ) ; <nl> mSensorManager . registerListener ( mSensorEventListener , mSensor , mRate ) ; <nl> mEnabled = true ; <nl> } <nl>   } 
public class PythonDocumentationConfigurable implements SearchableConfigurable { <nl> <nl> public String getHelpTopic ( ) { <nl> - return null ; <nl> + return " preferences . ExternalDocumentation " ; <nl> } <nl> <nl>   } 
public class AjaxStatus { public void test ( ) { <nl> <nl> <nl> <nl> <nl> <nl> <nl> <nl>   } } 
import android . test . InstrumentationTestCase ; <nl> import java . util . ArrayList ; <nl> import java . util . List ; <nl> - import java . util . Set ; <nl> <nl> <nl>   
public class PGraphicsPDF extends PGraphicsJava2D { <nl> <nl> - public void save ( String filename ) { <nl> + } public boolean save ( String filename ) { <nl> nope ( " save " ) ; <nl> + return false ; <nl> } <nl>   } 
public final class AlluxioFuse { <nl> private static final Logger LOG = LoggerFactory . getLogger ( Constants . LOGGER_TYPE ) ; <nl> private static Configuration sConfiguration ; <nl> + <nl> private AlluxioFuse ( ) { <nl> } <nl>   } 
public class UnderlinePageIndicator extends View implements PageIndicator { <nl> <nl> public void setSelectedColor ( int selectedColor ) { <nl> - mPaint . setColor ( selectedColor & 0xFFFFFF ) ; <nl> + mPaint . setColor ( selectedColor ) ; <nl> invalidate ( ) ; <nl> } <nl>   } 
class FastScroller { public void test ( ) { { { <nl> break ; <nl> } <nl> } <nl> + ta . recycle ( ) ; <nl> updateAppearance ( ) ; <nl> } <nl>   } 
public class RandomAccessSparseVector extends AbstractVector { <nl> <nl> - private class AddToVector implements IntDoubleProcedure { <nl> + private static class AddToVector implements IntDoubleProcedure { <nl> final Vector v ; <nl> private AddToVector ( Vector v ) { <nl>   } } } } 
public class Compile extends ConventionTask { <nl> protected AntJavac antCompile = new AntJavac ( ) ; <nl> - <nl> - <nl> protected ClasspathConverter classpathConverter = new ClasspathConverter ( ) ; <nl> public Compile ( Project project , String name ) { <nl>   } } 
public final class ChannelPromiseAggregator implements ChannelFutureListener { <nl> private final ChannelPromise aggregatePromise ; <nl> private Set < ChannelPromise > pendingPromises ; <nl> - <nl> <nl> <nl> <nl>   } 
public class FakeContext implements Context { <nl> public Validation getValidation ( ) { <nl> return validation ; <nl> } <nl> + <nl> + <nl> + public String getPathParameterEncoded ( String name ) { <nl> + return this . getPathParameterEncoded ( name ) ; <nl> + } <nl> } <nl>   
public class SwipeFlingAdapterView extends BaseFlingAdapterView implements CardE <nl> <nl> { public View getSelectedView ( ) { { <nl> + if ( topView == null ) { <nl> + return null ; <nl> + } <nl> return topView . get ( ) ; <nl> } <nl>   } } 
<nl> package com . alibaba . druid . pool ; <nl> - import java . sql . SQLException ; <nl> import java . sql . Wrapper ; <nl> public class WrapperAdapter implements Wrapper { public void test ( ) { <nl>   } } 
public class UpgradeResourcePermissionTest extends UpgradeResourcePermission { <nl> <nl> public void setUp ( ) throws Exception { <nl> _company = CompanyTestUtil . addCompany ( ) ; <nl> + <nl> _user = UserTestUtil . addUser ( ) ; <nl> } <nl>   } 
import antlr . LexerSharedInputState ; <nl> <nl> <nl> <nl> <nl> <nl> public class UnicodeLexerSharedInputState extends LexerSharedInputState { <nl> private final UnicodeEscapingReader escapingReader ; <nl>   } 
class Searcher { public void test ( ) { { { <nl> logMatchesFound ( regex ) ; <nl> return false ; <nl> } <nl> - sleeper . sleep ( 1000 ) ; <nl> + sleeper . sleep ( ) ; <nl> } <nl> } <nl>   } 
public class MessageList extends K9FragmentActivity implements MessageListFragme <nl> <nl> { public void updateMenu ( ) { { <nl> - configureMenu ( mMenu ) ; <nl> + invalidateOptionsMenu ( ) ; <nl> } <nl> <nl>   } } 
public class WXEnvironment { <nl> public static final String SETTING_EXCLUDE_X86SUPPORT = " env_exclude_x86 " ; <nl> - public static final boolean SETTING_FORCE_VERTICAL_SCREEN = false ; <nl> + public static boolean SETTING_FORCE_VERTICAL_SCREEN = false ; <nl> <nl> <nl> <nl>   } 
public class DataStructures { public void test ( ) { <nl> System . out . println ( " Removing a previously added node " + next ) ; <nl> minHeap . remove ( next ) ; <nl> System . out . println ( minHeap . toString ( ) ) ; <nl> + System . out . println ( ) ; <nl> } <nl> { <nl>   } } 
public class FieldIntroduceHandler extends IntroduceHandler { <nl> <nl> protected String getHelpId ( ) { <nl> - return " refactoring . introduceField " ; <nl> + return " python . reference . introduceField " ; <nl> } <nl> <nl>   } 
public class TestJsonStringEncoder <nl> <nl> - <nl> { public void testQuoteLongCharSequenceAsString ( ) throws Exception <nl> { <nl> JsonStringEncoder encoder = new JsonStringEncoder ( ) ; <nl>   } } 
public final class Futures { public void test ( ) { { { { <nl> } <nl> } <nl> } <nl> - <nl> } <nl> <nl>   } 
public final class CollapsePropertiesTest extends CompilerTestCase { <nl> <nl> public CompilerPass getProcessor ( Compiler compiler ) { <nl> - System . err . println ( compiler . getCodingConvention ( ) ) ; <nl> return new CollapseProperties ( compiler , true ) ; <nl> } <nl>   } 
public class JsonCodeStyleSettingsProvider extends CodeStyleSettingsProvider { <nl> <nl> <nl> public String getHelpTopic ( ) { { { <nl> - return null ; <nl> + return " reference . settingsdialog . codestyle . json " ; <nl> } <nl> } ; <nl> } <nl>   } 
import java . io . Serializable ; <nl> <nl> public class MySerialBean implements Serializable { <nl> + private static final long serialVersionUID = 1L ; <nl> private int id ; <nl> private String name ; <nl>   } 
public class MetricsSystem { <nl> private MetricRegistry mMetricRegistry = new MetricRegistry ( ) ; <nl> private MetricsConfig mMetricsConfig ; <nl> private boolean mRunning = false ; <nl> - private Sink mMetricsServlet ; <nl> <nl> <nl>   } 
public class ClusterStateManager { <nl> private static final class StateManagerExceptionHandler implements FutureUtil . ExceptionHandler { <nl> private final ILogger logger ; <nl> + <nl> private Throwable error ; <nl> private StateManagerExceptionHandler ( ILogger logger ) { <nl>   } } } 
public class Tmp { public interface PConstants { <nl> static final int ARGB = 2 ; <nl> static final int HSB = 3 ; <nl> static final int ALPHA = 4 ; <nl> + static final int CMYK = 5 ; <nl> <nl>   } } 
public abstract class Pair < T1 , T2 > <nl> <nl> { public T1 first ( ) <nl> { { <nl> - return first ( ) ; <nl> + return first ; <nl> } <nl> <nl>   } } 
public class HazelcastXaTest { <nl> <nl> <nl> - <nl> public void testRecovery ( ) throws Exception { <nl> HazelcastInstance instance1 = Hazelcast . newHazelcastInstance ( ) ; <nl> HazelcastInstance instance2 = Hazelcast . newHazelcastInstance ( ) ; <nl>   } } 
public class Tmp { public enum RegExpCapability { <nl> OMIT_NUMBERS_IN_QUANTIFIERS , <nl> COMMENT_MODE , <nl> ALLOW_HEX_DIGIT_CLASS , <nl> + <nl> <nl> <nl> ALLOW_EMPTY_CHARACTER_CLASS , <nl> ALLOW_HORIZONTAL_WHITESPACE_CLASS , <nl> UNICODE_CATEGORY_SHORTHAND , <nl>   } } 
import java . util . List ; <nl> import org . springframework . stereotype . Component ; <nl> - <nl> public class PeriodicGraphUpdater { <nl> private UpdateTask updater ; <nl>   } 
public class SubtasksListFragment extends TaskListFragment { <nl> <nl> protected void onTaskDelete ( Task task ) { <nl> + super . onTaskDelete ( task ) ; <nl> helper . onDeleteTask ( task ) ; <nl> } <nl>   } 
public final class Realm implements Closeable { public void test ( ) { { { <nl> handler . sendEmptyMessage ( REALM_CHANGED ) ; <nl> } <nl> } <nl> - sendNotifications ( ) ; <nl> } <nl> <nl>   } 
public class NestedScrollView extends FrameLayout implements NestedScrollingPare <nl> <nl> { public void onAttachedToWindow ( ) { { <nl> + super . onAttachedToWindow ( ) ; <nl> + <nl> mIsLaidOut = false ; <nl> } <nl>   } } 
import java . util . * ; <nl> public class MessagePool { <nl> - private static int MAX_POOL_SIZE_FOR_FATALS = 2 ; <nl> + private static int MAX_POOL_SIZE_FOR_FATALS = 100 ; <nl> private static MessagePool ourInstance ; <nl>   } 
public class SmackAndroid { <nl> private SmackAndroid ( Context ctx ) { <nl> mCtx = ctx ; <nl> - ConfigureProviderManager . configureProviderManager ( ) ; <nl> InitStaticCode . initStaticCode ( ctx ) ; <nl> + ConfigureProviderManager . configureProviderManager ( ) ; <nl> maybeRegisterReceiver ( ) ; <nl> } <nl>   } 
public final class NIOConverter { public void test ( ) { { <nl> bytes = value . getBytes ( ) ; <nl> } <nl> buf . put ( bytes ) ; <nl> + buf . flip ( ) ; <nl> return buf ; <nl> } <nl>   } 
import org . codehaus . groovy . syntax . Types ; <nl> import java . io . BufferedWriter ; <nl> import java . io . IOException ; <nl> import java . io . Writer ; <nl> - import java . net . MalformedURLException ; <nl> import java . net . URL ; <nl> import java . util . * ; <nl>   
public class BufferPool { <nl> - protected static BufferPool instance = null ; <nl> + protected static volatile BufferPool instance = null ; <nl> protected BufferPoolAPI pool = null ; <nl> private BufferPool ( BufferPoolAPI pool ) { <nl>   } } 
public class JSONPointer { <nl> <nl> public JSONPointer ( List < String > refTokens ) { <nl> - this . refTokens = refTokens ; <nl> + this . refTokens = new ArrayList < String > ( refTokens ) ; <nl> } <nl> private String unescape ( String token ) { <nl>   } } 
package redis . clients . jedis ; <nl> import redis . clients . util . SafeEncoder ; <nl> - import java . nio . ByteBuffer ; <nl> import java . util . * ; <nl> public class BuilderFactory { <nl>   } 
public class RippleDrawable extends LayerDrawable { public void test ( ) { <nl> if ( super . setDrawableByLayerId ( id , drawable ) ) { <nl> if ( id == R . id . mask ) { <nl> mMask = drawable ; <nl> + mHasValidMask = false ; <nl> } <nl> return true ; <nl>   } } } 
public class DefaultGlobalDisplay extends GlobalDisplay <nl> { public void onError ( String message ) <nl> { { <nl> + dismissProgress ( ) ; <nl> showMessage ( GlobalDisplay . MSG_ERROR , errorCaption , message ) ; <nl> } <nl>   } } 
public class MapTileLayer extends BaseMapLayer { <nl> <nl> public void drawTileMap ( Canvas canvas , RotatedTileBox tileBox ) { <nl> + ITileSource map = this . map ; <nl> if ( map == null ) { <nl> return ; <nl> } <nl>   } } 
package org . bukkit . event . block ; <nl> import org . bukkit . Block ; <nl> - import org . bukkit . ItemStack ; <nl> import org . bukkit . Material ; <nl> import org . bukkit . event . Event ; <nl>   
public class StringServletResponse extends HttpServletResponseWrapper { <nl> public void setStatus ( int status ) { <nl> _status = status ; <nl> + <nl> + super . setStatus ( _status ) ; <nl> } <nl> public void setString ( String string ) { <nl>   } } 
public class SkeletonControl extends AbstractControl implements Cloneable { <nl> <nl> public void setSpatial ( Spatial spatial ) { <nl> + super . setSpatial ( spatial ) ; <nl> if ( spatial != null ) { <nl> Node node = ( Node ) spatial ; <nl> targets = findTargets ( node ) ; <nl>   } } } 
import org . springframework . mock . web . MockServletContext ; <nl> import org . springframework . util . Assert ; <nl> import java . io . IOException ; <nl> - import java . io . PrintStream ; <nl> import java . io . PrintWriter ; <nl> import java . util . HashMap ; <nl> import java . util . Map ; <nl>   
public class AccountHeaderBuilder { <nl> <nl> <nl> - protected boolean mDividerBelowHeader = false ; <nl> + protected boolean mDividerBelowHeader = true ; <nl> <nl> <nl>   } 
import java . io . File ; <nl> import java . util . * ; <nl> import java . util . concurrent . ExecutionException ; <nl> - import hex . GLMTest2 ; <nl> import hex . glm . GLM2 ; <nl> import hex . glm . GLMParams ; <nl> import water . * ; <nl>   
public class PhoneWindowManager implements WindowManagerPolicy { <nl> PowerManager . WakeLock mBroadcastWakeLock ; <nl> class SettingsObserver extends ContentObserver { <nl> - private ContentQueryMap mSettings ; <nl> - <nl> SettingsObserver ( Handler handler ) { <nl> super ( handler ) ; <nl> } <nl>   } } 
public class TrustAgentWrapper { <nl> <nl> public void destroy ( ) { <nl> + mContext . unregisterReceiver ( mBroadcastReceiver ) ; <nl> mHandler . removeMessages ( MSG_RESTART_TIMEOUT ) ; <nl> if ( ! mBound ) { <nl>   } } } 
public class Profile implements User { <nl> <nl> <nl> <nl> - public int getTimeZone ( ) { <nl> + } public Integer getTimeZone ( ) { <nl> return mTimeZone ; <nl> } <nl>   } 
package com . wrapp . floatlabelededittext ; <nl> + import com . wrapp . floatlabelededittext . Utils ; <nl> import android . annotation . TargetApi ; <nl> import android . content . Context ; <nl> import android . content . res . ColorStateList ; <nl>   
import cpw . mods . fml . common . eventhandler . SubscribeEvent ; <nl> import cpw . mods . fml . common . gameevent . PlayerEvent ; <nl> import buildcraft . BuildCraftBuilders ; <nl> import buildcraft . BuildCraftCore ; <nl> + import buildcraft . BuildCraftEnergy ; <nl> import buildcraft . BuildCraftFactory ; <nl> import buildcraft . BuildCraftSilicon ; <nl>   
public class ReformatCodeAction extends AnAction implements DumbAware { public void test ( ) { { { <nl> new ReformatCodeProcessor ( project , dir , dialog . isIncludeSubdirectories ( ) ) . run ( ) ; <nl> } <nl> } <nl> - return ; <nl> } <nl> final TextRange range ; <nl>   } 
public class WifiConfiguration implements Parcelable { <nl> <nl> <nl> public boolean isValid ( ) { <nl> - if ( SSID == null ) <nl> - return false ; <nl> if ( allowedKeyManagement == null ) <nl> return false ; <nl>   } } 
public class FragmentMain extends Fragment { public void test ( ) { <nl> searchView . setOnQueryTextListener ( onQuerySearchView ) ; <nl> menu . findItem ( R . id . menu_add ) . setVisible ( true ) ; <nl> - <nl> + <nl> mSearchCheck = false ; <nl> } <nl>   } 
public class NodeIndicesStats implements Streamable , Serializable , ToXContent { <nl> <nl> public RefreshStats refresh ( ) { <nl> - return this . refresh ( ) ; <nl> + return this . refreshStats ; <nl> } <nl> public RefreshStats getRefresh ( ) { <nl>   } } 
package serializers ; <nl> import de . undercouch . bson4jackson . BsonFactory ; <nl> - import de . undercouch . bson4jackson . BsonGenerator ; <nl> public class BsonJackson <nl> { public void test ( ) { <nl>   } } 
public abstract class Context { <nl> <nl> <nl> <nl> <nl> public static final String NETWORKMANAGEMENT_SERVICE = " network_management " ; <nl>   } 
public final class CameraManager { <nl> <nl> <nl> <nl> <nl> <nl> <nl> public static abstract class AvailabilityCallback { <nl>   } } 
package info . ata4 . unity ; <nl> <nl> public class DisUnity { <nl> - private static final String VERSION = " 0 . 1 . 3 " ; <nl> + private static final String VERSION = " 0 . 2 . 0 " ; <nl> public static String getVersion ( ) { <nl> return VERSION ; <nl>   } } 
package org . jivesoftware . smack ; <nl> import java . util . LinkedList ; <nl> - import java . util . Iterator ; <nl> import java . io . * ; <nl> import org . jivesoftware . smack . packet . Packet ; <nl>   
public class IdeRootPane extends JRootPane implements UISettingsListener { public void test ( ) { { { <nl> Disposer . dispose ( myStatusBar ) ; <nl> } <nl> removeToolbar ( ) ; <nl> + setJMenuBar ( null ) ; <nl> } <nl> super . removeNotify ( ) ; <nl> } <nl>   } 
import java . util . ResourceBundle ; <nl> <nl> <nl> <nl> <nl> <nl> public class SentenceWhitespaceRule extends Rule { public void test ( ) { <nl>   } } 
public class SlicedMapImpl implements MutableSlicedMap { <nl> <nl> public void clear ( ) { <nl> map . clear ( ) ; <nl> + collectiveSliceKeys = null ; <nl> } <nl> <nl>   } 
import org . junit . Test ; <nl> import org . mockitousage . IMethods ; <nl> import org . mockitoutil . TestBase ; <nl> + <nl> <nl> public class ThreadsShareAMockTest extends TestBase { <nl>   } 
public final class Response { <nl> <nl> <nl> public void setErrorException ( Exception ex ) { <nl> - errorException = ex ; <nl> + errorException = ex ; <nl> } <nl>   } 
public class TwitterSocialNetwork extends OAuthSocialNetwork { public void test ( ) { <nl> mSharedPreferences . edit ( ) <nl> . remove ( SAVE_STATE_KEY_OAUTH_TOKEN ) <nl> . remove ( SAVE_STATE_KEY_OAUTH_SECRET ) <nl> + . remove ( SAVE_STATE_KEY_USER_ID ) <nl> . apply ( ) ; <nl> mTwitter = null ; <nl>   } } 
public class ProjectSharingPreferencesPane extends ProjectPreferencesPane <nl> <nl> { public boolean onApply ( RProjectOptions prefs ) <nl> { { { <nl> - return true ; <nl> + return false ; <nl> } <nl> } <nl>   } } 
public class DSLPlatform { <nl> <nl> public String getName ( ) { <nl> - return " json / dsl - platform / minified " ; <nl> + return " minified - json / dsl - platform " ; <nl> } <nl> <nl>   } 
public final class LocalProperties implements Cloneable { public void test ( ) { { <nl> } <nl> - return isTrivial ( ) ; <nl> + return ! isTrivial ( ) ; <nl> } <nl>   } 
public class HadoopDruidIndexerConfig <nl> { public void setVersion ( DateTime version ) <nl> { { <nl> - this . version = version ; <nl> + this . version = version == null ? new DateTime ( ) : version ; <nl> } <nl> <nl>   } } 
public class Decoder extends DecoderBase { public void test ( ) { <nl> int first = tmpbuf [ 0 ] ; <nl> - in_progress . set_flags ( first ) ; <nl> + in_progress . set_flags ( first & Msg . more ) ; <nl> next_step ( in_progress , <nl> message_ready ) ; <nl>   } } 
public abstract class SlidingActivity extends AppCompatActivity { <nl> <nl> public void disableHeader ( ) { <nl> scroller . disableHeader ( ) ; <nl> + content . setPadding ( 0 , 0 , 0 , 0 ) ; <nl> } <nl> <nl>   } 
public class CoyoteOutputStream <nl> { public void print ( String s ) <nl> throws IOException { { <nl> - ob . write ( s ) ; <nl> + super . print ( s ) ; <nl> } <nl>   } } 
public class DataDiff { <nl> <nl> public boolean wasCompared ( ) { { <nl> - return true ; <nl> + return false ; <nl> } <nl> } <nl>   } 
public final class DlvDebugProcess extends DebugProcessImpl < RemoteVmConnection > <nl> <nl> { public void consume ( final DebuggerState o ) { <nl> if ( o . exited ) { <nl> - getSession ( ) . stop ( ) ; <nl> + stop ( ) ; <nl> return ; <nl> } <nl>   } } 
import java . net . SocketOptions ; <nl> <nl> public class LocalSocket implements Closeable { <nl> - private LocalSocketImpl impl ; <nl> + private final LocalSocketImpl impl ; <nl> private volatile boolean implCreated ; <nl> private LocalSocketAddress localAddress ; <nl> private boolean isBound ; <nl>   } 
public class PopupWindow { <nl> <nl> <nl> private void invokePopup ( WindowManager . LayoutParams p ) { <nl> + p . packageName = mContext . getPackageName ( ) ; <nl> mWindowManager . addView ( mPopupView , p ) ; <nl> } <nl>   } 
public class FastArray implements Cloneable { <nl> <nl> public String toString ( ) { { <nl> + if ( size ( ) == 0 ) return " [ ] " ; <nl> return toList ( ) . toString ( ) ; <nl> } <nl> } <nl>   } 
public class PsiGotoRelatedItem extends GotoRelatedItem { <nl> <nl> public PsiFile getContainingFile ( ) { { <nl> - return myElement . getContainingFile ( ) ; <nl> + return myElement instanceof PsiFile ? null : myElement . getContainingFile ( ) ; <nl> } <nl> } <nl>   } 
public abstract class NativeObject implements Cloneable { <nl> <nl> public void dispose ( ) { { <nl> if ( objectManager != null ) { <nl> - objectManager . markUnusedObject ( this ) ; <nl> + objectManager . enqueueUnusedObject ( this ) ; <nl> } <nl> } <nl> } <nl>   } 
public class IndexPrimaryShardNotAllocatedException extends IndexException { <nl> <nl> public RestStatus status ( ) { { <nl> - return RestStatus . CONFLICT ; <nl> + return RestStatus . INTERNAL_SERVER_ERROR ; <nl> } <nl> } <nl>   } 
package net . simonvt . menudrawer . compat ; <nl> - import net . simonvt . menudrawer . BuildConfig ; <nl> - <nl> import android . app . Activity ; <nl> import android . graphics . drawable . Drawable ; <nl> import android . os . Build ; <nl>   
class NewPropertyAction extends AnAction { <nl> <nl> public boolean checkInput ( final String inputString ) { <nl> - return true ; <nl> + return ! inputString . isEmpty ( ) ; <nl> } <nl> <nl>   } 
public class StickyListHeadersListView extends FrameLayout { <nl> <nl> <nl> - protected void onRestoreInstanceState ( Parcelable state ) { <nl> + public void onRestoreInstanceState ( Parcelable state ) { <nl> super . onRestoreInstanceState ( BaseSavedState . EMPTY_STATE ) ; <nl> mList . onRestoreInstanceState ( state ) ; <nl> } <nl>   } } 
public class MockitoConfiguration { <nl> <nl> public void setReturnValues ( ReturnValues returnValues ) { <nl> + <nl> this . returnValues = returnValues ; <nl> } <nl>   } 
public abstract class ATransformable3D { <nl> <nl> public Quaternion getOrientation ( ) { <nl> + setOrientation ( ) ; <nl> return new Quaternion ( mOrientation ) ; <nl> } <nl>   } 
public class MappedRecordSet <nl> <nl> { public Type getType ( int field ) <nl> { { <nl> - return delegate . getType ( field ) ; <nl> + return delegate . getType ( toDelegateField ( field ) ) ; <nl> } <nl> <nl>   } } 
public abstract class Animator implements Disposable { <nl> <nl> public void suspend ( ) { <nl> + myStartTime = - 1 ; <nl> stopTicker ( ) ; <nl> } <nl>   } 
package liquibase . structure . core ; <nl> import liquibase . structure . AbstractDatabaseObject ; <nl> import liquibase . structure . DatabaseObject ; <nl> - import sun . security . util . BigInt ; <nl> import java . math . BigInteger ; <nl>   
public class AsmClassGenerator extends ClassGenerator { <nl> <nl> public void visitBlockStatement ( BlockStatement block ) { <nl> - onLineNumber ( block , " visitBlockStatement " ) ; <nl> visitStatement ( block ) ; <nl> int mark = controller . getOperandStack ( ) . getStackLength ( ) ; <nl>   } } 
public final class LineageMasterTest { public void test ( ) { <nl> } <nl> <nl> <nl> <nl> <nl> <nl> <nl>   } 
public class AndroidSdkImpl extends AndroidSdk { <nl> <nl> public int getPlatformToolsRevision ( ) { <nl> - return myPlatformToolsRevision ; <nl> + <nl> + return 7 ; <nl> } <nl> private static class MyTargetWrapper implements IAndroidTarget { <nl>   } } 
public class TelephonyManager { <nl> <nl> <nl> <nl> - public static final boolean EMERGENCY_ASSISTANCE_ENABLED = false ; <nl> + public static final boolean EMERGENCY_ASSISTANCE_ENABLED = true ; <nl> <nl> <nl>   } 
public final class EmbeddedNeo implements NeoService <nl> { public EmbeddedNeo ( String storeDir ) <nl> { { <nl> - <nl> + this . shellServer = null ; <nl> + NeoJvmInstance . start ( null , storeDir , true ) ; <nl> } <nl> <nl>   } } 
public class DruidDataSource extends DruidAbstractDataSource <nl> { public boolean isClosed ( ) { { { { <nl> return this . closed ; <nl> } <nl> - } <nl> } <nl>   } } 
public class MockitoTest extends TestBase { <nl> public void shouldValidateMockWhenCreatingInOrderObject ( ) { { <nl> Mockito . inOrder ( " notMock " ) ; <nl> } <nl> + <nl> + <nl> + <nl> } <nl>   } 
public class K9 extends Application <nl> <nl> { public static int DEFAULT_VISIBLE_LIMIT = 25 ; <nl> - public static int MAX_SEND_ATTEMPTS = 5 ; <nl> + public static int MAX_SEND_ATTEMPTS = 1 ; <nl> <nl> <nl>   } 
class InterceptedInvocation implements Invocation , VerificationAwareInvocation { <nl> <nl> public int hashCode ( ) { <nl> + <nl> return 1 ; <nl> } <nl>   } 
public final class EmailIntentSenderFactory implements ReportSenderFactory { <nl> <nl> <nl> public ReportSender create ( Context context , ACRAConfiguration config ) { { <nl> - return new EmailIntentSender ( context , config ) ; <nl> + return new EmailIntentSender ( config ) ; <nl> } <nl> } <nl>   } 
public class JBScrollPane extends JScrollPane { <nl> public void setUI ( ScrollPaneUI ui ) { <nl> super . setUI ( ui ) ; <nl> updateViewportBorder ( ) ; <nl> + setBorder ( IdeBorderFactory . createBorder ( ) ) ; <nl> } <nl> <nl>   } 
class MockTaskManager implements TaskOperationProtocol { <nl> public void recoverAll ( ChannelID sourceChannelID ) { <nl> } <nl> + <nl> + public void restart ( ExecutionVertexID executionVertexID ) { <nl> + } <nl> + <nl> } <nl>   
public final class PowerHandler { public void test ( ) { <nl> <nl> <nl> <nl> <nl> <nl> <nl> <nl> <nl>   } } 
public class SSLCertificateSocketFactory extends SSLSocketFactory { <nl> <nl> public String [ ] getDefaultCipherSuites ( ) { <nl> - return getDelegate ( ) . getSupportedCipherSuites ( ) ; <nl> + return getDelegate ( ) . getDefaultCipherSuites ( ) ; <nl> } <nl> <nl>   } 
public class CompileStack implements Opcodes { public void test ( ) { <nl> superBlockNamedLabels . clear ( ) ; <nl> currentBlockNamedLabels . clear ( ) ; <nl> namedLoopBreakLabel . clear ( ) ; <nl> + namedLoopContinueLabel . clear ( ) ; <nl> continueLabel = null ; <nl> breakLabel = null ; <nl> finallyLabel = null ; <nl>   } } 
import org . springframework . util . ReflectionUtils ; <nl> <nl> <nl> <nl> - class RuntimeTestWlalker { <nl> + class RuntimeTestWalker { <nl> private static final Field residualTestField ; <nl>   } } 
public class InternalAprOutputBuffer extends AbstractOutputBuffer < Long > { <nl> <nl> - <nl> <nl> <nl> <nl> protected synchronized boolean flushBuffer ( boolean block ) <nl> throws IOException { <nl>   } } 
public class PipeTransportItems extends PipeTransport { public void test ( ) { <nl> item . setSpeed ( packet . getSpeed ( ) ) ; <nl> + item . toCenter = true ; <nl> item . input = packet . getInputOrientation ( ) ; <nl> item . output = packet . getOutputOrientation ( ) ; <nl> item . color = packet . getColor ( ) ; <nl>   } } 
public class AutomaticRenamingDialog extends DialogWrapper { public void test ( ) { { { <nl> for ( final int row : rows ) { <nl> myShouldRename [ row ] = valueToBeSet ; <nl> } <nl> - fireTableDataChanged ( ) ; <nl> + fireDataChanged ( ) ; <nl> } <nl> } <nl> } <nl>   } 
public class CustomViewBehind extends ViewGroup { <nl> <nl> public boolean menuOpenTouchAllowed ( View content , int currPage , float x ) { <nl> - if ( true ) <nl> - return true ; <nl> switch ( mTouchMode ) { <nl> case SlidingMenu . TOUCHMODE_FULLSCREEN : <nl> return true ; <nl>   } } } 
import java . util . List ; <nl> <nl> <nl> <nl> - public class ShortcutBadger { <nl> + public final class ShortcutBadger { <nl> private static final String LOG_TAG = ShortcutBadger . class . getSimpleName ( ) ; <nl>   } } 
import javax . annotation . concurrent . ThreadSafe ; <nl> <nl> <nl> <nl> - public class LineageFileSystem extends BaseFileSystem { <nl> + public final class LineageFileSystem extends BaseFileSystem { <nl> private LineageContext mLineageContext ; <nl> <nl>   } } 
public class DeskShareStream implements NewScreenListener { <nl> private String outStreamName ; <nl> private IScope scope ; <nl> - public static final int LARGER_DIMENSION = 1000 ; <nl> + public static final int LARGER_DIMENSION = 1280 ; <nl> <nl>   } 
public class SchemaResolver implements EntityResolver { <nl> <nl> <nl> <nl> + <nl> public InputSource resolveEntity ( String publicId , String systemId ) <nl> throws SAXException { <nl>   } } 
public class JavaSourceProcessor extends BaseSourceProcessor { public void test ( ) { { <nl> } <nl> } <nl> + <nl> + <nl> String newContent = checkJavaFieldTypes ( <nl> fileName , packagePath , className , content ) ; <nl>   } 
public class JavaStackFrame extends XStackFrame { <nl> <nl> <nl> public Object getEqualityObject ( ) { { <nl> - return getStackFrameProxy ( ) . hashCode ( ) ; <nl> + return myDescriptor . getMethod ( ) ; <nl> } <nl> } <nl>   } 
public class Geometry3D { <nl> <nl> public void setBuffersCreated ( boolean created ) { { <nl> - mHaveCreatedBuffers = created ; <nl> + mHaveCreatedBuffers = created ; <nl> } <nl> } <nl>   } 
import gnu . trove . map . hash . TLongObjectHashMap ; <nl> public class GeoIntentActivity extends OsmandListActivity { <nl> - private static final String TAG = " GeoIntentActivity " ; <nl> private ProgressDialog progressDlg ; <nl> private LatLon location ; <nl>   } 
public class AprEndpoint extends AbstractEndpoint < Long > { public void test ( ) { { <nl> } <nl> removeFromPoller ( socket ) ; <nl> destroySocket ( socket ) ; <nl> + closeList . remove ( socket ) ; <nl> socket = timeouts . check ( date ) ; <nl> } <nl>   } 
public final class MessageList < T > implements Iterable < T > { <nl> <nl> public void remove ( ) { { { <nl> - throw new UnsupportedOperationException ( " Read - Only " ) ; <nl> + throw new UnsupportedOperationException ( ) ; <nl> } <nl> } <nl> } <nl>   } 
public class NetworkCatalogTree extends NetworkTree { <nl> <nl> public String getName ( ) { <nl> - return Item . Title . toString ( ) ; <nl> + return Item . Title != null ? Item . Title . toString ( ) : " " ; <nl> } <nl> <nl>   } 
public class PyNonAsciiCharInspection extends PyInspection { <nl> <nl> public void visitPyStringLiteralExpression ( PyStringLiteralExpression node ) { { <nl> - checkString ( node , node . getStringValue ( ) ) ; <nl> + checkString ( node , node . getText ( ) ) ; <nl> } <nl> } <nl>   } 
public abstract class DGLM { public void test ( ) { <nl> _deviance = dev ; <nl> _nullDeviance = nDev ; <nl> _n = n ; <nl> - System . out . println ( " N = " + _n + " , rank = " + rank ) ; <nl> _aic = aic + 2 * rank ; <nl> } <nl>   } 
public class Note extends Syncable { <nl> <nl> <nl> <nl> - public JSONObject getDiffableValue ( ) { <nl> + synchronized } public JSONObject getDiffableValue ( ) { <nl> return mNoteJSON ; <nl> } <nl>   } 
public class SSLHostConfigCertificate { <nl> <nl> } <nl> - private static enum StoreType { <nl> + private enum StoreType { <nl> KEYSTORE , <nl> PEM <nl> } <nl>   } 
public class GracePeriodTest { public void test ( ) { { <nl> sut . close ( ) ; <nl> sut . join ( ) ; <nl> } <nl> + DateTimeUtils . setCurrentMillisSystem ( ) ; <nl> } <nl> <nl>   } 
public class PolygonSpriteBatch implements Batch { <nl> <nl> public boolean isDrawing ( ) { { <nl> - return false ; <nl> + return drawing ; <nl> } <nl> } <nl>   } 
public class XmlNamespace extends RubyObject { public void test ( ) { <nl> this . href = href ; <nl> this . prefixString = prefixString ; <nl> this . hrefString = hrefString ; <nl> - this . attr . setUserData ( CACHED_NODE , this , null ) ; <nl> setInstanceVariable ( " " , xmlDocument ) ; <nl> } <nl>   } 
public class PGraphics extends PImage implements PConstants { public void test ( ) { <nl> vertex [ X ] = x ; <nl> vertex [ Y ] = y ; <nl> + vertex [ Z ] = 0 ; <nl> vertex [ EDGE ] = edge ? 1 : 0 ; <nl>   } } 
public class AsmClassGenerator extends ClassGenerator { <nl> <nl> public void visitBlockStatement ( BlockStatement block ) { <nl> - onLineNumber ( block , " visitBlockStatement " ) ; <nl> visitStatement ( block ) ; <nl> int mark = controller . getOperandStack ( ) . getStackLength ( ) ; <nl>   } } 
public class TesterServletContext implements ServletContext { <nl> <nl> public Object getAttribute ( String name ) { <nl> - throw new RuntimeException ( " Not implemented " ) ; <nl> + <nl> + return null ; <nl> } <nl> <nl>   } 
public class PhotoManager { <nl> <nl> public void cancelTask ( Object token ) { <nl> - backgroundHandler . removeCallbacksAndMessages ( token ) ; <nl> + if ( token != null ) { <nl> + backgroundHandler . removeCallbacksAndMessages ( token ) ; <nl> + } <nl> } <nl> public void acquireBitmap ( Bitmap b ) { <nl>   } } 
public class JSSESupport implements SSLSupport , SSLSessionManager { <nl> private SSLSession session ; <nl> - JSSESupport ( SSLSession session ) { <nl> + public JSSESupport ( SSLSession session ) { <nl> this . session = session ; <nl> } <nl>   } } 
public class Mockito extends Matchers { <nl> <nl> <nl> <nl> - public static VerificationAfterDelay after ( int millis ) { <nl> + } public static VerificationAfterDelay after ( long millis ) { <nl> return new After ( millis , VerificationModeFactory . times ( 1 ) ) ; <nl> } <nl>   } 
import java . text . SimpleDateFormat ; <nl> import java . util . Date ; <nl> import java . util . Locale ; <nl> - <nl> <nl> <nl> <nl>   
public class UpdateConfigurable extends BaseConfigurable { <nl> <nl> public String getHelpTopic ( ) { <nl> - return null ; <nl> + return " reference . versionControl . cvs . options " ; <nl> } <nl> public JComponent createComponent ( ) { <nl>   } } 
public final class EmbeddedNeo implements NeoService <nl> { public EmbeddedNeo ( String storeDir ) <nl> { { <nl> - <nl> + this . shellServer = null ; <nl> + NeoJvmInstance . start ( null , storeDir , true ) ; <nl> } <nl> <nl>   } } 
public class ImmediateAuthenticationMechanismFactory implements AuthenticationMe <nl> <nl> { public AuthenticationMechanism create ( String mechanismName , FormParserFactory formParserFactory , Map < String , String > properties ) { { { <nl> - return null ; <nl> + return authenticationMechanism ; <nl> } <nl> } <nl>   } } 
public class Http11Processor extends AbstractHttp11Processor < Socket > { public void test ( ) { <nl> <nl> error = false ; <nl> keepAlive = true ; <nl> + comet = false ; <nl> if ( maxKeepAliveRequests > 0 ) { <nl> socketWrapper . decrementKeepAlive ( ) ; <nl>   } } } 
public class GoConfigurableProvider extends ConfigurableProvider { <nl> public static class GoProjectSettingsConfigurable extends GoModuleAwareConfigurable { <nl> } public GoProjectSettingsConfigurable ( Project project ) { <nl> - super ( project , " Project settings " , null ) ; <nl> + super ( project , " Project Settings " , null ) ; <nl> } <nl> <nl>   } 
public abstract class AbstractFindUsagesDialog extends DialogWrapper { public void test ( ) { <nl> myProject = project ; <nl> myFindUsagesOptions = findUsagesOptions ; <nl> myToShowInNewTab = toShowInNewTab ; <nl> - myIsShowInNewTabEnabled = mustOpenInNewTab ; <nl> + myIsShowInNewTabEnabled = ! mustOpenInNewTab ; <nl> myIsShowInNewTabVisible = ! isSingleFile ; <nl> mySearchForTextOccurencesAvailable = searchForTextOccurencesAvailable ; <nl> mySearchInLibrariesAvailable = searchInLibrariesAvailable ; <nl>   } } 
public class JSONException extends RuntimeException { <nl> <nl> <nl> <nl> - public JSONException ( String message , Throwable cause ) { <nl> + } public JSONException ( final String message , final Throwable cause ) { <nl> super ( message , cause ) ; <nl> } <nl>   } 
public class ExtensionStdMenus extends ExtensionAdaptor { <nl> private void initialize ( ) { <nl> this . setName ( NAME ) ; <nl> - this . setOrder ( 37 ) ; <nl> + this . setOrder ( 31 ) ; <nl> } <nl> <nl>   } 
public class GwtGraphics implements Graphics { <nl> <nl> public boolean isContinuousRendering ( ) { <nl> - return false ; <nl> + return true ; <nl> } <nl> <nl>   } 
public class StringUtils { { <nl> <nl> return new String ( randBuffer ) ; <nl> } <nl> + <nl> + private StringUtils ( ) { <nl> + <nl> + } <nl> } <nl>   
public class HgVcs extends AbstractVcs < CommittedChangeList > { <nl> <nl> <nl> + public boolean fileListenerIsSynchronous ( ) { <nl> + return false ; <nl> + } <nl> + <nl> + <nl> public CommittedChangesProvider getCommittedChangesProvider ( ) { <nl> return commitedChangesProvider ; <nl> } <nl>   } 
public abstract class SquidDatabase { <nl> <nl> <nl> <nl> + <nl> protected void setFastInsertEnabled ( boolean enabled ) { <nl> fastInsertEnabled = enabled ; <nl> } <nl>   } 
public class Tmp { public interface JsonProvider { <nl> Object createMap ( ) ; <nl> - Iterable createArray ( ) ; <nl> + Object createArray ( ) ; <nl> Object clone ( Object model ) ; <nl>   } } 
public class CordovaWebViewImpl implements CordovaWebView { public void test ( ) { { { <nl> } <nl> return true ; <nl> } <nl> + LOG . w ( TAG , " Blocked navigation because URL was not whitelisted : " + url ) ; <nl> <nl> return true ; <nl> } <nl>   } 
package org . mongodb . impl ; <nl> - import org . mongodb . MongoClient ; <nl> import org . mongodb . MongoClientOptions ; <nl> import org . mongodb . MongoClientURI ; <nl> import org . mongodb . ServerAddress ; <nl>   
public class WifiConfiguration implements Parcelable { <nl> <nl> public static final String hiddenSSIDVarName = " scan_ssid " ; <nl> + <nl> public class EnterpriseField { <nl> private String varName ; <nl> private String value ; <nl>   } } 
public class BootstrapThumbnail extends FrameLayout <nl> { public void setImage ( int drawable ) <nl> { { <nl> this . placeholder . setBackgroundResource ( drawable ) ; <nl> + invalidate ( ) ; <nl> + requestLayout ( ) ; <nl> } <nl> <nl>   } } 
public final class AsyncHttpClientConfigDefaults { <nl> <nl> public static boolean defaultAcceptAnyCertificate ( ) { { <nl> - return getBooleanValue ( ASYNC_CLIENT + " acceptAnyCertificate " , false ) ; <nl> + return getBoolean ( ASYNC_CLIENT + " acceptAnyCertificate " , false ) ; <nl> } <nl> } <nl>   } 
public class NotificationBuilder extends NotificationCompat . Builder { <nl> <nl> public NotificationCompat . Builder setNumber ( int number ) { <nl> + super . setNumber ( number ) ; <nl> mNumber = number ; <nl> return this ; <nl> } <nl>   } 
public class PortletDisplay implements Serializable { public void test ( ) { <nl> _namespace = StringPool . BLANK ; <nl> _portletName = StringPool . BLANK ; <nl> _portletSetup = null ; <nl> - _portletToolbar = null ; <nl> _resourcePK = StringPool . BLANK ; <nl> _restoreCurrentView = false ; <nl> _rootPortletId = StringPool . BLANK ; <nl>   } } 
public class NotificationUsageStats { <nl> private final SQLiteLog mSQLiteLog ; <nl> private final Context mContext ; <nl> private final Handler mHandler ; <nl> - private final Handler mHandler ; <nl> private long mLastEmitTime ; <nl> public NotificationUsageStats ( Context context ) { <nl>   } } 
public class HttpRequestTest extends ServerTestCase { public void test ( ) { { <nl> int code = get ( url ) . code ( ) ; <nl> assertEquals ( 200 , code ) ; <nl> } <nl> - <nl> } <nl>   } 
public class VerificationModeImpl implements VerificationMode { <nl> enum Verification { EXPLICIT , NO_MORE_WANTED ; <nl> private final Integer wantedInvocationCount ; <nl> + <nl> private final Integer minInvocationCount ; <nl> private final List < ? extends Object > mocksToBeVerifiedInOrder ; <nl> private final Verification verification ; <nl>   } } 
public class ImageWallpaper extends WallpaperService { <nl> private static final boolean DEBUG = false ; <nl> static final boolean FIXED_SIZED_SURFACE = true ; <nl> - static final boolean USE_OPENGL = false ; <nl> + static final boolean USE_OPENGL = true ; <nl> WallpaperManager mWallpaperManager ; <nl>   } 
public final class Gmail { public void test ( ) { <nl> if ( unreadConversations == null ) { <nl> return 0 ; <nl> } else { <nl> - return unreadConversations ; <nl> + return unreadConversations < 0 ? 0 : unreadConversations ; <nl> } <nl> } <nl>   } 
public class SQLDemoActivity extends Activity { <nl> private void addEvent ( String title ) { <nl> SQLiteDatabase db = eventsData . getWritableDatabase ( ) ; <nl> + <nl> + <nl> ContentValues values = new ContentValues ( ) ; <nl> values . put ( EventDataSQLHelper . TIME , System . currentTimeMillis ( ) ) ; <nl> values . put ( EventDataSQLHelper . TITLE , title ) ; <nl>   } } 
public class BuildCraftSilicon extends BuildCraftMod { public void test ( ) { <nl> BuildCraftCore . mainConfiguration . save ( ) ; <nl> laserBlock = new BlockLaser ( ) ; <nl> + laserBlock . setBlockName ( " laserBlock " ) ; <nl> CoreProxy . proxy . registerBlock ( laserBlock ) ; <nl> assemblyTableBlock = new BlockLaserTable ( ) ; <nl>   } } 
public class KeyguardManager { <nl> <nl> public boolean isKeyguardLocked ( ) { <nl> try { <nl> - return mWM . isKeyguardSecure ( ) ; <nl> + return mWM . isKeyguardLocked ( ) ; <nl> } catch ( RemoteException ex ) { <nl> return false ; <nl> } <nl>   } } 
public class AsyncHttpClientConfig { public void test ( ) { <nl> strict302Handling = prototype . isStrict302Handling ( ) ; <nl> useRelativeURIsWithSSLProxies = prototype . isUseRelativeURIsWithSSLProxies ( ) ; <nl> timeConverter = prototype . getTimeConverter ( ) ; <nl> + acceptAnyCertificate = prototype . isAcceptAnyCertificate ( ) ; <nl> } <nl> <nl>   } 
final public class H2O { public void test ( ) { <nl> <nl> new HeartBeatThread ( ) . start ( ) ; <nl> - startGAStartupReport ( ) ; <nl> + if ( GA != null ) <nl> + startGAStartupReport ( ) ; <nl> } <nl> <nl>   } 
public final class Cache { <nl> public static synchronized void clear ( ) { <nl> sEntities . evictAll ( ) ; <nl> - ; <nl> Log . v ( " Cache cleared . " ) ; <nl> } <nl>   } 
public final class FileSystemWorker extends AbstractWorker { <nl> <nl> <nl> public void stop ( ) { <nl> + mSessionCleaner . stop ( ) ; <nl> if ( mFilePersistenceService != null ) { <nl> mFilePersistenceService . cancel ( true ) ; <nl> } <nl>   } } 
public abstract class AbstractPythonRunConfiguration extends ModuleBasedConfigur <nl> { public AbstractPythonRunConfiguration ( final String name , final RunConfigurationModule module , final ConfigurationFactory factory ) { <nl> super ( name , module , factory ) ; <nl> + module . init ( ) ; <nl> } <nl> public List < Module > getValidModules ( ) { <nl>   } } 
public class BookCollection extends AbstractBookCollection { public void test ( ) { <nl> final Book book = getBookByFile ( file ) ; <nl> if ( book != null ) { <nl> saveBook ( book ) ; <nl> + getHash ( book ) ; <nl> } <nl> } <nl>   } 
public class SpringCli { <nl> <nl> public String getUsageHelp ( ) { <nl> - return null ; <nl> + return " command " ; <nl> } <nl> <nl>   } 
public class Animation3D { <nl> long timeInPause ; <nl> boolean wasPaused = false ; <nl> - public void run ( ) { <nl> + } public void run ( ) { <nl> if ( mIsPaused ) { <nl> if ( ! wasPaused ) timeInPause = SystemClock . uptimeMillis ( ) ; <nl> wasPaused = true ; <nl>   } } } 
public final class PreconditionMessage { <nl> public static final String ERR_PUT_NULL_KEY = " Cannot put a null key " ; <nl> public static final String ERR_PUT_NULL_VALUE = " Cannot put a null value " ; <nl> - <nl> private PreconditionMessage ( ) { } <nl> } <nl>   
public class BitmapUtils implements BitmapGlobalConfigChangeCallBack { <nl> <nl> public void stopTasks ( ) { <nl> + mPause = true ; <nl> synchronized ( mPauseWorkLock ) { <nl> mPauseWorkLock . notifyAll ( ) ; <nl> } <nl>   } } 
public class LocalActivityManager { public void test ( ) { <nl> if ( r != null ) { <nl> win = performDestroy ( r , finish ) ; <nl> if ( finish ) { <nl> - mActivities . remove ( r ) ; <nl> + mActivities . remove ( id ) ; <nl> } <nl> } <nl> return win ; <nl>   } } 
public class CommandLineArguments { <nl> <nl> public boolean isLocal ( ) { <nl> - return true ; <nl> + return local ; <nl> } <nl> public void setDebug ( boolean debug ) { <nl>   } } 
public class DefaultProjectProfileManager extends ProjectProfileManager { <nl> <nl> public Map < String , Profile > getProfiles ( ) { <nl> + getProjectProfileImpl ( ) ; <nl> return myProfiles ; <nl> } <nl>   } 
public class LayoutLocalServiceImpl extends LayoutLocalServiceBaseImpl { public void test ( ) { <nl> <nl> <nl> <nl> <nl> <nl> <nl>   } } 
public class DragSortListView extends ListView { public void test ( ) { { { <nl> divider . setBounds ( l , t , r , b ) ; <nl> divider . draw ( canvas ) ; <nl> - Log . d ( " mobeta " , " drawing divider " ) ; <nl> } <nl> } <nl> } <nl>   } 
public class SyncStorageEngine extends Handler { public void test ( ) { { { <nl> syncs = new ArrayList < SyncInfo > ( ) ; <nl> mCurrentSyncs . put ( userId , syncs ) ; <nl> } <nl> - return new ArrayList < SyncInfo > ( syncs ) ; <nl> + return syncs ; <nl> } <nl> } <nl>   } 
import java . util . List ; <nl> import java . util . concurrent . ConcurrentHashMap ; <nl> import java . util . concurrent . ConcurrentMap ; <nl> - import com . sun . tools . javac . resources . version ; <nl> import org . bson . io . PoolOutputBuffer ; <nl> <nl>   
public class PortletDataContextImpl implements PortletDataContext { public void test ( ) { <nl> _userIdStrategy = null ; <nl> _startDate = startDate ; <nl> _endDate = endDate ; <nl> - _xStream = new XStream ( ) ; <nl> _zipReader = null ; <nl> _zipWriter = zipWriter ; <nl>   } } 
public class RecyclerView extends ViewGroup { public void test ( ) { <nl> if ( mEatRunOnAnimationRequest ) { <nl> mReSchedulePostAnimationCallback = true ; <nl> } else { <nl> + removeCallbacks ( this ) ; <nl> ViewCompat . postOnAnimation ( RecyclerView . this , this ) ; <nl> } <nl> } <nl>   } 
public class Runtime { <nl> public World getWorld ( ) { <nl> return world ; <nl> } <nl> - <nl> - public void setWorld ( World world ) { <nl> - this . world = world ; <nl> - } <nl> } <nl>   
public class BlockedNumberContract { <nl> <nl> public final long untilTimestampMillis ; <nl> - BlockSuppressalStatus ( boolean isSuppressed , long untilTimestampMillis ) { <nl> + } public BlockSuppressalStatus ( boolean isSuppressed , long untilTimestampMillis ) { <nl> this . isSuppressed = isSuppressed ; <nl> this . untilTimestampMillis = untilTimestampMillis ; <nl> } <nl>   } 
import org . jetbrains . annotations . Nullable ; <nl> <nl> <nl> <nl> <nl> <nl> public class PyResolveUtil { <nl> private PyResolveUtil ( ) { <nl>   } } 
public class ClientBootstrap extends Bootstrap { public void test ( ) { { { <nl> } <nl> } while ( future == null ) ; <nl> - pipeline . remove ( pipeline . get ( " connector " ) ) ; <nl> - <nl> return future ; <nl> } <nl>   } 
public class FocusWatcher implements ContainerListener , FocusListener { public void test ( ) { <nl> if ( getFocusedComponent ( ) == component ) { <nl> setFocusedComponentImpl ( null , cause ) ; <nl> } <nl> + myTopComponent = null ; <nl> } <nl> <nl>   } 
public class FileChecker extends BaseChecker { public void test ( ) { <nl> <nl> if ( _rootDir != null ) { <nl> + paths . add ( _rootDir ) ; <nl> paths . add ( _rootDir + " - " ) ; <nl> } <nl>   } } 
public final class OperatorZipIterable < T1 , T2 , R > implements Operator < R , T1 > { <nl> <nl> public void onError ( Throwable e ) { <nl> if ( done ) { <nl> + Exceptions . throwIfFatal ( e ) ; <nl> return ; <nl> } <nl> done = true ; <nl>   } } 
public abstract class PullToRefreshBase < T extends View > extends LinearLayout { <nl> <nl> + <nl> + public void setLongClickable ( boolean longClickable ) { { <nl> + getRefreshableView ( ) . setLongClickable ( longClickable ) ; <nl> + } <nl> } <nl>   } 
class SnackContainer extends FrameLayout { <nl> public void clearSnacks ( boolean animate ) { <nl> mSnacks . clear ( ) ; <nl> + removeCallbacks ( mHideRunnable ) ; <nl> if ( animate ) mHideRunnable . run ( ) ; <nl> } <nl>   } 
public class TypedTableDefinition { public void test ( ) { <nl> java . util . Date dateCol ; <nl> double doubleCol ; <nl> int intCol ; <nl> - long longCol ; <nl> float floatCol ; <nl> String stringCol ; <nl> byte [ ] byteCol ; <nl>   } } 
public class StaticLayout extends Layout { public void test ( ) { { { <nl> } <nl> if ( mLineCount >= mMaximumVisibleLineCount ) { <nl> - break ; <nl> + return ; <nl> } <nl> } <nl> } <nl>   } 
public class MediaRouteButton extends View { public void test ( ) { { { { { <nl> } <nl> } <nl> } <nl> - <nl> - setEnabled ( mRouter . isRouteAvailable ( mSelector , <nl> - MediaRouter . AVAILABILITY_FLAG_IGNORE_DEFAULT_ROUTE ) ) ; <nl> } <nl> } <nl>   } 
public class GitCheckinEnvironment implements CheckinEnvironment { <nl> <nl> public boolean isRefreshAfterCommitNeeded ( ) { <nl> - return false ; <nl> + return true ; <nl> } <nl> <nl>   } 
public class SearchView extends LinearLayout implements CollapsibleActionView { <nl> <nl> <nl> - public void onDetachedFromWindow ( ) { <nl> + protected void onDetachedFromWindow ( ) { <nl> removeCallbacks ( mUpdateDrawableStateRunnable ) ; <nl> super . onDetachedFromWindow ( ) ; <nl> } <nl>   } } 
import org . geometerplus . zlibrary . core . util . ZLNetworkUtil ; <nl> import org . geometerplus . fbreader . network . atom . ATOMLink ; <nl> class CatalogInfoReader implements OPDSFeedReader { <nl> - <nl> public boolean FeedStarted ; <nl> public String Icon ; <nl> public String Title ; <nl>   } 
public class SweetAlertDialog extends Dialog implements View . OnClickListener { <nl> <nl> protected void onStart ( ) { <nl> + getWindow ( ) . getDecorView ( ) . getBackground ( ) . setAlpha ( 255 ) ; <nl> mDialogView . startAnimation ( mModalInAnim ) ; <nl> playAnimation ( ) ; <nl> } <nl>   } 
public class XMLChangeLogSAXParser implements ChangeLogParser { <nl> <nl> public static String getSchemaVersion ( ) { <nl> - return " 3 . 1 " ; <nl> + return " 3 . 2 " ; <nl> } <nl> <nl>   } 
import com . googlecode . totallylazy . Option ; <nl> import com . googlecode . totallylazy . annotations . multimethod ; <nl> import com . googlecode . totallylazy . functions . Reducer ; <nl> import javarepl . expressions . * ; <nl> + import javarepl . expressions . Type ; <nl> import javarepl . expressions . Value ; <nl> import javax . tools . DiagnosticCollector ; <nl>   
class LogbackModule extends Module { <nl> <nl> public String getModuleName ( ) { <nl> - return " log4j " ; <nl> + return " LogbackModule " ; <nl> } <nl> <nl>   } 
public class IntIntMap { public void test ( ) { <nl> if ( index < lastIndex ) { <nl> keyTable [ index ] = keyTable [ lastIndex ] ; <nl> valueTable [ index ] = valueTable [ lastIndex ] ; <nl> - valueTable [ lastIndex ] = 0 ; <nl> } <nl> } <nl>   } 
public class PlayerProfile { public void test ( ) { <nl> <nl> <nl> <nl> <nl> <nl> <nl>   } } 
public class ForegroundLinearLayout extends LinearLayoutCompat { <nl> boolean mForegroundBoundsChanged = false ; <nl> public ForegroundLinearLayout ( Context context ) { <nl> - super ( context ) ; <nl> + this ( context , null ) ; <nl> } <nl> public ForegroundLinearLayout ( Context context , AttributeSet attrs ) { <nl>   } } 
public class LowLevelSearchUtil { public void test ( ) { { { <nl> } <nl> } <nl> if ( ! processor . execute ( run , start ) ) { <nl> - processor . execute ( run , start ) ; <nl> return false ; <nl> } <nl> } <nl>   } 
abstract class Node implements TagConstants { public void test ( ) { <nl> this . el = null ; <nl> this . dynamic = dyn ; <nl> this . namedAttribute = true ; <nl> - this . tai = null ; <nl> + this . tai = tai ; <nl> } <nl> <nl>   } 
import java . util . concurrent . TimeUnit ; <nl> public final class DefaultStepRunner implements StepRunner , Closeable { <nl> - private final long SHUTDOWN_TIMEOUT_SECONDS = 15 ; <nl> + private static final long SHUTDOWN_TIMEOUT_SECONDS = 15 ; <nl> private final ExecutionContext context ; <nl> private final ListeningExecutorService listeningExecutorService ; <nl>   } 
public class SecureNio2Channel extends Nio2Channel { public void test ( ) { <nl> handshakeComplete = false ; <nl> closed = false ; <nl> closing = false ; <nl> + netInBuffer . clear ( ) ; <nl> } <nl> <nl>   } 
public class BlobStoreAPIWordCountTopology { <nl> <nl> public static class FilterWords extends BaseBasicBolt { <nl> - String key = " key " ; <nl> String fileName = " blacklist . txt " ; <nl> <nl> } public void execute ( Tuple tuple , BasicOutputCollector collector ) { <nl>   } } 
public class Log { public void test ( ) { <nl> <nl> Handler jdkLogHandler = new JiveLogHandler ( ) ; <nl> + jdkLogHandler . setLevel ( Level . ALL ) ; <nl> java . util . logging . Logger . getLogger ( " " ) . addHandler ( jdkLogHandler ) ; <nl> } <nl>   } 
abstract class AbstractDelayedEntry < K > { <nl> private final long storeTime ; <nl> + <nl> private final int partitionId ; <nl> protected AbstractDelayedEntry ( K key , long storeTime , int partitionId ) { <nl>   } } 
public class Cache { <nl> public void clear ( ) { <nl> resourceCache . clear ( ) ; <nl> + size . set ( 0 ) ; <nl> } <nl> public long getSize ( ) { <nl>   } } 
public abstract class BaseTest { <nl> <nl> public static void afterClass ( ) throws IOException , InterruptedException { <nl> if ( ! RedissonRuntimeEnvironment . isTravis ) { <nl> - RedisRunner . startDefaultRedisServerInstance ( ) ; <nl> + RedisRunner . shutDownDefaultRedisServerInstance ( ) ; <nl> defaultRedisson . shutdown ( ) ; <nl> } <nl> } <nl>   } 
public class PhoneStateListener { <nl> <nl> <nl> <nl> <nl> <nl> <nl> public void onSignalStrengthChanged ( int asu ) { <nl> <nl>   } } 
public class PythonLibraryDescription implements Description < Arg > { <nl> public static class Arg implements ConstructorArg { <nl> } public ImmutableSortedSet < SourcePath > srcs ; <nl> public Optional < ImmutableSortedSet < BuildRule > > deps ; <nl> + public Optional < ImmutableSortedSet < SourcePath > > resources ; <nl> } <nl> <nl>   
public class GradientDrawable extends Drawable { <nl> <nl> <nl> + public ColorFilter getColorFilter ( ) { <nl> + return mColorFilter ; <nl> + } <nl> + <nl> + <nl> public void setColorFilter ( ColorFilter cf ) { <nl> if ( cf != mColorFilter ) { <nl> mColorFilter = cf ; <nl>   } } } 
class NioDatagramChannel extends AbstractChannel <nl> <nl> { public boolean isConnected ( ) { { <nl> - return datagramChannel . socket ( ) . isConnected ( ) ; <nl> + return datagramChannel . isConnected ( ) ; <nl> } <nl> <nl>   } } 
public class PostfixTemplatesConfigurable implements SearchableConfigurable , Edi <nl> <nl> <nl> { public String getHelpTopic ( ) { { <nl> - return null ; <nl> + return getId ( ) ; <nl> } <nl> <nl>   } } 
public final class ACRAConstants { <nl> public static final boolean DEFAULT_REPORT_TO_ANDROID_FRAMEWORK = false ; <nl> - public static final int DEFAULT_SOCKET_TIMEOUT = 8000 ; <nl> + public static final int DEFAULT_SOCKET_TIMEOUT = 20000 ; <nl> public static final int DEFAULT_CONNECTION_TIMEOUT = 5000 ; <nl>   } 
public class ZipSplitter { <nl> public static enum DexSplitStrategy { <nl> MAXIMIZE_PRIMARY_DEX_SIZE , <nl> - MINIMIZE_PRIMARY_DEX_SIZE ; <nl> + MINIMIZE_PRIMARY_DEX_SIZE , <nl> + ; <nl> } <nl> private final Set < File > inFiles ; <nl>   } 
public final class Terasology { <nl> <nl> public long getTimeInMs ( ) { <nl> - <nl> + if ( _timer == null ) { <nl> + initTimer ( ) ; <nl> + } <nl> return _timer . getTimeInMs ( ) ; <nl> } <nl>   } 
public class ProgressBar extends View { public void test ( ) { { <nl> if ( mProgress > max ) { <nl> mProgress = max ; <nl> + refreshProgress ( R . id . progress , mProgress , false ) ; <nl> } <nl> } <nl> } <nl>   } 
public class StorageDumper { public void test ( ) { <nl> final PrintStream p = new PrintStream ( outputPath ) ; <nl> mappings . toStream ( p ) ; <nl> + mappings . close ( ) ; <nl> p . close ( ) ; <nl> } <nl>   } 
package org . apache . tomcat ; <nl> import java . io . InputStream ; <nl> import java . util . Properties ; <nl> + <nl> <nl> <nl> public class Apr { <nl> private static String aprInfo = null ; <nl>   } 
package rajawali . wallpaper ; <nl> import javax . microedition . khronos . egl . EGL10 ; <nl> import javax . microedition . khronos . egl . EGLConfig ; <nl> - import javax . microedition . khronos . egl . EGLContext ; <nl> import javax . microedition . khronos . egl . EGLDisplay ; <nl> import rajawali . renderer . RajawaliRenderer ; <nl>   
public class ShadowBitmap { <nl> <nl> <nl> - public Matrix getCreateFromMatrix ( ) { <nl> + } public Matrix getCreatedFromMatrix ( ) { <nl> return createdFromMatrix ; <nl> } <nl>   } 
public class LayoutExporter { public void test ( ) { <nl> portletDataContext . setMissingReferencesElement ( <nl> missingReferencesElement ) ; <nl> + <nl> portletDataContext . addDeletionSystemEventStagedModelTypes ( <nl> new StagedModelType ( Layout . class ) ) ; <nl>   } } 
public class AccelListener extends Plugin implements SensorEventListener { public void test ( ) { <nl> if ( this . status == AccelListener . STOPPED ) { <nl> return ; <nl> } <nl> - Log . d ( " ACCEL " , " accuracy is now " + accuracy ) ; <nl> this . accuracy = accuracy ; <nl> } <nl>   } 
public class AsyncTaskTest { <nl> public void setUp ( ) throws Exception { <nl> transcript = new Transcript ( ) ; <nl> - RobolectricTestRunner . logMissingInvokedShadowMethods ( ) ; <nl> + Robolectric . logMissingInvokedShadowMethods ( ) ; <nl> } <nl> <nl>   } 
public abstract class SocketWrapperBase < E > { <nl> <nl> public boolean isReadyForWrite ( ) { <nl> + <nl> return ! hasDataToWrite ( ) ; <nl> } <nl>   } 
public class ExtensionFunctionsTest extends CodegenTestCase { <nl> <nl> public void testKt475 ( ) throws Exception { { <nl> - blackBoxFile ( " regressions / kt475 . jet " ) ; <nl> + <nl> } <nl> } <nl>   } 
import voldemort . utils . Utils ; <nl> <nl> public class ClientConfig { <nl> - private volatile int maxConnectionsPerNode = 50 ; <nl> + private volatile int maxConnectionsPerNode = 10 ; <nl> private volatile int maxTotalConnections = 500 ; <nl> private volatile int maxThreads = 5 ; <nl> private volatile int maxQueuedRequests = 50 ; <nl>   } 
public class Tmp { public interface PsiElement extends UserDataHolder , Iconable { <nl> <nl> <nl> <nl> - PsiFile getContainingFile ( ) ; <nl> + PsiFile getContainingFile ( ) ; <nl> <nl> <nl>   } } 
public class GitPushRebaseProcess extends GitBaseRebaseProcess { <nl> protected void cleanupHandler ( VirtualFile root , GitLineHandler h ) { <nl> if ( myRebaseEditorNo != null ) { <nl> myRebaseEditorService . unregisterHandler ( myRebaseEditorNo ) ; <nl> + myRebaseEditorNo = null ; <nl> } <nl> } <nl>   } 
class XMLSerializer extends AbstractSerializer { public void test ( ) { { <nl> myBook . addUidWithNoCheck ( uid ) ; <nl> } <nl> myBook . setSeriesInfoWithNoCheck ( string ( mySeriesTitle ) , string ( mySeriesIndex ) ) ; <nl> + myBook . setProgressWithNoCheck ( myProgress ) ; <nl> myBook . HasBookmark = myHasBookmark ; <nl> } <nl>   } 
public final class CursorToBulkCursorAdaptor extends BulkCursorNative <nl> { public void close ( ) { <nl> maybeUnregisterObserverProxy ( ) ; <nl> - mCursor . deactivate ( ) ; <nl> - <nl> + mCursor . close ( ) ; <nl> } <nl> public int requery ( IContentObserver observer , CursorWindow window ) { <nl>   } } 
public class ViewPager extends ViewGroup { public void test ( ) { { { <nl> } <nl> completeScroll ( false ) ; <nl> scrollTo ( destX , 0 ) ; <nl> + pageScrolled ( destX ) ; <nl> } <nl> } <nl>   } 
public class CompletionPanel { <nl> private String subWord ; <nl> <nl> <nl> <nl> <nl> private int insertionPosition ; <nl>   } 
public abstract class Config { <nl> <nl> public static final List < String > LIB_FILES_WITH_CODE = Arrays . asList ( <nl> + " / stdlib / TuplesCode . kt " , <nl> " / core / javautilCode . kt " <nl> ) ; <nl>   } 
public class Recurrence implements Serializable { public void test ( ) { { <nl> + 1 ; <nl> return ( - position == negativeCandidatePosition ) ; <nl> + } <nl> } <nl> <nl>   } 
public class PropertyAttributeParserTest <nl> { public void test ( ) { <nl> try <nl> { <nl> - parseAsValueModelAttribute ( illegalStaticResourceAttributeValue . value ) ; <nl> + parseAsStaticResourceAttribute ( illegalStaticResourceAttributeValue . value ) ; <nl> fail ( " Expect an exception thrown " ) ; <nl> } catch ( MalformedAttributeException e ) <nl> { <nl>   } } } 
public class FakeAlertDialog extends FakeDialog { <nl> private AlertDialog realDialog ; <nl> private boolean isMultiItem ; <nl> private DialogInterface . OnMultiChoiceClickListener multiChoiceClickListener ; <nl> - private boolean [ ] checkedItems ; <nl> + public boolean [ ] checkedItems ; <nl> public FakeAlertDialog ( AlertDialog dialog ) { <nl> super ( dialog ) ; <nl>   } } 
public class CompilerTest extends GroovyTestCase { public void test ( ) { <nl> dir . mkdirs ( ) ; <nl> CompilerConfiguration config = new CompilerConfiguration ( ) ; <nl> + config . setTargetDirectory ( dir ) ; <nl> config . setDebug ( dumpClass ) ; <nl> compiler = new Compiler ( config ) ; <nl>   } } 
public class PGraphicsOpenGL extends PGraphics { <nl> public void lights ( ) { <nl> enableLighting ( ) ; <nl> + <nl> + lightCount = 0 ; <nl> + <nl> <nl> int colorModeSaved = colorMode ; <nl> colorMode = RGB ; <nl>   } } 
public class GpsLocationProvider implements LocationProviderInterface { <nl> private GpsStatusListenerHelper mListenerHelper = new GpsStatusListenerHelper ( ) { <nl> <nl> protected boolean isSupported ( ) { <nl> - return native_is_measurement_supported ( ) ; <nl> + return GpsLocationProvider . isSupported ( ) ; <nl> } <nl> } ; <nl>   } 
public class BookmarkItem implements ItemWrapper { <nl> <nl> public void execute ( Project project , JBPopup popup ) { <nl> + popup . cancel ( ) ; <nl> myBookmark . navigate ( ) ; <nl> } <nl>   } 
public class SSTableReader extends SSTable implements Comparable < SSTableReader > <nl> { public void test ( ) { { <nl> throw new IOError ( e ) ; <nl> } <nl> + components . add ( Component . COMPACTED_MARKER ) ; <nl> phantomReference . deleteOnCleanup ( ) ; <nl> } <nl>   } 
public class ByteBufferBackedInputStream extends InputStream { public void test ( ) { <nl> if ( ! buffer . hasRemaining ( ) ) <nl> return - 1 ; <nl> - return buffer . get ( ) ; <nl> + return buffer . get ( ) & 0xff ; <nl> } <nl> <nl>   } 
public class SelectWordUtil { public void test ( ) { { <nl> } <nl> + if ( firstChild == null ) break ; <nl> element = firstChild ; <nl> } <nl>   } 
public class AbsSpinnerTest { <nl> <nl> public void setUp ( ) throws Exception { <nl> TestUtil . addAllProxies ( ) ; <nl> - <nl> adapterView = new Gallery ( new Activity ( ) ) ; <nl> } <nl>   } 
public abstract class TestBase <nl> <nl> { public void tearDown ( ) { { { <nl> - mongo . close ( ) ; <nl> dropDB ( ) ; <nl> + mongo . close ( ) ; <nl> } <nl> } <nl>   } } 
public class JavaRegExpHost implements RegExpLanguageHost { <nl> <nl> public boolean supportsPossessiveQuantifiers ( ) { <nl> - return false ; <nl> + return true ; <nl> } <nl> <nl>   } 
import java . util . Vector ; <nl> <nl> public final class GenericMultipleBarcodeReader implements MultipleBarcodeReader { <nl> - private static final int MIN_DIMENSION_TO_RECUR = 30 ; <nl> + private static final int MIN_DIMENSION_TO_RECUR = 100 ; <nl> private final Reader delegate ; <nl>   } 
import android . database . Cursor ; <nl> import android . database . MatrixCursor ; <nl> import android . net . Uri ; <nl> import android . os . Binder ; <nl> - import android . os . DeadObjectException ; <nl> import android . text . TextUtils ; <nl> import android . util . Log ; <nl>   
public class SortedQueryResultSet extends AbstractSet < Map . Entry > { <nl> <nl> } <nl> - private class EmptyIterator implements Iterator { <nl> + private static class EmptyIterator implements Iterator { <nl> <nl> public boolean hasNext ( ) { <nl>   } } } 
public abstract class HardwareRenderer { public void test ( ) { { <nl> if ( ! createSurface ( holder ) ) { <nl> return ; <nl> } <nl> - setEnabled ( true ) ; <nl> + if ( mCanvas != null ) { <nl> + setEnabled ( true ) ; <nl> + } <nl> } <nl> } <nl>   } 
public final class Constants { <nl> <nl> <nl> <nl> - public static final boolean DEBUG = true ; <nl> + public static final boolean DEBUG = false ; <nl> <nl>   } 
public class PropertiesComponent extends DefaultComponent { <nl> <nl> public PropertiesComponent ( boolean isDefaultCreated ) { <nl> + this ( ) ; <nl> this . isDefaultCreated = isDefaultCreated ; <nl> } <nl>   } 
import hex . rf . RFModel ; <nl> import java . util . Arrays ; <nl> import water . * ; <nl> - import water . fvec . Frame ; <nl> import com . google . gson . JsonArray ; <nl> import com . google . gson . JsonPrimitive ; <nl>   
public abstract class BaseAsyncDestination extends BaseDestination { <nl> <nl> public void close ( boolean force ) { <nl> + PortalExecutorManagerUtil . shutdown ( getName ( ) , force ) ; <nl> } <nl> public DestinationStatistics getDestinationStatistics ( ) { <nl>   } } 
public class Tmp { public interface Rule { <nl> boolean template ( ) ; <nl> + <nl> RuleKey templateKey ( ) ; <nl> <nl>   } } 
public abstract class CommonJobs <nl> { public void test ( ) { <nl> tx = db . beginTx ( ) ; <nl> Node node = db . createNode ( ) ; <nl> - System . out . println ( Thread . currentThread ( ) + " created node " + node ) ; <nl> return null ; <nl> } <nl>   } 
public abstract class RequestBuilderBase < T extends RequestBuilderBase < T > > { public void test ( ) { <nl> request . byteData = null ; <nl> request . stringData = null ; <nl> request . streamData = null ; <nl> + request . bodyGenerator = null ; <nl> request . length = - 1 ; <nl> } <nl>   } 
public class BeaconManager { <nl> <nl> protected BeaconManager ( Context context ) { <nl> - mContext = context ; <nl> + mContext = context . getApplicationContext ( ) ; <nl> if ( ! sManifestCheckingDisabled ) { <nl> verifyServiceDeclaration ( ) ; <nl> } <nl>   } } 
public class RequestBuilders extends RequestQueries { <nl> protected final JsonObject _response ; <nl> protected final Request _req ; <nl> - protected boolean _strictJsonCompliance = false ; <nl> + protected boolean _strictJsonCompliance = true ; <nl> <nl> <nl>   } 
public class ViewFlow extends AdapterView < Adapter > { <nl> <nl> public void onGlobalLayout ( ) { { <nl> - setSelection ( mCurrentAdapterIndex ) ; <nl> getViewTreeObserver ( ) . removeGlobalOnLayoutListener ( orientationChangeListener ) ; <nl> + setSelection ( mCurrentAdapterIndex ) ; <nl> } <nl> } ; <nl>   } 
public class PSurfaceAWT extends PSurfaceNone { public void test ( ) { <nl> <nl> Component canvas ; <nl> - PGraphics graphics ; <nl> + <nl> int sketchWidth ; <nl> int sketchHeight ; <nl>   } } 
public final class CameraManager { <nl> <nl> <nl> <nl> <nl> <nl> <nl> public static abstract class AvailabilityCallback { <nl>   } } 
public class LocationManager { public void test ( ) { <nl> } <nl> <nl> <nl> <nl> <nl> <nl> <nl>   } 
public class EdgeDataImpl implements EdgeData , DynamicData { <nl> <nl> public float getRadius ( ) { <nl> - throw new UnsupportedOperationException ( " Not supported yet . " ) ; <nl> + return 0 ; <nl> } <nl> public float getSize ( ) { <nl>   } } 
public class SetHeaderHandler implements HttpHandler { <nl> <nl> - public class Builder implements HandlerBuilder { <nl> + } public static class Builder implements HandlerBuilder { <nl> <nl> } public String name ( ) { <nl> return " header " ; <nl>   } } 
public class PsiTypeElementImpl extends CompositePsiElement implements PsiTypeEl <nl> <nl> { public PsiAnnotation addAnnotation ( String qualifiedName ) { { { <nl> - throw new UnsupportedOperationException ( ) ; <nl> + throw new UnsupportedOperationException ( ) ; <nl> } <nl> } <nl>   } } 
public class GetFileContentOperation extends LocalPathIndifferentOperation { <nl> <nl> public boolean fileNotFound ( ) { <nl> - getFileBytes ( ) ; <nl> + tryGetFileBytes ( ) ; <nl> return myState == FILE_NOT_FOUND ; <nl> } <nl>   } 
import static org . junit . Assert . fail ; <nl> import com . google . common . collect . Sets ; <nl> import java . util . Set ; <nl> import org . junit . Test ; <nl> + <nl> public class ClassResolverTest <nl> { <nl> <nl>   } 
import javaslang . Tuples . Tuple2 ; <nl> <nl> <nl> <nl> + <nl> public final class Strings { public void test ( ) { <nl> <nl>   } } 
public class BytesInputStream extends InputStream { <nl> public void reset ( ) { <nl> pos = mark ; <nl> } <nl> + <nl> + public int getCount ( ) { <nl> + return count ; <nl> + } <nl> } <nl>   
public class ReplicatedMapTest extends ReplicatedMapAbstractTest { public void test ( ) { { { <nl> return o1 == o2 ? 0 : o1 > o2 ? - 1 : 1 ; <nl> } <nl> } <nl> - <nl> } <nl>   } 
public class CodeItem extends Item < CodeItem > { public void test ( ) { <nl> return ; <nl> } <nl> - <nl> final SparseIntArray originalOffsetsByNewOffset = new SparseIntArray ( ) ; <nl> final SparseIntArray newOffsetsByOriginalOffset = new SparseIntArray ( ) ; <nl>   } 
public class GroovyTemplatesProvider implements DefaultLiveTemplatesProvider { <nl> <nl> public String [ ] getHiddenLiveTemplateFiles ( ) { { <nl> - return new String [ 0 ] ; <nl> + return null ; <nl> } <nl> } <nl>   } 
public class TileAutoWorkbench extends TileEntity implements ISpecialInventory { <nl> <nl> + public IRecipe getCurrentRecipe ( ) { <nl> + <nl> + return currentRecipe ; <nl> + } <nl> + <nl> <nl> public int getSizeInventory ( ) { <nl>   } } 
public class ColorPicker extends View { public void test ( ) { { <nl> invalidate ( ) ; <nl> break ; <nl> } <nl> + getParent ( ) . requestDisallowInterceptTouchEvent ( true ) ; <nl> return true ; <nl> } <nl>   } 
public class SpriteBatch implements Batch { <nl> public boolean isBlendingEnabled ( ) { <nl> return ! blendingDisabled ; <nl> } <nl> + <nl> + public boolean isDrawing ( ) { <nl> + return drawing ; <nl> + } <nl> } <nl>   
public class FieldLookup { public void test ( ) { <nl> value = null ; <nl> valueLoaded = false ; <nl> values . clear ( ) ; <nl> - valuesLoaded = false ; <nl> doc = null ; <nl> } <nl>   } 
public abstract class AbstractFailureDetector implements FailureDetector { public void test ( ) { <nl> NodeStatus nodeStatus = getNodeStatus ( node ) ; <nl> synchronized ( nodeStatus ) { <nl> - if ( ! isAvailable ( node ) ) <nl> + while ( ! isAvailable ( node ) ) <nl> nodeStatus . wait ( ) ; <nl> } <nl> } <nl>   } 
public abstract class SessionPage extends WebPage { public void test ( ) { { { { <nl> } <nl> } <nl> session . setUser ( user ) ; <nl> + session . continueRequest ( ) ; <nl> return ; <nl> } <nl> } <nl>   } 
public final class Cache { <nl> <nl> <nl> + <nl> + public static boolean isInitialized ( ) { <nl> + return sIsInitialized ; <nl> + } <nl> public static synchronized SQLiteDatabase openDatabase ( ) { <nl> return sDatabaseHelper . getWritableDatabase ( ) ; <nl>   } } 
public final class LocalTachyonCluster { public void test ( ) { <nl> if ( mUfsCluster != null ) { <nl> mUfsCluster . cleanup ( ) ; <nl> } <nl> + <nl> System . clearProperty ( " tachyon . underfs . address " ) ; <nl> } <nl>   } 
public class ShadowView { <nl> <nl> <nl> + public View . OnFocusChangeListener getOnFocusChangeListener ( ) { <nl> + return onFocusChangeListener ; <nl> + } <nl> + <nl> + <nl> public void invalidate ( ) { <nl> wasInvalidated = true ; <nl> } <nl>   } 
public final class MediaBrowserCompat { <nl> <nl> <nl> <nl> - public static class SubscriptionCallbackApi21 extends SubscriptionCallback { <nl> + static class SubscriptionCallbackApi21 extends SubscriptionCallback { <nl> SubscriptionCallback mSubscriptionCallback ; <nl> private final Object mSubscriptionCallbackObj ; <nl> private Bundle mOptions ; <nl>   } } } 
package buildcraft . api . recipes ; <nl> import java . util . LinkedList ; <nl> + <nl> + import buildcraft . core . inventory . StackHelper ; <nl> import net . minecraft . item . ItemStack ; <nl> public class AssemblyRecipe { <nl>   } 
public class DeepLearningGradientCheck extends TestUtil { <nl> public static void stall ( ) { stall_till_cloudsize ( 1 ) ; } <nl> <nl> + <nl> public void cancar ( ) { <nl> Frame tfr = null ; <nl> DeepLearningModel dl = null ; <nl>   } } 
public class ManagedServlet implements Lifecycle { <nl> <nl> public void release ( ) { { { <nl> - <nl> + instance . destroy ( ) ; <nl> } <nl> } ; <nl> } <nl>   } 
public class CompileStack implements Opcodes { public void test ( ) { <nl> superBlockNamedLabels . clear ( ) ; <nl> currentBlockNamedLabels . clear ( ) ; <nl> namedLoopBreakLabel . clear ( ) ; <nl> + namedLoopContinueLabel . clear ( ) ; <nl> continueLabel = null ; <nl> breakLabel = null ; <nl> finallyLabel = null ; <nl>   } } 
public class Tmp { public interface ServletContext { <nl> } public ServletContext getContext ( String uripath ) ; <nl> - <nl> + <nl> + public String getContextPath ( ) ; <nl> + <nl> <nl> <nl>   } 
public final class DataIO { <nl> <nl> <nl> <nl> + <nl> public static final class HeartbeatFileLock { <nl> <nl>   } } 
package com . pokegoapi . util ; <nl> <nl> public class Constant { <nl> + public static final int APP_VERSION = 3500 ; <nl> + <nl> + public static final long UNK25 = 7363665268261373700L ; <nl> } <nl>   
public class OracleStandardTest extends AbstractHibernateTest { <nl> <nl> public void JoinEmbeddable ( ) { { <nl> - <nl> + <nl> } <nl> } <nl>   } 
package tachyon . master . block ; <nl> - <nl> public class BlockId { <nl> private static final int CONTAINER_ID_BITS = 40 ; <nl>   } 
public class NearCacheContext { <nl> private NearCacheManager nearCacheManager ; <nl> private SerializationService serializationService ; <nl> private NearCacheExecutor nearCacheExecutor ; <nl> - private Object nullPlaceHolder ; <nl> public NearCacheContext ( ) { <nl>   } } 
public class PGraphicsOpenGL2 extends PGraphics { public void test ( ) { <nl> if ( raw != null ) { <nl> <nl> } <nl> - faceCount = 0 ; <nl> + <nl> vertexCount = 0 ; <nl> triangleCount = 0 ; <nl> } <nl>   } 
public class TestTextureArrayCompressed extends SimpleApplication <nl> <nl> { public static void main ( String [ ] args ) <nl> { { <nl> - TestTextureArray app = new TestTextureArray ( ) ; <nl> + TestTextureArrayCompressed app = new TestTextureArrayCompressed ( ) ; <nl> app . start ( ) ; <nl> } <nl>   } } 
class DayView extends CheckedTextView { <nl> <nl> public void setSelectionDrawable ( Drawable selectionDrawable ) { <nl> this . selectionDrawable = selectionDrawable ; <nl> - invalidate ( ) ; <nl> + regenerateBackground ( ) ; <nl> } <nl> <nl>   } 
public final class Settings { <nl> <nl> <nl> public static final String VENDING_PENDING_DOWNLOAD_RESEND_FREQUENCY_MS = <nl> - " vending_pending_download_resend_frequency_ms " ; <nl> + " vending_pd_resend_frequency_ms " ; <nl> <nl> <nl>   } 
public class Event < T > { <nl> <nl> private int id ; <nl> + <nl> private Type type ; <nl> private long timestamp ; <nl> private T payload ; <nl>   } 
public class EditGroupAction extends PortletAction { public void test ( ) { <nl> String friendlyURL = null ; <nl> boolean active = false ; <nl> boolean manualMembership = true ; <nl> + <nl> int membershipRestriction = <nl> GroupConstants . DEFAULT_MEMBERSHIP_RESTRICTION ; <nl>   } } 
public class VcsManagerConfigurable extends SearchableConfigurable . Parent . Abstra <nl> <nl> { public String getHelpTopic ( ) { { { { <nl> - return null ; <nl> + return " project . propVCSSupport . VCSs " ; <nl> } <nl> } ; <nl> } <nl>   } } 
package de . danoeh . antennapod ; <nl> public final class AppConfig { <nl> - public final static boolean DEBUG = true ; <nl> + public final static boolean DEBUG = false ; <nl> } <nl>   
public class CustomizationConfigurable extends BaseConfigurable implements Appli <nl> <nl> { public String getHelpTopic ( ) { { <nl> - return null ; <nl> + return " preferences . customizations " ; <nl> } <nl>   } } 
public class PlaygroundTest extends TestBase { public void test ( ) { <nl> <nl> <nl> - <nl> + <nl> + <nl> <nl> } <nl>   } 
public class SeekableViewsForTest { public void test ( ) { <nl> if ( is_integer ) { <nl> current_data . reset ( generateTimestamp ( ) , current ) ; <nl> } else { <nl> - current_data . reset ( generateTimestamp ( ) , current ) ; <nl> + current_data . reset ( generateTimestamp ( ) , ( double ) current ) ; <nl> } <nl> } <nl>   } 
public class FileInStreamIntegrationTest { <nl> <nl> <nl> <nl> <nl> <nl> <nl> <nl> public void seekExceptionTest1 ( ) throws IOException , TachyonException { <nl>   } } 
public class AsmClassGenerator extends ClassGenerator { public void test ( ) { <nl> Variable variable = compileStack . getVariable ( variableName , false ) ; <nl> - VariableScope scope = compileStack . getScope ( ) ; <nl> if ( variable == null ) { <nl> processClassVariable ( variableName ) ; <nl> } else { <nl>   } } } 
public class RecipientListExchangePropertyTest extends ContextTestSupport { <nl> <nl> - private static class MyStuff { <nl> + private static final class MyStuff { <nl> private String name ; <nl>   } } } 
public class PhoneWindowManager implements WindowManagerPolicy { public void test ( ) { { <nl> intent = mHomeIntent ; <nl> } <nl> - startActivityAsUser ( mHomeIntent , UserHandle . CURRENT ) ; <nl> + startActivityAsUser ( intent , UserHandle . CURRENT ) ; <nl> } <nl> <nl>   } 
public abstract class SshCommand extends BaseCommand { { <nl> <nl> } <nl> - protected abstract void run ( ) throws UnloggedFailure , Failure , Exception ; <nl> + protected abstract void run ( ) throws Failure , Exception ; <nl> } <nl>   
public class OperationsFacade <nl> <nl> { public void unregisterExecutingQuery ( ExecutingQuery executingQuery ) <nl> { { <nl> - statement . assertOpen ( ) ; <nl> queryRegistrationOperations ( ) . unregisterExecutingQuery ( statement , executingQuery ) ; <nl> } <nl>   } } 
package tachyon . command ; <nl> import java . net . InetSocketAddress ; <nl> import tachyon . Constants ; <nl> - import tachyon . conf . MasterConf ; <nl> import tachyon . thrift . InvalidPathException ; <nl> <nl>   
public class DefaultDBCallback extends BasicBSONCallback implements DBCallback { public void test ( ) { <nl> } <nl> DBObject dbget ( ) { <nl> - DBObject o = ( DBObject ) get ( ) ; <nl> - return o ; <nl> + return ( DBObject ) get ( ) ; <nl> } <nl> <nl>   } 
public class GoogleJavaScriptMinifier implements JavaScriptMinifier { public void test ( ) { <nl> setCompileOptions ( compilerOptions ) ; <nl> + compiler . disableThreads ( ) ; <nl> + <nl> compiler . compile ( <nl> SourceFile . fromCode ( " extern " , StringPool . BLANK ) , sourceFile , <nl> compilerOptions ) ; <nl>   } } 
public abstract class Connection extends Conferenceable { <nl> <nl> <nl> public final AudioState getAudioState ( ) { <nl> + if ( mCallAudioState == null ) { <nl> + return null ; <nl> + } <nl> return new AudioState ( mCallAudioState ) ; <nl> } <nl>   } 
public class HealthMonitor extends Thread { <nl> <nl> } <nl> - private final class GcMetrics { <nl> + private static final class GcMetrics { <nl> final long minorCount ; <nl> final long minorTime ; <nl> final long majorCount ; <nl>   } } 
public class FolderList extends K9ListActivity implements OnNavigationListener { public void test ( ) { { <nl> return ; <nl> } <nl> mUnreadMessageCount = stats . unreadMessageCount ; <nl> - super . accountStatusChanged ( account , stats ) ; <nl> + mHandler . refreshTitle ( ) ; <nl> } <nl> <nl>   } 
public class RowDataResolver extends AbstractRowResolver <nl> { public Row getData ( ) <nl> { { <nl> + assert ! replies . isEmpty ( ) ; <nl> return replies . peek ( ) . payload . row ( ) ; <nl> } <nl>   } } 
public class TransportNetworkCache { public void test ( ) { { { <nl> cacheLocation . delete ( ) ; <nl> } <nl> - return currentNetwork ; <nl> + return network ; <nl> } <nl> } <nl>   } 
public class JavaTestDocsGenerator extends AsciiDocGenerator <nl> { public JavaTestDocsGenerator ( String title ) <nl> { { <nl> - super ( " docs " , title ) ; <nl> + super ( title , " docs " ) ; <nl> } <nl> <nl>   } } 
package android . renderscript ; <nl> + <nl> <nl> <nl> <nl> public class FieldPacker { <nl> public FieldPacker ( int len ) { <nl> mPos = 0 ; <nl>   } } 
public class BadgeActivity extends AppCompatActivity { public void test ( ) { { <nl> BottomBarTab nearby = bottomBar . getTabWithId ( R . id . tab_nearby ) ; <nl> nearby . setBadgeCount ( 5 ) ; <nl> - nearby . removeBadge ( ) ; <nl> } <nl> } <nl>   } 
package tachyon ; <nl> <nl> public class Version { <nl> <nl> - public static final String VERSION = " 0 . 2 - SNAPSHOT " ; <nl> + public static final String VERSION = " 0 . 2 . 1 - SNAPSHOT " ; <nl> } <nl>   
public class Exif { public void test ( ) { { { <nl> } <nl> } <nl> - Log . i ( TAG , " Orientation not found " ) ; <nl> + <nl> return 0 ; <nl> } <nl>   } 
public class RedirectConfig { <nl> <nl> <nl> <nl> <nl> public RedirectConfig and ( ) { <nl> return this ; <nl>   } } 
public class ExternalJavacIntegrationTest { <nl> <nl> public void whenBuckdUsesExternalJavacThenClientEnvironmentUsed ( ) throws IOException { <nl> + assumeTrue ( Platform . detect ( ) != Platform . LINUX ) ; <nl> final ProjectWorkspace workspace = TestDataHelper . createProjectWorkspaceForScenario ( <nl> this , " external_javac " , tmp ) ; <nl> workspace . setUp ( ) ; <nl>   } } 
public class TitanFactory { <nl> private Builder ( ) { <nl> super ( GraphDatabaseConfiguration . buildConfiguration ( ) ) ; <nl> + ReflectiveConfigOptionLoader . loadOnce ( ) ; <nl> } <nl> <nl>   } 
public class MapConfig implements DataSerializable { <nl> private MapStoreConfig mapStoreConfig = null ; <nl> - private NearCacheConfig nearCacheConfig = null ; <nl> + private NearCacheConfig nearCacheConfig = new NearCacheConfig ( ) ; <nl> private boolean readBackupData = false ; <nl>   } 
import org . json . JSONArray ; <nl> import org . json . JSONException ; <nl> import android . app . Activity ; <nl> - import android . content . ContentResolver ; <nl> import android . content . ContentValues ; <nl> import android . content . Intent ; <nl> import android . database . Cursor ; <nl>   
public class RareLogger extends Logger { public void test ( ) { <nl> if ( fairSynch ) { <nl> synchronized ( lock ) { <nl> super . put ( key , value ) ; <nl> + return ; <nl> } <nl> } <nl> super . put ( key , value ) ; <nl>   } } 
public final class DlvDebugProcess extends DebugProcessImpl < RemoteVmConnection > <nl> <nl> { public void stop ( ) { <nl> - <nl> + getSession ( ) . stop ( ) ; <nl> } <nl> private static class DlvSuspendContext extends XSuspendContext { <nl>   } } 
import java . nio . ByteBuffer ; <nl> import javax . websocket . SendHandler ; <nl> - public class MessagePart { <nl> + class MessagePart { <nl> private final byte opCode ; <nl> private final ByteBuffer payload ; <nl> private final boolean last ; <nl>   } } 
public class EditSession { public void test ( ) { { { <nl> if ( setBlock ( pt , grass ) ) { <nl> + + affected ; <nl> } <nl> + break ; <nl> } <nl> } <nl> } <nl>   } 
public class PackageParser { public void test ( ) { <nl> if ( sa . getBoolean ( <nl> com . android . internal . R . styleable . AndroidManifestApplication_testOnly , <nl> - true ) ) { <nl> + false ) ) { <nl> ai . flags |= ApplicationInfo . FLAG_TEST_ONLY ; <nl> } <nl>   } } } 
public class SnacktoryWebViewRenderer extends WebViewRenderer { public void test ( ) { { <nl> } <nl> mGetPageAsTextTask = new GetPageAsTextTask ( ) ; <nl> - mGetPageAsTextTask . execute ( getUrl ( ) . toString ( ) ) ; <nl> + mGetPageAsTextTask . execute ( urlAsString ) ; <nl> } <nl> <nl>   } 
final class HttpRequestBuilder { public void test ( ) { { <nl> } <nl> HttpUriRequest request = requestLine . getHttpMethod ( ) . createFrom ( this ) ; <nl> - if ( logger . isLoggable ( Level . FINE ) ) logger . fine ( " Request params : " + getParamList ( true ) ) ; <nl> return request ; <nl> } <nl>   } 
class DrawableCache extends ThemedResourceCache < Drawable . ConstantState > { <nl> <nl> public boolean shouldInvalidateEntry ( Drawable . ConstantState entry , int configChanges ) { { <nl> - return false ; <nl> + return Configuration . needNewResources ( configChanges , entry . getChangingConfigurations ( ) ) ; <nl> } <nl> } <nl>   } 
public abstract class RectangularShape extends Shape implements IAreaShape { <nl> <nl> protected boolean isCulled ( final Camera pCamera ) { <nl> - return false ; <nl> + return ! RectangularShapeCollisionChecker . isVisible ( pCamera , this ) ; <nl> } <nl> <nl>   } 
class BaseRegion implements Region { <nl> <nl> public int getTimeout ( ) { { <nl> - return Timestamper . ONE_MS * 60000 ; <nl> + return Timestamper . ONE_MS * 600000 ; <nl> } <nl> } <nl>   } 
class GitSmartOperationDialog extends DialogWrapper { <nl> private class ForceCheckoutAction extends AbstractAction { <nl> ForceCheckoutAction ( String operationTitle ) { <nl> - super ( " Force " + capitalize ( operationTitle ) ) ; <nl> + super ( " & Force " + capitalize ( operationTitle ) ) ; <nl> } <nl> <nl>   } } 
public class TestShellActivity extends Activity implements LayoutTestController <nl> <nl> { public void clearCache ( ) { { <nl> - mWebView . clearCache ( true ) ; <nl> + mWebView . freeMemory ( ) ; <nl> } <nl> <nl>   } } 
public class LocalSearch implements SearchSpecification { <nl> <nl> <nl> public String getName ( ) { <nl> - return mName ; <nl> + return ( mName == null ? " " : mName ) ; <nl> } <nl> <nl>   } 
public class PyIntroduceVariableHandler extends IntroduceHandler { <nl> <nl> protected String getHelpId ( ) { <nl> - return " refactoring . introduceVariable " ; <nl> + return " python . reference . introduceVariable " ; <nl> } <nl> } <nl>   
public class Tmp { public enum SASLError { <nl> invalid_authzid , <nl> invalid_mechanism , <nl> malformed_request , <nl> + mechanism_too_weak , <nl> not_authorized , <nl> temporary_auth_failure ; <nl>   } } 
public abstract class BaseUpgradePortletId extends UpgradeProcess { public void test ( ) { <nl> typeSettingsProperties . setProperty ( <nl> newStagingPortletId , stagingPortletSetting ) ; <nl> + typeSettingsProperties . remove ( oldStagingPortletId ) ; <nl> + <nl> return typeSettingsProperties . toString ( ) ; <nl> } <nl>   } 
public class MarkupTemplateEngine extends TemplateEngine { <nl> <nl> } <nl> - static class TemplateResource { <nl> + public static class TemplateResource { <nl> private final String baseName ; <nl> private final String locale ; <nl> private final String extension ; <nl>   } } 
import static org . junit . Assert . * ; <nl> public class ErrorReportingTest extends BaseTest <nl> { <nl> - public static class InvalidAwaitCall <nl> + public static class InvalidAwaitCall <nl> { <nl> public void invalidAwaitCall ( Task task ) <nl> { <nl>   } } } 
public class Compiler extends AbstractCompiler implements ErrorHandler { <nl> <nl> private void processNewScript ( JsAst ast , Node originalRoot ) { <nl> + languageMode = options . getLanguageIn ( ) ; <nl> + <nl> Node js = ast . getAstRoot ( this ) ; <nl> Preconditions . checkNotNull ( js ) ; <nl>   } } 
public class Container extends AbsLayoutContainer { <nl> private EdgeEffect mLeftEdge , mRightEdge , mTopEdge , mBottomEdge ; <nl> - private float pullPastSlack = 50f ; <nl> + private float pullPastSlack = 150f ; <nl> <nl> <nl>   } 
public class PGraphics extends PImage implements PConstants { <nl> <nl> public void blendMode ( int mode ) { <nl> this . blendMode = mode ; <nl> - new Exception ( " setting blend mode to " + mode ) . printStackTrace ( ) ; <nl> blendModeImpl ( ) ; <nl> } <nl>   } 
public abstract class MultilanguageCodeStyleAbstractPanel extends CodeStyleAbstr <nl> { public void setLanguageSelector ( LanguageSelector langSelector ) { <nl> myLanguageSelector = langSelector ; <nl> + setPanelLanguage ( langSelector . getLanguage ( ) ) ; <nl> } <nl> public void setPanelLanguage ( Language language ) { <nl>   } } 
import javax . crypto . Mac ; <nl> <nl> <nl> <nl> <nl> public final class FingerprintManagerCompatApi23 { public void test ( ) { <nl>   } } 
public class AccessibilityNodeInfo implements Parcelable { <nl> <nl> <nl> public boolean refresh ( ) { <nl> - return refresh ( false ) ; <nl> + return refresh ( true ) ; <nl> } <nl> <nl>   } 
public final class RuntimeConstants { <nl> public static final String ALLUXIO_JAR = <nl> " target / alluxio - " + VERSION + " - jar - with - dependencies . jar " ; <nl> + private RuntimeConstants ( ) { { <nl> + } <nl> } <nl>   } 
import java . util . Optional ; <nl> public class TSVSentenceIterator implements Iterator < Sentence > { <nl> <nl> - enum SentenceField { <nl> + public enum SentenceField { <nl> ID , <nl> DEPENDENCIES_STANFORD , <nl> DEPENDENCIES_EXTRAS , <nl>   } } } 
public class CompilerOptions implements Serializable , Cloneable { <nl> <nl> <nl> <nl> <nl> <nl> public void setLanguageIn ( LanguageMode languageIn ) { <nl> this . languageIn = languageIn ; <nl>   } } 
import java . util . * ; <nl> <nl> <nl> <nl> - public class DBMaker < DBMakerT extends DBMaker > { <nl> + public class DBMaker < DBMakerT extends DBMaker < DBMakerT > > { <nl> protected final String TRUE = " true " ; <nl>   } } 
public class DomModelTreeView extends Wrapper implements DataProvider { <nl> <nl> public void dispose ( ) { <nl> + myBuilder . dispose ( ) ; <nl> myDomManager . removeDomEventListener ( myDomEventListener ) ; <nl> } <nl>   } 
public class CameraView extends ViewGroup implements AutoFocusCallback { public void test ( ) { { <nl> } <nl> removeView ( previewStrategy . getWidget ( ) ) ; <nl> - <nl> onOrientationChange . disable ( ) ; <nl> - <nl> lastPictureOrientation = - 1 ; <nl> } <nl>   } 
public class PrestoConnection <nl> { public int getTransactionIsolation ( ) <nl> throws SQLException <nl> { { <nl> - throw new UnsupportedOperationException ( " getTransactionIsolation " ) ; <nl> + return TRANSACTION_NONE ; <nl> } <nl> <nl>   } } 
public class ExcelImporter extends TabularImportingParserBase { <nl> <nl> public List < Object > getNextRowOfCells ( ) throws IOException { <nl> - if ( nextRow >= lastRow ) { <nl> + if ( nextRow > lastRow ) { <nl> return null ; <nl> } <nl>   } } } 
public class CoreProxy { <nl> <nl> public static void setField804 ( EntityItem item , float value ) { <nl> - item . field_804_d = value ; <nl> + item . hoverStart = value ; <nl> } <nl> public static File getPropertyFile ( ) { <nl>   } } 
public abstract class BaseNetworkStateTracker implements NetworkStateTracker { <nl> <nl> <nl> + public void captivePortalCheckComplete ( ) { <nl> + <nl> + } <nl> + <nl> + <nl> public boolean setRadio ( boolean turnOn ) { <nl> <nl> return true ; <nl>   } } 
abstract class CommunicationProtocol <nl> { public void test ( ) { { { <nl> dest . writeBytes ( bytes ) ; <nl> } <nl> + channel . close ( ) ; <nl> } <nl> } <nl>   } 
public class ClassNode extends AnnotatedNode implements Opcodes { <nl> <nl> public void setModifiers ( int modifiers ) { <nl> - this . modifiers = modifiers ; <nl> + redirect ( ) . modifiers = modifiers ; <nl> } <nl> public List < PropertyNode > getProperties ( ) { <nl>   } } 
public class SingleFilePageSwapperFactory implements PageSwapperFactory <nl> <nl> { public String implementationName ( ) <nl> { { <nl> - return " striped " ; <nl> + return " single " ; <nl> } <nl> <nl>   } } 
package org . apache . lucene . index ; <nl> <nl> <nl> <nl> <nl> public class IndexWriterAccessor <nl> { public void test ( ) { <nl>   } } 
public class ShellSpout implements ISpout { public void test ( ) { <nl> LOG . error ( " Halting process : ShellSpout died . " , exception ) ; <nl> _collector . reportError ( exception ) ; <nl> + _process . destroy ( ) ; <nl> System . exit ( 11 ) ; <nl> } <nl>   } 
public class CorruptSSTableException extends RuntimeException <nl> { public CorruptSSTableException ( Exception cause , File path ) <nl> { { <nl> - super ( cause ) ; <nl> + super ( " Corrupted : " + path , cause ) ; <nl> this . path = path ; <nl> } <nl>   } } 
public final class DiskLruCache implements Closeable { <nl> <nl> <nl> - public boolean isClosed ( ) { <nl> + } public synchronized boolean isClosed ( ) { <nl> return journalWriter == null ; <nl> } <nl>   } 
public class OtrChatManager implements OtrEngineListener , OtrSmEngineHost { public void test ( ) { <nl> mSessions = new Hashtable < String , SessionID > ( ) ; <nl> mOtrSms = new Hashtable < SessionID , OtrSm > ( ) ; <nl> + <nl> + mContext = context ; <nl> } <nl>   } 
public class ServletException extends Exception { <nl> <nl> <nl> public ServletException ( Throwable rootCause ) { <nl> - this ( rootCause . getLocalizedMessage ( ) , rootCause ) ; <nl> + super ( rootCause ) ; <nl> } <nl> <nl>   } 
public class PartitionManager { <nl> <nl> public void close ( ) { <nl> + commit ( ) ; <nl> _connections . unregister ( _partition . host , _partition . partition ) ; <nl> } <nl>   } 
public class SimpleCredentialsDialog extends DialogWrapper implements DocumentLi <nl> <nl> { public JComponent getPreferredFocusedComponent ( ) { <nl> - return myUserNameText ; <nl> + return myUserNameText . isEnabled ( ) ? myUserNameText : myPasswordText ; <nl> } <nl> public boolean shouldCloseOnCross ( ) { <nl>   } } 
public final class SslHandshakeCompletionEvent { <nl> private final Throwable cause ; <nl> - SslHandshakeCompletionEvent ( Throwable cause ) { <nl> + public SslHandshakeCompletionEvent ( Throwable cause ) { <nl> this . cause = cause ; <nl> } <nl>   } } 
public class FunType extends Type { public void test ( ) { { { <nl> } <nl> } <nl> - typeStack . pop ( type1 , type2 ) ; <nl> return true ; <nl> } <nl>   } 
public class HighlightUsagesHandler extends HighlightHandlerBase { public void test ( ) { { <nl> } <nl> final EditorSearchComponent header = new EditorSearchComponent ( editor , project ) ; <nl> + header . setRegexp ( false ) ; <nl> editor . setHeaderComponent ( header ) ; <nl> } <nl>   } 
public class IconMenuTag extends BaseBodyTagSupport implements BodyTag { public void test ( ) { <nl> _localizeMessage = true ; <nl> _maxDisplayItems = _DEFAULT_MAX_DISPLAY_ITEMS ; <nl> _message = " actions " ; <nl> + _scroll = false ; <nl> _select = false ; <nl> _showArrow = true ; <nl> _showExpanded = false ; <nl>   } } 
public class RNNOptions implements Serializable { <nl> <nl> public int numClasses = 5 ; <nl> - public boolean lowercaseWordVectors = true ; <nl> + public boolean lowercaseWordVectors = false ; <nl> public boolean useTensors = true ; <nl>   } 
public class Scroller { <nl> <nl> <nl> public final void setFriction ( float friction ) { <nl> - computeDeceleration ( friction ) ; <nl> + mDeceleration = computeDeceleration ( friction ) ; <nl> } <nl> private float computeDeceleration ( float friction ) { <nl>   } } 
public class CometConnectionManagerValve <nl> { public void sessionCreated ( HttpSessionEvent se ) { { <nl> + <nl> } <nl>   } } 
class Waiter { public void test ( ) { { <nl> sleeper . sleep ( ) ; <nl> } <nl> - return null ; <nl> + return view ; <nl> } <nl> <nl>   } 
public class AssetPublisherImpl implements AssetPublisher { public void test ( ) { <nl> assetEntryQuery . setAllCategoryIds ( allAssetCategoryIds ) ; <nl> - if ( overrideAllAssetCategoryIds != null ) { <nl> + if ( overrideAllAssetTagNames != null ) { <nl> allAssetTagNames = overrideAllAssetTagNames ; <nl> } <nl>   } } } 
public class RemoteServerConfiguration implements Cacheable , Externalizable { <nl> private int remotePort ; <nl> + public RemoteServerConfiguration ( ) { <nl> + } <nl> + <nl> public RemoteServerConfiguration ( String domain ) { <nl> this . domain = domain ; <nl> } <nl>   } 
public class NioEndpoint extends AbstractEndpoint < NioChannel > { public void test ( ) { <nl> fillReadBuffer ( false ) ; <nl> - <nl> boolean isReady = socketBufferHandler . getReadBuffer ( ) . position ( ) > 0 ; <nl> return isReady ; <nl> } <nl>   } 
public class XUtilHook extends XHook { <nl> <nl> public String getClassName ( ) { <nl> - return " biz . bokhorst . xprivacy . Util " ; <nl> + return Util . class . getName ( ) ; <nl> } <nl> <nl>   } 
public class MarkupBuilder extends BuilderSupport { <nl> <nl> <nl> <nl> - public Object getMkp ( ) { <nl> + } public MarkupBuilderHelper getMkp ( ) { <nl> return new MarkupBuilderHelper ( this ) ; <nl> } <nl>   } 
package org . apache . cordova . facebook ; <nl> + import java . io . UnsupportedEncodingException ; <nl> + import java . net . URLDecoder ; <nl> import java . util . ArrayList ; <nl> import java . util . Arrays ; <nl> import java . util . Date ; <nl>   
public class Color { public void test ( ) { <nl> this . mRed = pRed ; <nl> this . mGreen = pGreen ; <nl> this . mBlue = pBlue ; <nl> + this . mAlpha = pAlpha ; <nl> this . pack ( ) ; <nl> return true ; <nl>   } } 
public class Main { <nl> public static void main ( String [ ] args ) { { <nl> - if ( args . length < 1 ) ; <nl> - throw new IllegalArgumentException ( " Missing required argument " ) ; <nl> + <nl> + new Exception ( ) ; <nl> } <nl> } <nl>   } 
class InjectorImpl implements Injector { public void test ( ) { <nl> <nl> if ( providedBinding == null ) { <nl> - handleMissingBinding ( this , key ) ; <nl> + handleMissingBinding ( key ) ; <nl> return invalidBinding ( key ) ; <nl> } <nl>   } } 
public final class Constants { <nl> <nl> <nl> <nl> - public static final boolean DEBUG = true ; <nl> + public static final boolean DEBUG = false ; <nl> <nl> <nl>   } 
public class Cookie implements Cloneable , Serializable { public void test ( ) { <nl> try { <nl> return super . clone ( ) ; <nl> } catch ( CloneNotSupportedException e ) { <nl> - throw new RuntimeException ( e . getMessage ( ) ) ; <nl> + throw new RuntimeException ( e ) ; <nl> } <nl> } <nl>   } 
public class UserGroupsAdminPortletDataHandler extends BasePortletDataHandler { <nl> public static final String NAMESPACE = " user_groups_admin " ; <nl> public UserGroupsAdminPortletDataHandler ( ) { <nl> - super ( ) ; <nl> - <nl> setDataLevel ( DataLevel . PORTAL ) ; <nl> } <nl>   } 
public class FolderList extends K9ListActivity { public void test ( ) { <nl> if ( initialFolder != null ) { <nl> intent . putExtra ( EXTRA_INITIAL_FOLDER , initialFolder ) ; <nl> } <nl> + else { <nl> + intent . putExtra ( EXTRA_STARTUP , true ) ; <nl> + } <nl> return intent ; <nl> } <nl>   } 
public class Vector { <nl> public int getAt ( int index ) { <nl> return elements [ index ] ; <nl> } <nl> + <nl> + public int size ( ) { <nl> + return elements . length ; <nl> + } <nl> } <nl>   
public class APCleanupAlgorithm implements EpisodeCleanupAlgorithm < Integer > { <nl> <nl> public Integer getDefaultCleanupParameter ( Context context ) { <nl> - return 0 ; <nl> + return getPerformAutoCleanupArgs ( context , 0 ) ; <nl> } <nl> <nl>   } 
public class AudioRecord <nl> <nl> <nl> { public int getRecordingState ( ) { { <nl> - return mRecordingState ; <nl> + synchronized ( mRecordingStateLock ) { <nl> + return mRecordingState ; <nl> + } <nl> } <nl> <nl>   } } 
public class AQUtility { <nl> <nl> public static File getCacheFile ( File dir , String url ) { <nl> + if ( url == null ) return null ; <nl> String name = getCacheFileName ( url ) ; <nl> File file = makeCacheFile ( dir , name ) ; <nl> return file ; <nl>   } } 
public class TextView extends View implements ViewTreeObserver . OnPreDrawListener <nl> <nl> { public boolean dispatchPopulateAccessibilityEvent ( AccessibilityEvent event ) { <nl> + if ( ! isShown ( ) ) { <nl> + return false ; <nl> + } <nl> + <nl> final boolean isPassword = isPasswordInputType ( mInputType ) ; <nl> if ( ! isPassword ) { <nl>   } } } 
public class GestureDetector { public void test ( ) { <nl> mVelocityTracker = null ; <nl> mIsDoubleTapping = false ; <nl> mStillDown = false ; <nl> + mAlwaysInTapRegion = false ; <nl> + mAlwaysInBiggerTapRegion = false ; <nl> if ( mInLongPress ) { <nl> mInLongPress = false ; <nl> } <nl>   } } 
public class DocumentWindowImpl extends UserDataHolderBase implements Disposable <nl> <nl> { public void moveText ( int srcStart , int srcEnd , int dstOffset ) { { <nl> - <nl> throw new UnsupportedOperationException ( ) ; <nl> } <nl>   } } 
public class MocoServer { public void test ( ) { <nl> if ( bossGroup != null ) { <nl> bossGroup . shutdownGracefully ( ) ; <nl> - workerGroup = null ; <nl> + bossGroup = null ; <nl> } <nl>   } } 
public class Validator { public void test ( ) { <nl> <nl> <nl> <nl> <nl> <nl> <nl>   } } 
import java . util . List ; <nl> <nl> <nl> <nl> - public final class DayViewFacade { <nl> + public class DayViewFacade { <nl> private boolean isDecorated ; <nl>   } } 
import android . util . Log ; <nl> import java . net . InetSocketAddress ; <nl> import java . net . ProxySelector ; <nl> import java . net . URI ; <nl> + import java . util . List ; <nl> import java . util . regex . Matcher ; <nl> import java . util . regex . Pattern ; <nl>   
public class BitmapDrawable extends Drawable { public void test ( ) { { { <nl> mTargetDensity = state . mTargetDensity ; <nl> } <nl> - updateTintFilter ( mTintFilter , state . mTint , state . mTintMode ) ; <nl> + mTintFilter = updateTintFilter ( mTintFilter , state . mTint , state . mTintMode ) ; <nl> computeBitmapSize ( ) ; <nl> } <nl> } <nl>   } 
public class XmppConnection implements Runnable { <nl> public void resetEverything ( ) { <nl> resetStreamId ( ) ; <nl> clearIqCallbacks ( ) ; <nl> + mStanzaQueue . clear ( ) ; <nl> synchronized ( this . disco ) { <nl> disco . clear ( ) ; <nl> } <nl>   } } 
import java . util . Comparator ; <nl> <nl> <nl> <nl> <nl> <nl> <nl> class PeepholeMinimizeConditions <nl> extends AbstractPeepholeOptimization { public void test ( ) { <nl>   } } 
public class Tmp { public enum UniformBinding { <nl> WorldViewProjectionMatrix , <nl> <nl> <nl> <nl> <nl> <nl> <nl>   } } 
public class StringPair { <nl> public String getTarget ( ) { <nl> return targetString ; <nl> } <nl> + <nl> + public String toString ( ) { <nl> + return sourceString + " & " + targetString ; <nl> + } <nl> } <nl>   
public class Snackbar extends SnackbarLayout { <nl> <nl> protected void onDetachedFromWindow ( ) { <nl> super . onDetachedFromWindow ( ) ; <nl> + <nl> + mIsShowing = false ; <nl> + <nl> if ( mDismissRunnable != null ) { <nl> removeCallbacks ( mDismissRunnable ) ; <nl> } <nl>   } } 
public class DB2Database extends AbstractJdbcDatabase { <nl> public String getDefaultCatalogName ( ) { <nl> if ( defaultCatalogName != null ) { <nl> - return defaultSchemaName ; <nl> + return defaultCatalogName ; <nl> } <nl> if ( defaultSchemaName != null ) { <nl>   } } } 
public class RajawaliRenderer implements GLSurfaceView . Renderer , INode { <nl> <nl> protected void destroyScene ( ) { <nl> + mSceneInitialized = false ; <nl> for ( BaseObject3D child : mChildren ) { <nl> child . destroy ( ) ; <nl> } <nl>   } } 
public class UriUtils { public void test ( ) { { { <nl> } <nl> } <nl> - return displayName ; <nl> + <nl> + return displayName . replaceAll ( " / " , " - " ) ; <nl> } <nl>   } 
static abstract class HostExpr implements Expr { <nl> <nl> private static Class maybeClass ( Object form , boolean stringOk ) throws Exception { <nl> + if ( form instanceof Class ) <nl> + return ( Class ) form ; <nl> Class c = null ; <nl> if ( form instanceof Symbol ) <nl> { <nl>   } } } 
public class FloatingActionButton extends ImageButton { public void test ( ) { <nl> if ( mSettledScrollY != scrollY ) { <nl> mSettledScrollY = scrollY ; <nl> removeMessages ( 0 ) ; <nl> - <nl> sendEmptyMessage ( 0 ) ; <nl> } <nl> } <nl>   } 
public class PImage implements PConstants , Cloneable { public void test ( ) { <nl> modified = true ; <nl> mx1 = 0 ; <nl> my1 = 0 ; <nl> - mx2 = width - 1 ; <nl> - my2 = height - 1 ; <nl> + mx2 = width ; <nl> + my2 = height ; <nl> } <nl>   } 
public class DefaultResultSetHandler implements ResultSetHandler { public void test ( ) { { { { { <nl> } <nl> } <nl> } <nl> + autoMappingsCache . put ( mapKey , autoMapping ) ; <nl> } <nl> - autoMappingsCache . put ( mapKey , autoMapping ) ; <nl> return autoMapping ; <nl> } <nl>   } 
package org . codehaus . groovy . reflection ; <nl> - import com . sun . jmx . snmp . internal . SnmpDecryptedPdu ; <nl> - <nl> import java . util . AbstractList ; <nl> import java . util . Collection ; <nl> import java . util . Iterator ; <nl>   
public class TxEngine extends EngineWrapper { <nl> <nl> - protected boolean uncommitedData = false ; <nl> + protected volatile boolean uncommitedData = false ; <nl> protected final boolean fullTx ; <nl>   } 
class ListRemoteViewsFactory implements RemoteViewsService . RemoteViewsFactory { <nl> public ListRemoteViewsFactory ( Context applicationContext , Intent intent ) { <nl> Log . d ( TAG , " ListRemoteViewsFactory instantiated " ) ; <nl> m_app = ( TodoApplication ) applicationContext ; <nl> + onDataSetChanged ( ) ; <nl> } <nl> <nl>   } 
public class ZFrame { <nl> <nl> <nl> protected ZFrame ( ) { <nl> - <nl> } <nl> <nl>   } 
public class WifiConfiguration implements Parcelable { <nl> <nl> <nl> public boolean isValid ( ) { <nl> - if ( SSID == null ) <nl> - return false ; <nl> if ( allowedKeyManagement == null ) <nl> return false ; <nl>   } } 
public class TitleParserTest extends DatabaseTestCase { <nl> <nl> private void insertTitleAddTask ( String title , Task task , TaskService taskService ) { <nl> + task . clear ( ) ; <nl> task . setValue ( Task . TITLE , title ) ; <nl> taskService . quickAdd ( task ) ; <nl> } <nl>   } 
import com . siyeh . ipp . base . PsiElementPredicate ; <nl> <nl> <nl> <nl> - public class NestedTryStatementsPredicate implements PsiElementPredicate { <nl> + class NestedTryStatementsPredicate implements PsiElementPredicate { <nl> <nl> public boolean satisfiedBy ( PsiElement element ) { <nl>   } } } 
public class TemplateManagerUtil { public void test ( ) { { <nl> registry . ungetService ( serviceReference ) ; <nl> _templateManagers . remove ( templateManager . getName ( ) ) ; <nl> + <nl> + templateManager . destroy ( ) ; <nl> } <nl> } <nl>   } 
public class RoundRobinConnectionPoolImplTest extends BaseConnectionPoolTest { <nl> <nl> <nl> + <nl> public void testAddingNewHost ( ) { <nl> CountingConnectionPoolMonitor monitor = new CountingConnectionPoolMonitor ( ) ; <nl>   } } 
public class Log4JUtil { public void test ( ) { <nl> return ; <nl> } <nl> - <nl> + <nl> DOMConfigurator domConfigurator = new DOMConfigurator ( ) ; <nl>   } 
public class ComponentAttributeSourceImpl implements ComponentAttributeSource { <nl> <nl> public String getParentReferenceAttributeName ( ) { <nl> + <nl> return null ; <nl> } <nl>   } 
public class SuggestionAutoCompleteText extends MultiAutoCompleteTextView { public void test ( ) { { { <nl> } <nl> } <nl> - return super . dispatchKeyEvent ( event ) ; <nl> + return super . onKeyPreIme ( keyCode , event ) ; <nl> } <nl> <nl>   } 
public class ViewOverlay { <nl> public void clear ( ) { <nl> removeAllViews ( ) ; <nl> - mDrawables . clear ( ) ; <nl> + if ( mDrawables != null ) { <nl> + mDrawables . clear ( ) ; <nl> + } <nl> } <nl> boolean isEmpty ( ) { <nl>   } } 
public class PApplet implements PConstants { public void test ( ) { <nl> } <nl> - <nl> + <nl> <nl> <nl> <nl>   } 
public class IsolatedContext extends ContextWrapper { <nl> <nl> <nl> + public void unregisterReceiver ( BroadcastReceiver receiver ) { <nl> + <nl> + } <nl> + <nl> + <nl> public void sendBroadcast ( Intent intent ) { <nl> mBroadcastIntents . add ( intent ) ; <nl> } <nl>   } 
import java . util . ArrayList ; <nl> import java . util . concurrent . * ; <nl> import jsr166y . CountedCompleter ; <nl> + import jsr166y . ForkJoinPool ; <nl> import water . DException . DistributedException ; <nl> import water . util . Log ; <nl>   
public class GeneralRouter implements VehicleRouter { <nl> <nl> public long [ ] getImpassableRoadIds ( ) { <nl> + if ( impassableRoads == null ) { <nl> + return new long [ 0 ] ; <nl> + } <nl> return impassableRoads . toArray ( ) ; <nl> } <nl>   } 
public class SimpleHostConnectionPoolTest { public void test ( ) { <nl> config . setMaxConnsPerHost ( 2 ) ; <nl> config . setInitConnsPerHost ( 1 ) ; <nl> config . setConnectTimeout ( 200 ) ; <nl> + config . initialize ( ) ; <nl> return config ; <nl> } <nl>   } 
import javax . inject . Inject ; <nl> import dagger . ObjectGraph ; <nl> - class CoffeeApp implements Runnable { <nl> + public class CoffeeApp implements Runnable { <nl> CoffeeMaker coffeeMaker ; <nl> } public void run ( ) { <nl>   } } 
public class HeadlessWorldRenderer implements WorldRenderer { <nl> <nl> public void dispose ( ) { <nl> - <nl> + worldProvider . dispose ( ) ; <nl> } <nl>   } 
public class SerializationUtils { public void test ( ) { { { <nl> QueryMessage query = new QueryMessage ( versions ) ; <nl> return query ; <nl> <nl> - throw new IOException ( " Uknown message type . " ) ; <nl> + throw new IOException ( " Unknown message type . " ) ; <nl> } <nl> } <nl> } <nl>   } 
public final class AnimChannel { public void test ( ) { <nl> time = 0 ; <nl> speed = 1f ; <nl> loopMode = LoopMode . Loop ; <nl> - System . out . println ( " Setting notified false " ) ; <nl> notified = false ; <nl> } <nl>   } 
public class TestJsonPointer <nl> extends BaseMapTest <nl> { <nl> <nl> + public void testIt ( ) { { } <nl> } <nl>   } 
public class FeedItemDialog extends Dialog { public void test ( ) { { { <nl> return ; <nl> } <nl> actionButtonCallback . onActionButtonPressed ( item ) ; <nl> + if ( media . isDownloaded ( ) ) { <nl> + <nl> + dismiss ( ) ; <nl> + } <nl> } <nl> } <nl>   } 
public abstract class TileMachine extends TileBuildCraft implements IMachine , IP <nl> <nl> { public int powerRequest ( ) { <nl> if ( isActive ( ) ) { <nl> - return getPowerProvider ( ) . getActivationEnergy ( ) ; <nl> + return getPowerProvider ( ) . getMaxEnergyReceived ( ) ; <nl> } else { <nl> return 0 ; <nl> } <nl>   } } 
public class DefaultLayoutAnimator extends LayoutAnimator { <nl> public int oldCellsRemovalAnimationStartDelay = 0 ; <nl> - public int cellPositionTransitionAnimationDuration = 2500 ; <nl> + public int cellPositionTransitionAnimationDuration = 250 ; <nl> <nl> <nl>   } 
public class AjpNioProtocol extends AbstractAjpProtocol { <nl> <nl> public void release ( SocketWrapper < NioChannel > socket , <nl> AjpNioProcessor processor , boolean isSocketClosing ) { <nl> - connections . remove ( socket ) ; <nl> processor . recycle ( isSocketClosing ) ; <nl> recycledProcessors . offer ( processor ) ; <nl> } <nl>   } 
public abstract class AbstractGrailsPluginManager implements GrailsPluginManager <nl> <nl> - <nl> { public boolean isShutdown ( ) { { <nl> return shutdown ; <nl> } <nl>   } } 
public class TaskAdapter extends CursorAdapter implements Filterable { public void test ( ) { <nl> <nl> addListeners ( view ) ; <nl> - <nl> - bindView ( view , context , cursor ) ; <nl> - <nl> return view ; <nl> } <nl>   } 
public final class TvContract { <nl> <nl> <nl> <nl> - public static final String COLUMN_PACKAGE_NAME = " package_name " ; <nl> + String COLUMN_PACKAGE_NAME = " package_name " ; <nl> } <nl> <nl>   
public class IntSet { <nl> <nl> } <nl> - static private class IntSetIterator { <nl> + static public class IntSetIterator { <nl> static final int INDEX_ILLEGAL = - 2 ; <nl> static final int INDEX_ZERO = - 1 ; <nl>   } } 
public class SpanishXMLTreeReader implements TreeReader { <nl> private static final String ATTR_ELLIPTIC = " elliptic " ; <nl> private static final String EMPTY_LEAF = " - NONE - " ; <nl> - private static final String MISSING_PHRASAL = " DUMMYP " ; <nl> - private static final String MISSING_POS = " DUMMY " ; <nl> private NodeList sentences ; <nl> private int sentIdx ; <nl>   } 
public class RNNOptions implements Serializable { <nl> <nl> public int numClasses = 5 ; <nl> - public boolean lowercaseWordVectors = true ; <nl> + public boolean lowercaseWordVectors = false ; <nl> public boolean useTensors = true ; <nl>   } 
public class JIoEndpoint { <nl> <nl> public int getCurrentThreadsBusy ( ) { <nl> - return curThreads - workers . size ( ) ; <nl> + return workers != null ? curThreads - workers . size ( ) : 0 ; <nl> } <nl>   } 
public class AppleBundle extends AbstractBuildRule { <nl> <nl> <nl> - <nl> public ImmutableList < Step > getBuildSteps ( <nl> BuildContext context , <nl> BuildableContext buildableContext ) { { <nl> - return null ; <nl> + return ImmutableList . of ( ) ; <nl> } <nl> } <nl>   } 
package org . apache . coyote . http11 ; <nl> import org . junit . Assert ; <nl> - import org . junit . Ignore ; <nl> import org . junit . Test ; <nl> import org . apache . catalina . Context ; <nl>   
public class ServiceBuilder <nl> <nl> { public ServiceBuilder scope ( String scope ) <nl> { { <nl> + Preconditions . checkEmptyString ( scope , " Invalid OAuth scope " ) ; <nl> this . scope = scope ; <nl> return this ; <nl> } <nl>   } } 
public class VcsHistoryProviderBackgroundableProxy { public void test ( ) { <nl> if ( session != null ) { <nl> partner . reportCreatedEmptySession ( session ) ; <nl> partner . finished ( ) ; <nl> - partner . forceRefresh ( ) ; <nl> return ; <nl> } <nl> } <nl>   } 
public class AaptStep extends ShellStep { <nl> <nl> public String getShortName ( ) { { <nl> - return String . format ( " aapt_package " ) ; <nl> + return " aapt_package " ; <nl> } <nl> } <nl>   } 
public class CompilerOptions { <nl> <nl> public void setInstrumentationTemplateFile ( String filename ) { <nl> - this . instrumentationTemplateFile = filename ; <nl> + this . instrumentationTemplateFile = filename ; <nl> } <nl> public void setRecordFunctionInformation ( boolean recordFunctionInformation ) { <nl>   } } 
public class LuceneUtil { <nl> <nl> public static void write ( IndexWriter writer ) throws IOException { <nl> - <nl> + writer . optimize ( ) ; <nl> writer . close ( ) ; <nl> } <nl>   } 
public final class CalendarContract { <nl> <nl> <nl> <nl> - public static final String DEFAULT_SORT_ORDER = " displayName " ; <nl> + public static final String DEFAULT_SORT_ORDER = CALENDAR_DISPLAY_NAME ; <nl> <nl> <nl>   } 
public class EditNotesControlSet extends PopupControlSet { <nl> <nl> protected void refreshDisplayView ( ) { <nl> + notesPreview . setText ( " " ) ; <nl> notesPreview . setText ( editText . getText ( ) ) ; <nl> linkifyDisplayView ( ) ; <nl> } <nl>   } 
public class HomeActivity extends AppCompatActivity implements View . OnClickListe <nl> <nl> { public void onTabUnselected ( int position ) { { <nl> - <nl> } <nl> <nl>   } } 
package org . apache . catalina . realm ; <nl> import java . io . IOException ; <nl> - import java . lang . reflect . InvocationTargetException ; <nl> import java . net . URI ; <nl> import java . net . URISyntaxException ; <nl> import java . security . KeyManagementException ; <nl>   
public class IndicatorLayout extends FrameLayout implements AnimationListener { <nl> <nl> public void show ( ) { <nl> + mArrowImageView . clearAnimation ( ) ; <nl> startAnimation ( mInAnim ) ; <nl> } <nl>   } 
public class Base { public void test ( ) { { { { <nl> } <nl> } <nl> } <nl> - return found ; <nl> + return found ; <nl> } <nl>   } 
public class CoreProxy { <nl> <nl> public static void setField804 ( EntityItem item , float value ) { <nl> - item . hoverStart = value ; <nl> + item . field_804_d = value ; <nl> } <nl> public static File getPropertyFile ( ) { <nl>   } } 
public class MetadataTest extends BaseDataTest { <nl> <nl> public void setup ( ) throws Exception { <nl> dataSource = createUnpooledDataSource ( BaseDataTest . BLOG_PROPERTIES ) ; <nl> + runScript ( dataSource , BLOG_DDL ) ; <nl> } <nl> <nl>   } 
public class NotificationsTable { public void test ( ) { <nl> getDb ( ) . delete ( NOTIFICATIONS_TABLE , null , null ) ; <nl> } <nl> - <nl> <nl> <nl> <nl>   } 
public abstract class DockerSupport { <nl> public static DockerSupport getInstance ( ) { <nl> return ServiceManager . getService ( DockerSupport . class ) ; <nl> } <nl> + <nl> + public abstract String getDefaultCertificatesFolder ( ) ; <nl> } <nl>   
public class ChromeSettings extends BrowserSpecificSettings { <nl> private int myRemoteShellPort = DEFAULT_REMOTE_SHELL_PORT ; <nl> public ChromeSettings ( ) { <nl> - <nl> } <nl> <nl>   } 
public class PrincipalGroupCallback { public void test ( ) { { <nl> return callerPrincipalCallback . getSubject ( ) ; <nl> } <nl> if ( groupPrincipalCallback != null ) { <nl> - return callerPrincipalCallback . getSubject ( ) ; <nl> + return groupPrincipalCallback . getSubject ( ) ; <nl> } <nl> return null ; <nl> } <nl>   } 
public class SecurityCheckInjectableTest { <nl> <nl> public void <nl> - calling_login_should_return_user_if_user_present_in_http_session ( ) { <nl> + cookie_login_should_return_user_if_user_present_in_http_session ( ) { <nl> User userInSession = new User ( ) ; <nl> HttpSession session = mock ( HttpSession . class ) ; <nl>   } } } 
public class HeadlessMaterial extends BaseMaterial { <nl> <nl> public void reload ( MaterialData newData ) { <nl> - this . data = data ; <nl> + this . data = newData ; <nl> } <nl> <nl>   } 
public class ErrorBar extends JPanel { <nl> <nl> protected void done ( ) { <nl> - int bigCount = 0 ; <nl> int totalLines = 0 ; <nl> int currentTab = 0 ; <nl> for ( SketchCode sc : editor . getSketch ( ) . getCode ( ) ) { <nl>   } } } 
public class IndexLookupSourceSupplier <nl> <nl> { public void destroy ( ) <nl> { { { <nl> - throw new UnsupportedOperationException ( ) ; <nl> + <nl> } <nl> } <nl>   } } 
public class ExpandableNotificationRow extends ActivatableNotificationView { public void test ( ) { <nl> mMaxExpandHeight = 0 ; <nl> mWasReset = true ; <nl> onHeightReset ( ) ; <nl> + requestLayout ( ) ; <nl> } <nl> <nl>   } 
class CopyFilesOrDirectoriesDialog extends DialogWrapper { <nl> <nl> public JComponent getPreferredFocusedComponent ( ) { <nl> - return myNewNameField ; <nl> + return myShowNewNameField ? myNewNameField : myTargetDirectoryField . getChildComponent ( ) ; <nl> } <nl> protected JComponent createCenterPanel ( ) { <nl>   } } 
public class WifiP2pService extends IWifiP2pManager . Stub { <nl> <nl> public void exit ( ) { <nl> + sendP2pDiscoveryChangedBroadcast ( false ) ; <nl> sendP2pStateChangedBroadcast ( false ) ; <nl> mNetworkInfo . setIsAvailable ( false ) ; <nl> } <nl>   } 
public final class Internal { <nl> <nl> <nl> public static boolean inMilliseconds ( final byte [ ] qualifier , <nl> - final byte offset ) { <nl> + final int offset ) { <nl> return inMilliseconds ( qualifier [ offset ] ) ; <nl> } <nl>   } } 
public abstract class MasterBase implements Master { <nl> protected boolean isLeaderMode ( ) { <nl> return mIsLeader ; <nl> } <nl> - <nl> + <nl> protected boolean isStandbyMode ( ) { <nl> return ! mIsLeader ; <nl> } <nl>   } 
public final class IndexUtils { public void test ( ) { <nl> indexMetaChangeTsk . setWork ( indexMetaChange ) ; <nl> rootTask . addDependentTask ( indexMetaChangeTsk ) ; <nl> + driver . destroy ( ) ; <nl> + <nl> return rootTask ; <nl> } <nl>   } 
public class WordPress extends Application { <nl> public synchronized static void updateCurrentBlogStats ( ) { <nl> - <nl> Blog currentBlog = WordPress . getCurrentBlog ( ) ; <nl> if ( currentBlog != null ) { <nl> String blogID = null ; <nl>   } } } 
public class RoutedStore implements Store < ByteArray , byte [ ] > { <nl> <nl> } <nl> - private class GetAllResult { <nl> + private static class GetAllResult { <nl> final GetAllCallable callable ; <nl> final Map < ByteArray , List < Versioned < byte [ ] > > > retrieved ; <nl>   } } 
public abstract class TransactionBlock extends Transaction { <nl> public void setClient ( Client client ) { <nl> super . setClient ( client ) ; <nl> } <nl> - <nl> - public String discard ( ) { <nl> - return super . discard ( ) ; <nl> - } <nl> } <nl>   
public class PGL { public void test ( ) { <nl> fboLayerCreated = false ; <nl> fboLayerInUse = false ; <nl> firstFrame = false ; <nl> + GLProfile . shutdown ( ) ; <nl> } <nl>   } 
public class PySignatureCacheManagerImpl extends PySignatureCacheManager { public void test ( ) { <nl> try { <nl> data = CALL_SIGNATURES_ATTRIBUTE . readAttributeBytes ( file ) ; <nl> } <nl> - catch ( IOException e ) { <nl> + catch ( Exception e ) { <nl> data = null ; <nl> } <nl>   } } } 
public class MapActivity extends AccessibleActivity implements IMapLocationListe <nl> <nl> { public Location getLastKnownLocation ( ) { { <nl> + if ( mapLayers . getLocationLayer ( ) == null ) { <nl> + return null ; <nl> + } <nl> return mapLayers . getLocationLayer ( ) . getLastKnownLocation ( ) ; <nl> } <nl>   } } 
public class SlidingUpPanelLayout extends ViewGroup { <nl> <nl> public void setCoveredFadeColor ( int color ) { <nl> mCoveredFadeColor = color ; <nl> - invalidate ( ) ; <nl> + requestLayout ( ) ; <nl> } <nl> <nl>   } 
public class MacMainFrameDecorator extends IdeFrameDecorator implements UISettin <nl> { public void windowEnteredFullScreen ( AppEvent . FullScreenEvent event ) { { <nl> if ( ! ORACLE_BUG_ID_8003173 ) { <nl> enterFullscreen ( ) ; <nl> + myFrame . validate ( ) ; <nl> } <nl> } <nl>   } } 
<nl> package javaslang . collection ; <nl> - import javaslang . Function2 ; <nl> import javaslang . Lazy ; <nl> - import javaslang . Tuple ; <nl> import javaslang . Tuple2 ; <nl> import javaslang . control . None ; <nl> import javaslang . control . Option ; <nl>   
public class IWindowManagerImpl implements IWindowManager { <nl> <nl> <nl> + public void keyguardGoingAway ( ) throws RemoteException { <nl> + } <nl> + <nl> + <nl> public void lockNow ( Bundle options ) { <nl> <nl> } <nl>   } 
public class ContextThemeWrapperPlus extends ContextThemeWrapper implements Supe <nl> { public ContextThemeWrapperPlus ( Context base , int themeres ) { { <nl> super ( base , themeres ) ; <nl> + this . mTheme = themeres ; <nl> } <nl> <nl>   } } 
public class TermSession { <nl> public void reset ( ) { <nl> mEmulator . reset ( ) ; <nl> + if ( mNotify != null ) { <nl> + mNotify . onUpdate ( ) ; <nl> + } <nl> } <nl> <nl>   } 
final class YUVMonochromeBitmapSource extends BaseMonochromeBitmapSource { <nl> <nl> + public void cacheColumnForLuminance ( int x ) { <nl> + <nl> + } <nl> + <nl> <nl> <nl> <nl>   } 
public class GitCheckoutProvider extends CheckoutProviderEx { <nl> <nl> public void doCheckout ( Project project , <nl> Listener listener ) { { <nl> - <nl> + doCheckout ( project , listener , null ) ; <nl> } <nl> } <nl>   } 
public class CalendarPickerView extends ListView { public void test ( ) { <nl> a . recycle ( ) ; <nl> adapter = new MonthAdapter ( ) ; <nl> + setDivider ( null ) ; <nl> + setDividerHeight ( 0 ) ; <nl> setBackgroundColor ( bg ) ; <nl> setCacheColorHint ( bg ) ; <nl> locale = Locale . getDefault ( ) ; <nl>   } } 
public class CachedClass { <nl> <nl> <nl> <nl> <nl> <nl> public CachedClass getCachedClass ( ) { <nl> return this ; <nl>   } } 
public class KeyButtonView extends ImageView { public void test ( ) { { { { <nl> <nl> performLongClick ( ) ; <nl> } <nl> - setPressed ( false ) ; <nl> } <nl> } <nl> } ; <nl>   } 
class BrowserFrame extends Handler { public void test ( ) { <nl> if ( sConfigCallback == null ) { <nl> sConfigCallback = new ConfigCallback ( <nl> - ( WindowManager ) context . getSystemService ( <nl> + ( WindowManager ) appContext . getSystemService ( <nl> Context . WINDOW_SERVICE ) ) ; <nl> ViewRoot . addConfigCallback ( sConfigCallback ) ; <nl> } <nl>   } } 
public class ClosureCodegen extends MemberCodegen < JetElement > { <nl> <nl> protected void done ( ) { <nl> AsmUtil . writeOuterClassAndEnclosingMethod ( classDescriptor , funDescriptor , typeMapper , v ) ; <nl> - v . done ( ) ; <nl> super . done ( ) ; <nl> } <nl>   } 
public class ViewDragHelper { public void test ( ) { <nl> } <nl> void setDragState ( int state ) { <nl> + mParentView . removeCallbacks ( mSetIdleRunnable ) ; <nl> if ( mDragState != state ) { <nl> mDragState = state ; <nl> mCallback . onViewDragStateChanged ( state ) ; <nl>   } } } 
public class Tmp { public enum Material { <nl> GHAST_TEAR ( 370 ) , <nl> GOLD_NUGGET ( 371 ) , <nl> NETHER_STALK ( 372 ) , <nl> - POTION ( 373 ) , <nl> + POTION ( 373 , 1 ) , <nl> GLASS_BOTTLE ( 374 ) , <nl> SPIDER_EYE ( 375 ) , <nl> FERMENTED_SPIDER_EYE ( 376 ) , <nl>   } } 
public class RtspRequestDecoder extends HttpMessageDecoder { <nl> protected boolean isDecodingRequest ( ) { <nl> return true ; <nl> } <nl> - <nl> } <nl>   
public class BeanInvocationThrowsExceptionTest extends ContextTestSupport { public void test ( ) { { { { <nl> } <nl> } <nl> } <nl> - <nl> + <nl> } <nl>   } 
public class Views { <nl> <nl> public static class UnableToInjectException extends RuntimeException { <nl> + UnableToInjectException ( String message ) { <nl> + super ( message ) ; <nl> + } <nl> + <nl> UnableToInjectException ( String message , Throwable cause ) { <nl> super ( message , cause ) ; <nl> } <nl>   } } 
public class StartLocalClient <nl> { public void test ( ) { { <nl> System . err . println ( " Can ' t start client with local neo service : " + <nl> e ) ; <nl> + e . printStackTrace ( System . err ) ; <nl> } <nl> } <nl>   } 
import morfologik . stemming . WordData ; <nl> import org . languagetool . AnalyzedToken ; <nl> import org . languagetool . JLanguageTool ; <nl> - import org . languagetool . tools . Tools ; <nl> public class BaseSynthesizer implements Synthesizer { <nl>   } 
public class UsageViewContext { <nl> <nl> public VirtualFile [ ] getFiles ( ) { <nl> - return VirtualFile . EMPTY_ARRAY ; <nl> + return null ; <nl> } <nl> public String getName ( ) { <nl>   } } 
public final class OperationMerge { <nl> <nl> public void unsubscribe ( ) { <nl> - System . out . println ( " unsubscribe from merge " ) ; <nl> unsubscribed = true ; <nl> } <nl>   } 
public class LayoutModelImpl implements LayoutModel { <nl> protected void setSelectedLayout ( Layout selectedLayout ) { <nl> Layout oldValue = this . selectedLayout ; <nl> this . selectedLayout = selectedLayout ; <nl> + this . selectedBuilder = selectedLayout . getBuilder ( ) ; <nl> if ( oldValue != null ) { <nl> saveProperties ( oldValue ) ; <nl> } <nl>   } } 
public class rrclient { public void test ( ) { { <nl> System . out . println ( " Received reply " + request_nbr + " [ " + reply + " ] " ) ; <nl> } <nl> - <nl> requester . close ( ) ; <nl> context . term ( ) ; <nl> } <nl>   } 
public class ToolbarActionBar extends ActionBar { public void test ( ) { <nl> mToolbar = toolbar ; <nl> mDecorToolbar = new ToolbarWidgetWrapper ( toolbar ) ; <nl> mWindowCallback = windowCallback ; <nl> + mDecorToolbar . setWindowCallback ( mWindowCallback ) ; <nl> toolbar . setOnMenuItemClickListener ( mMenuClicker ) ; <nl> mDecorToolbar . setWindowTitle ( title ) ; <nl> } <nl>   } 
public class Scheduler { <nl> private long currentTime = 0 ; <nl> private boolean paused = false ; <nl> + public long getCurrentTime ( ) { <nl> + return currentTime ; <nl> + } <nl> public void pause ( ) { <nl> paused = true ; <nl>   } } 
import play . mvc . Result ; <nl> import views . helpers . Permissions ; <nl> import views . html . system . users . edit ; <nl> import views . html . system . users . new_user ; <nl> - import views . html . system . users . show ; <nl> import javax . annotation . Nullable ; <nl> import javax . inject . Inject ; <nl>   
import water . nbhm . NonBlockingHashMap ; <nl> <nl> public final class Enum extends Iced { <nl> - public static final int MAX_ENUM_SIZE = 11000 ; <nl> + public static final int MAX_ENUM_SIZE = 65000 ; <nl> volatile NonBlockingHashMap < ValueString , Integer > _map ; <nl>   } 
public class StatsActivity extends WPActionBarActivity { public void test ( ) { <nl> loadStatsFragments ( ) ; <nl> setTitle ( R . string . stats ) ; <nl> + restoreState ( savedInstanceState ) ; <nl> } <nl> <nl>   } 
public final class ScriptIntrinsicLUT extends ScriptIntrinsic { public void test ( ) { { <nl> mCache [ ct + 512 ] = ( byte ) ct ; <nl> mCache [ ct + 768 ] = ( byte ) ct ; <nl> } <nl> - bindAllocation ( mTables , 0 ) ; <nl> + setVar ( 0 , mTables ) ; <nl> } <nl> <nl>   } 
public class ElasticSearchConnection implements Connection { <nl> <nl> public void close ( ) throws SQLException { <nl> - client . close ( ) ; <nl> } <nl> <nl>   } 
public class GetPatternsFromDataMultiClass implements Serializable { public void test ( ) { { { <nl> IOUtils . writeObjectToFile ( splitSents , newf ) ; <nl> Data . sentsFiles . add ( newf ) ; <nl> splitSents . clear ( ) ; <nl> + num = 0 ; <nl> } <nl> } <nl> } <nl>   } 
public class NoSpamLoggerTest <nl> <nl> { public void testLoggedResult ( ) throws Exception <nl> { <nl> + now = 5 ; <nl> + <nl> NoSpamLogger . log ( mock , Level . INFO , 5 , TimeUnit . NANOSECONDS , statement , param ) ; <nl> checkMock ( Level . INFO ) ; <nl>   } } 
public class SybaseDialect extends AbstractTransactSQLDialect { <nl> public int getInExpressionCountLimit ( ) { <nl> return PARAM_LIST_SIZE_LIMIT ; <nl> } <nl> + <nl> + <nl> + public boolean supportsNotNullUnique ( ) { <nl> + return false ; <nl> + } <nl> } <nl>   
public class FileColorsConfigurable implements Configurable , NonDefaultProjectCo <nl> <nl> { public String getHelpTopic ( ) { <nl> - return null ; <nl> + return " reference . settings . ide . settings . file - colors " ; <nl> } <nl> public JComponent createComponent ( ) { <nl>   } } 
public class Set < ModelClass extends Model > implements WhereBase < ModelClass > , Que <nl> <nl> { public void queryClose ( ) { { { <nl> + query ( ) ; <nl> } <nl> } <nl>   } } 
public class ASTWrapperPsiElement extends ElementBase implements PsiElement , Nav <nl> <nl> { public boolean canNavigate ( ) { <nl> - return true ; <nl> + return EditSourceUtil . canNavigate ( this ) ; <nl> } <nl> public boolean canNavigateToSource ( ) { <nl>   } } 
public class Term extends Activity implements UpdateCallback { <nl> private boolean mStopServiceOnFinish = false ; <nl> private Intent TSIntent ; <nl> - private Intent mLastNewIntent ; <nl> public static final int REQUEST_CHOOSE_WINDOW = 1 ; <nl> public static final String EXTRA_WINDOW_ID = " jackpal . androidterm . window_id " ; <nl>   } 
public class RegTestParams extends TestNet2Params { public void test ( ) { <nl> port = 18444 ; <nl> acceptableAddressCodes = new int [ ] { 0 } ; <nl> addressHeader = 0 ; <nl> + dumpedPrivateKeyHeader = 128 ; <nl> } <nl> <nl>   } 
class IonDrawable extends LayerDrawable { public void test ( ) { <nl> try { <nl> gifDecoder . nextFrame ( ) ; <nl> } <nl> + catch ( OutOfMemoryError e ) { <nl> + exception = new Exception ( e ) ; <nl> + } <nl> catch ( Exception e ) { <nl> exception = e ; <nl> } <nl>   } } 
public class Config <nl> { public volatile Long request_timeout_in_ms = new Long ( 10000 ) ; <nl> - public Long read_request_timeout_in_ms = new Long ( 10000 ) ; <nl> + public Long read_request_timeout_in_ms = new Long ( 5000 ) ; <nl> public Long range_request_timeout_in_ms = new Long ( 10000 ) ; <nl>   } 
public class CordovaWebView extends WebView { <nl> <nl> private Context mCtx ; <nl> - private CordovaWebViewClient viewClient ; <nl> + CordovaWebViewClient viewClient ; <nl> private CordovaChromeClient chromeClient ; <nl> <nl>   } 
public class Particle extends BaseObject3D { public void test ( ) { { { <nl> throw new RuntimeException ( " You need to set a particle material first . " ) ; <nl> } <nl> mParticleShader . setCamera ( camera ) ; <nl> + mParticleShader . setCameraPosition ( camera . getPosition ( ) ) ; <nl> mParticleShader . setPointSize ( mPointSize ) ; <nl> } <nl> } <nl>   } 
public abstract class Editor extends JFrame implements RunnerListener { public void test ( ) { { <nl> sketchMenu . add ( item ) ; <nl> menuList . add ( item ) ; <nl> } <nl> - <nl> } <nl> <nl>   } 
public class IndexAccessorImpl implements IndexAccessor { public void test ( ) { <nl> try { <nl> _indexSearcherManager . close ( ) ; <nl> + <nl> _indexWriter . close ( ) ; <nl> + <nl> _directory . close ( ) ; <nl> } <nl> catch ( Exception e ) { <nl>   } } } 
public class CalendarPickerView extends ListView { public void test ( ) { <nl> if ( wasSelected ) { <nl> dateListener . onDateSelected ( clickedDate ) ; <nl> - } else if ( ! wasSelected ) { <nl> + } else { <nl> dateListener . onDateUnselected ( clickedDate ) ; <nl> } <nl> } <nl>   } 
public class SocialConfigurationUtil { public void test ( ) { <nl> if ( participationValueElement != null ) { <nl> increment = GetterUtil . getInteger ( <nl> participationValueElement . getText ( ) ) ; <nl> - <nl> } <nl> activityCounterDefinition . setIncrement ( increment ) ; <nl>   } } 
package com . mongodb ; <nl> <nl> <nl> public class MongoInterruptedException extends MongoException { <nl> + private static final long serialVersionUID = - 4110417867718417860L ; <nl> + <nl> public MongoInterruptedException ( final InterruptedException e ) { <nl> super ( " A driver operation has been interrupted " , e ) ; <nl> } <nl>   } 
class Http2Parser { <nl> private void readUnknownFrame ( int streamId , FrameType frameType , int flags , int payloadSize ) <nl> throws IOException { <nl> output . swallow ( streamId , frameType , flags , payloadSize ) ; <nl> - swallow ( payloadSize ) ; <nl> } <nl>   } 
public abstract class BaseSubscriptionLocalizedContentTestCase <nl> <nl> <nl> - <nl> { public void tearDown ( ) throws Exception { { <nl> - super . tearDown ( ) ; <nl> - <nl> LocaleThreadLocal . setDefaultLocale ( defaultLocale ) ; <nl> } <nl>   } } 
import javax . annotation . Nullable ; <nl> <nl> public class UniqueIndexViolationException extends UserException { <nl> + private static final long serialVersionUID = - 8679405097266977101L ; <nl> + <nl> <nl> private final String index ; <nl> <nl>   } 
public class VersionCheckThread extends Periodical { <nl> <nl> public int getInitialDelaySeconds ( ) { <nl> - return 0 ; <nl> + return ( int ) MINUTES . toSeconds ( 5 ) ; <nl> } <nl> <nl>   } 
public class WebView extends AbsoluteLayout <nl> <nl> <nl> { public static synchronized PluginList getPluginList ( ) { { <nl> - return null ; <nl> + return new PluginList ( ) ; <nl> } <nl> <nl>   } } 
public class DummyProxySession implements Session { <nl> public void setValid ( boolean isValid ) { <nl> <nl> } <nl> + <nl> + <nl> + public void tellChangedSessionId ( String newId , String oldId , <nl> + boolean notifySessionListeners , boolean notifyContainerListeners ) { <nl> + <nl> + } <nl> } <nl>   
public class DevicePolicyManagerService extends IDevicePolicyManager . Stub { public void test ( ) { { { { { <nl> } <nl> } <nl> } <nl> - return null ; <nl> + <nl> + return intent ; <nl> } <nl> } <nl>   } 
public class AndroidSafeDeleteProcessorDelegate implements SafeDeleteProcessorDe <nl> <nl> { public UsageInfo [ ] preprocessUsages ( Project project , UsageInfo [ ] usages ) { { <nl> - return getBaseHandler ( ) . preprocessUsages ( project , usages ) ; <nl> + return usages ; <nl> } <nl> <nl>   } } 
public class PlaygroundTest extends TestBase { public void test ( ) { <nl> static class Foo { <nl> int doSomeThing ( ) { <nl> - System . out . println ( getStuff ( ) ) ; <nl> return 0 ; <nl> } <nl>   } } } 
public abstract class VirtualFile extends UserDataHolderBase implements Modifica <nl> <nl> <nl> { public String getCanonicalPath ( ) { { <nl> - return null ; <nl> + return getPath ( ) ; <nl> } <nl> <nl>   } } 
public class PSurfaceJOGL implements PSurface { public void test ( ) { <nl> KeyEvent tke = new KeyEvent ( nativeEvent , nativeEvent . getWhen ( ) , <nl> KeyEvent . TYPE , peModifiers , <nl> keyChar , <nl> - keyCode , <nl> + 0 , <nl> nativeEvent . isAutoRepeat ( ) ) ; <nl> sketch . postEvent ( tke ) ; <nl>   } } 
public class NotificationStackScrollLayout extends ViewGroup <nl> <nl> { public void onChildAnimationFinished ( ) { { <nl> - applyCurrentState ( ) ; <nl> + updateChildren ( ) ; <nl> mAnimationEvents . clear ( ) ; <nl> } <nl>   } } 
public class WsRemoteEndpoint implements RemoteEndpoint { public void test ( ) { { <nl> } <nl> sendMessage ( Constants . OPCODE_TEXT , textToByte , first , isLast ) ; <nl> if ( ! isLast ) { <nl> - isText = Boolean . FALSE ; <nl> + isText = Boolean . TRUE ; <nl> } <nl> } <nl>   } 
public class CacheOffHeap { public void test ( ) { { <nl> } <nl> - <nl> + <nl> cache . close ( ) ; <nl> } <nl>   } 
public class KeyguardUpdateMonitor { <nl> private int mFailedAttempts = 0 ; <nl> private int mFailedBiometricUnlockAttempts = 0 ; <nl> - private static final int FAILED_BIOMETRIC_UNLOCK_ATTEMPTS_BEFORE_BACKUP = 15 ; <nl> + private static final int FAILED_BIOMETRIC_UNLOCK_ATTEMPTS_BEFORE_BACKUP = 5 ; <nl> private boolean mClockVisible ; <nl>   } 
final class TaglibRule extends Rule { <nl> final class TaglibUriRule extends Rule { <nl> - <nl> + <nl> private boolean duplicateUri ; <nl> public TaglibUriRule ( ) { <nl>   } } } 
public final class RxJavaHooks { <nl> <nl> <nl> <nl> <nl> <nl> public static void lockdown ( ) { <nl> lockdown = true ; <nl>   } } 
public class Tmp { public AFn ( IPersistentMap meta ) { <nl> } public AFn ( ) { <nl> } <nl> + public Obj withMeta ( IPersistentMap meta ) { <nl> + throw new UnsupportedOperationException ( ) ; <nl> + } <nl> public Object call ( ) throws Exception { <nl> return invoke ( ) ; <nl>   } } 
public class IOUtils { public void test ( ) { <nl> for ( int i = 0 ; i < rtn . length ; + + i ) { <nl> rtn [ i ] = linesReversed . get ( rtn . length - i - 1 ) ; <nl> } <nl> + raf . close ( ) ; <nl> return rtn ; <nl> } <nl>   } 
public abstract class AbstractProcessor < S > implements ActionHook , Processor < S > { <nl> <nl> + <nl> public String getClientCertProvider ( ) { <nl> return clientCertProvider ; <nl> } <nl>   } 
import org . languagetool . Experimental ; <nl> <nl> <nl> <nl> - <nl> public class PatternTokenBuilder { <nl> private PatternToken token ; <nl>   } 
public class CommitLogStressTest <nl> <nl> { public void testRandomSize ( ) throws Exception <nl> { { <nl> - randomSize = false ; <nl> + randomSize = true ; <nl> discardedRun = false ; <nl> testAllLogConfigs ( ) ; <nl> } <nl>   } } 
class ZoomManager { <nl> private int mInitialScrollY ; <nl> private long mZoomStart ; <nl> - private static final int ZOOM_ANIMATION_LENGTH = 500 ; <nl> + private static final int ZOOM_ANIMATION_LENGTH = 175 ; <nl> <nl> private boolean mSupportMultiTouch ; <nl>   } 
import java . util . * ; <nl> import javax . swing . * ; <nl> - import com . sun . jna . Library ; <nl> - import com . sun . jna . Native ; <nl> - <nl> import processing . app . debug . Compiler ; <nl> import processing . core . * ; <nl>   
public class GPUImage { <nl> <nl> protected void onPostExecute ( Bitmap bitmap ) { <nl> super . onPostExecute ( bitmap ) ; <nl> + mGPUImage . deleteImage ( ) ; <nl> mGPUImage . setImage ( bitmap ) ; <nl> } <nl>   } 
public class NetworkManager { public void test ( ) { <nl> String type = " " ; <nl> if ( info != null ) <nl> { <nl> - info . getTypeName ( ) ; <nl> + type = info . getTypeName ( ) ; <nl> return type . equals ( " WIFI " ) ; <nl> } <nl> return false ; <nl>   } } 
public final class HikariPool implements HikariPoolMBean <nl> { public void test ( ) { <nl> if ( ! connectionProxy . isBrokenConnection ( ) ) <nl> { <nl> - logPoolState ( " Release connection " ) ; <nl> connectionProxy . markLastAccess ( ) ; <nl> idleConnectionCount . incrementAndGet ( ) ; <nl>   } } } 
<nl> package org . opensolaris . opengrok . analysis ; <nl> - import java . io . BufferedReader ; <nl> - import java . io . FileReader ; <nl> import java . io . FilterReader ; <nl> import java . io . Reader ; <nl> import java . util . HashMap ; <nl>   
public class ExecutionDelayTest extends HazelcastTestSupport { <nl> public static class Task implements Callable , Serializable { <nl> - private String uuid ; <nl> - <nl> } public Task ( ) { <nl> } <nl>   } 
public class CustomerDaoImplTest { <nl> <nl> public void getNonExistinCustomerById ( ) { <nl> - final int nonExistingId = 999 ; <nl> + final int nonExistingId = getNonExistingCustomerId ( ) ; <nl> assertNull ( impl . getCustomerById ( nonExistingId ) ) ; <nl> } <nl>   } 
public class TachyonMaster { <nl> <nl> <nl> <nl> <nl> <nl> public void stop ( ) throws Exception { <nl> if ( mIsServing ) { <nl>   } } } 
public class EthernetDataTracker implements NetworkStateTracker { <nl> <nl> <nl> public String getTcpBufferSizesPropName ( ) { <nl> - return " net . tcp . buffersize . wifi " ; <nl> + return " net . tcp . buffersize . ethernet " ; <nl> } <nl> public void setDependencyMet ( boolean met ) { <nl>   } } 
abstract class AbstractTFS extends FileSystem { <nl> public TachyonFS getTachyonFS ( ) { <nl> return mTFS ; <nl> } <nl> + <nl> public URI getUri ( ) { <nl> return mUri ; <nl> } <nl>   } 
package com . facebook ; <nl> final class FacebookSdkVersion { <nl> - public static final String BUILD = " 3 . 0 " ; <nl> + public static final String BUILD = " 3 . 0 . 0 " ; <nl> public static final String MIGRATION_BUNDLE = " fbsdk : 20121026 " ; <nl> } <nl>   
public class SimpleWebViewFragment extends Fragment implements OnClickListener { <nl> <nl> public void onDetach ( ) { { <nl> super . onDetach ( ) ; <nl> + mView . removeView ( mWebview ) ; <nl> + mWebview . removeAllViews ( ) ; <nl> mWebview . destroy ( ) ; <nl> } <nl> } <nl>   } 
public class DisUnity { <nl> <nl> public static String getVersion ( ) { <nl> - return " 0 . 3 . 1 " ; <nl> + return " 0 . 3 . 2 " ; <nl> } <nl> public static String getSignature ( ) { <nl>   } } 
public class TextIconGenerator { public void test ( ) { <nl> switch ( style ) { <nl> case STYLE_DEFAULT : <nl> case STYLE_WHITE : <nl> - return R . drawable . bubble_white ; <nl> + return R . style . Bubble_TextAppearance_Dark ; <nl> case STYLE_RED : <nl> case STYLE_BLUE : <nl> case STYLE_GREEN : <nl>   } } } 
import java . util . List ; <nl> <nl> <nl> <nl> <nl> public class TelecomManager { public void test ( ) { <nl>   } } 
final class AdvancedLeakAwareByteBuf extends WrappedByteBuf { <nl> <nl> public int forEachByteDesc ( ByteProcessor processor ) { <nl> - recordLeakNonRefCountingOperation ( ) ; <nl> recordLeakNonRefCountingOperation ( ) ; <nl> return super . forEachByteDesc ( processor ) ; <nl> } <nl>   } 
import edu . stanford . nlp . util . StringUtils ; <nl> public class RNNOptions implements Serializable { public void test ( ) { <nl> + <nl> <nl> <nl> <nl>   } } 
import java . io . OutputStream ; <nl> <nl> public class StringOutputStream extends OutputStream { <nl> - StringBuilder mBuf ; <nl> + StringBuilder mBuf = new StringBuilder ( ) ; <nl> <nl> public void write ( int data ) throws IOException { <nl>   } } 
public class MenuDrawer extends ViewGroup { <nl> <nl> <nl> <nl> - private static final int MAX_DRAG_BEZEL_DP = 16 ; <nl> + private static final int MAX_DRAG_BEZEL_DP = 24 ; <nl> <nl> <nl>   } 
public class DeepLearning extends Job . ValidatedJob { public void test ( ) { <nl> score_validation_samples = cp . score_validation_samples ; <nl> shuffle_training_data = cp . shuffle_training_data ; <nl> force_load_balance = cp . force_load_balance ; <nl> + classification = cp . classification ; <nl> state = JobState . RUNNING ; <nl> return ; <nl> } <nl>   } 
public abstract class DBCollection { <nl> <nl> <nl> protected List < DBObject > getHintFields ( ) { <nl> - return Collections . unmodifiableList ( _hintFields ) ; <nl> + return _hintFields ; <nl> } <nl> <nl>   } 
public class BasketTree extends NetworkTree implements ZLAndroidTree { <nl> public NetworkLibraryItem getHoldedItem ( ) { <nl> return null ; <nl> } <nl> + <nl> + <nl> + public String getUniqueKey ( ) { <nl> + return null ; <nl> + } <nl> } <nl>   
public class ConstructorCallExpression extends Expression { <nl> public boolean isUsingAnonymousInnerClass ( ) { <nl> return usesAnonymousInnerClass ; <nl> } <nl> - <nl> - <nl> - public boolean isUsingAnnonymousInnerClass ( ) { <nl> - return isUsingAnonymousInnerClass ( ) ; <nl> - } <nl> } <nl>   
public class HystrixTimerTest { <nl> public void setUp ( ) { <nl> HystrixTimer timer = HystrixTimer . getInstance ( ) ; <nl> HystrixTimer . reset ( ) ; <nl> + HystrixPlugins . reset ( ) ; <nl> } <nl> <nl>   } 
public final class FloatingToolbar { public void test ( ) { <nl> super ( Preconditions . checkNotNull ( popup ) . mContext ) ; <nl> this . mPopup = popup ; <nl> setScrollBarDefaultDelayBeforeFade ( ViewConfiguration . getScrollDefaultDelay ( ) * 3 ) ; <nl> + setScrollIndicators ( View . SCROLL_INDICATOR_TOP | View . SCROLL_INDICATOR_BOTTOM ) ; <nl> } <nl> <nl>   } 
public final class ContactsContract { public void test ( ) { { <nl> intent . putExtra ( EXTRA_TARGET_RECT , target ) ; <nl> intent . putExtra ( EXTRA_MODE , mode ) ; <nl> intent . putExtra ( EXTRA_EXCLUDE_MIMES , excludeMimes ) ; <nl> + intent . setFlags ( Intent . FLAG_ACTIVITY_CLEAR_WHEN_TASK_RESET ) ; <nl> context . startActivity ( intent ) ; <nl> } <nl> } <nl>   } 
import gherkin . formatter . Formatter ; <nl> import gherkin . formatter . Reporter ; <nl> import gherkin . formatter . model . Result ; <nl> - <nl> <nl> <nl> public class JUnitReporterTest <nl> { <nl>   } 
public class ErrorReporter implements Thread . UncaughtExceptionHandler { public void test ( ) { <nl> <nl> reportBuilder ( ) <nl> - . message ( " Uncaught exception " ) <nl> . exception ( e ) <nl> . endsApplication ( ) <nl> . send ( ) ; <nl>   } } 
import java . util . Iterator ; <nl> import java . util . Map ; <nl> import java . io . Serializable ; <nl> - final public class PersistentStructMap extends APersistentMap { <nl> + public class PersistentStructMap extends APersistentMap { <nl> } public static class Def implements Serializable { <nl> final ISeq keys ; <nl>   } } 
public class ViewConfiguration { <nl> <nl> <nl> <nl> <nl> <nl> <nl> <nl> public static long getGlobalActionKeyTimeout ( ) { <nl>   } } 
public class FileOperationsHelper { <nl> <nl> public void toggleKeepInSync ( OCFile file , boolean isFavorite ) { <nl> - Log_OC . e ( TAG , " KeepInSync " ) ; <nl> file . setKeepInSync ( isFavorite ) ; <nl> mFileActivity . getStorageManager ( ) . saveFile ( file ) ; <nl>   } } 
public class RouteProvider { public void test ( ) { { { { { <nl> } <nl> } <nl> pt . desc = pt . name ; <nl> - <nl> } <nl> + gpx . points . add ( pt ) ; <nl> } <nl> return gpx ; <nl> } <nl>   } 
public class DrawHandler extends Handler { <nl> <nl> public void quit ( ) { <nl> - removeCallbacksAndMessages ( null ) ; <nl> + removeMessages ( QUIT ) ; <nl> sendEmptyMessage ( QUIT ) ; <nl> } <nl>   } 
final class BasicOperationService implements InternalOperationService { <nl> <nl> public int getRemoteOperationsCount ( ) { <nl> - <nl> - return 0 ; <nl> + return invocations . size ( ) ; <nl> } <nl> <nl>   } 
public class VoiceInteractionService extends Service { public void test ( ) { <nl> if ( curComp == null ) { <nl> return false ; <nl> } <nl> - return curComp . equals ( cur ) ; <nl> + return curComp . equals ( service ) ; <nl> } <nl> <nl>   } 
public abstract class JspManager { <nl> <nl> public abstract XmlNSDescriptor getActionsLibrary ( final PsiFile context ) ; <nl> + <nl> + public abstract boolean isJsp_2_1_OrBetter ( final PsiFile context ) ; <nl> } <nl>   
public abstract class AbstractService implements VoldemortService { <nl> private static final Logger logger = Logger . getLogger ( VoldemortService . class ) ; <nl> - private AtomicBoolean isStarted ; <nl> + private final AtomicBoolean isStarted ; <nl> private final String name ; <nl> public AbstractService ( String name ) { <nl>   } } 
public class Bootstrap extends AbstractBootstrap < Bootstrap , Channel > { <nl> private Bootstrap ( Bootstrap bootstrap ) { <nl> super ( bootstrap ) ; <nl> + resolver = bootstrap . resolver ; <nl> remoteAddress = bootstrap . remoteAddress ; <nl> } <nl>   } 
public class Frequency extends Entity { public void test ( ) { <nl> writeTimeField ( f . end_time ) ; <nl> writeIntField ( f . headway_secs ) ; <nl> writeIntField ( f . exact_times ) ; <nl> + endRecord ( ) ; <nl> } <nl> <nl>   } 
public class WifiScanner { public void test ( ) { <nl> validateChannel ( ) ; <nl> HotlistSettings settings = new HotlistSettings ( ) ; <nl> settings . bssidInfos = bssidInfos ; <nl> + settings . apLostThreshold = apLostThreshold ; <nl> sAsyncChannel . sendMessage ( CMD_SET_HOTLIST , 0 , putListener ( listener ) , settings ) ; <nl> } <nl>   } 
public class Tmp { public enum ChatColor { <nl> <nl> <nl> <nl> - BLACK ( ' 0 ' , 0x01 ) , <nl> + BLACK ( ' 0 ' , 0x00 ) , <nl> <nl> <nl> <nl>   } } 
public final class Response { public void test ( ) { <nl> synchronized ( fireListenerLock ) { <nl> if ( fireListener ) { <nl> <nl> - return true ; <nl> + return false ; <nl> } <nl> action ( ActionCode . NB_WRITE_INTEREST , isReady ) ; <nl> fireListener = ! isReady . get ( ) ; <nl>   } } } 
public class WsHttpUpgradeHandler implements HttpUpgradeHandler { <nl> private String subProtocol ; <nl> private Map < String , String > pathParameters ; <nl> private boolean secure ; <nl> - WebConnection connection ; <nl> + private WebConnection connection ; <nl> private WsSession wsSession ; <nl>   } 
public class WebView extends AbsoluteLayout <nl> <nl> <nl> <nl> <nl> <nl> <nl> { public int getVisibleTitleHeight ( ) { <nl> <nl>   } } 
public class UpgradeServletOutputStream extends ServletOutputStream { public void test ( ) { { <nl> return ; <nl> } <nl> closed = true ; <nl> - flushInternal ( true , true ) ; <nl> + flushInternal ( false , false ) ; <nl> } <nl>   } 
public abstract class MenuDrawer extends ViewGroup { public void test ( ) { <nl> switch ( action ) { <nl> case MotionEvent . ACTION_DOWN : { <nl> mLastMotionX = mInitialMotionX = ev . getX ( ) ; <nl> + mLastMotionY = ev . getY ( ) ; <nl> final boolean allowDrag = onDownAllowDrag ( ev ) ; <nl> if ( allowDrag ) { <nl>   } } } } } 
public class AccessibilityNodeInfo implements Parcelable { <nl> <nl> <nl> public boolean refresh ( ) { <nl> - return refresh ( false ) ; <nl> + return refresh ( true ) ; <nl> } <nl> <nl>   } 
public class AstridActivity extends FragmentActivity <nl> <nl> { public void onBackPressed ( ) { { <nl> + if ( isFinishing ( ) ) <nl> + return ; <nl> super . onBackPressed ( ) ; <nl> } <nl>   } } 
public abstract class TextToSpeechService extends Service { <nl> private boolean mFirstIdle = true ; <nl> public SynthThread ( ) { <nl> - super ( SYNTH_THREAD_NAME , android . os . Process . THREAD_PRIORITY_AUDIO ) ; <nl> + super ( SYNTH_THREAD_NAME , android . os . Process . THREAD_PRIORITY_DEFAULT ) ; <nl> } <nl> <nl>   } 
public class Tmp { public interface FreeFlowEventListener { <nl> } public void layoutComplete ( ) ; <nl> public void layoutComputed ( ) ; <nl> - <nl> + <nl> + <nl> <nl> <nl> public void dataChanged ( ) ; <nl> <nl>   } 
public class HorizontalChangeHandler extends AnimatorChangeHandler { <nl> <nl> protected void resetFromView ( View from ) { <nl> - from . setTranslationY ( 0 ) ; <nl> + from . setTranslationX ( 0 ) ; <nl> } <nl> } <nl>   
public final class AudioAttributes implements Parcelable { public void test ( ) { { <nl> <nl> Log . e ( TAG , " Invalid stream type " + streamType + " for AudioAttributes " ) ; <nl> } <nl> + mUsage = usageForLegacyStreamType ( streamType ) ; <nl> return this ; <nl> } <nl>   } 
public class TextureView extends View { <nl> <nl> public void setLayerType ( int layerType , Paint paint ) { <nl> if ( paint != mLayerPaint ) { <nl> - mLayerPaint = paint ; <nl> + mLayerPaint = paint == null ? new Paint ( ) : paint ; <nl> invalidate ( ) ; <nl> } <nl> } <nl>   } 
public class MessagingListener { <nl> public void folderStatusChanged ( Account account , String folderName , int unreadMessageCount ) { } <nl> - public void folderStatusChanged ( Account account , String folderName ) { } <nl> - <nl> public void systemStatusChanged ( ) { } <nl>   } 
import java . util . List ; <nl> public class ChooseIdentity extends K9ListActivity { <nl> Account mAccount ; <nl> - String mUID ; <nl> ArrayAdapter < String > adapter ; <nl> public static final String EXTRA_ACCOUNT = " com . fsck . k9 . ChooseIdentity_account " ; <nl>   } 
public class AudioHandler extends Plugin { public void test ( ) { { <nl> return false ; <nl> } <nl> AudioPlayer audio = this . players . get ( id ) ; <nl> + this . players . remove ( id ) ; <nl> audio . destroy ( ) ; <nl> return true ; <nl> } <nl>   } 
public class GitLogUI implements Disposable { public void test ( ) { { { { <nl> } <nl> myBranchSelectorAction . setSymbolicRefs ( myRecalculatedCommon ) ; <nl> + myBranchSelectorAction . asTextAction ( ) ; <nl> } <nl> } ; <nl> } <nl>   } 
public class TestWebSocket extends TomcatBaseTest { <nl> private static final long serialVersionUID = 1L ; <nl> <nl> - protected StreamHandler createWebSocketInbound ( String subProtocol , <nl> + protected StreamHandler createWebSocketHandler ( String subProtocol , <nl> HttpServletRequest request ) { <nl> return new Bug53339WsInbound ( ) ; <nl> } <nl>   } 
public class AtmosphereFramework { public void test ( ) { <nl> interceptors . clear ( ) ; <nl> broadcasterFactory = null ; <nl> + arFactory = null ; <nl> annotationFound = false ; <nl> return this ; <nl> } <nl>   } 
public class IWindowManagerImpl implements IWindowManager { <nl> <nl> public void requestAppKeyboardShortcuts ( IResultReceiver receiver ) throws RemoteException { <nl> } <nl> + <nl> + <nl> + public void getStableInsets ( Rect outInsets ) throws RemoteException { <nl> + } <nl> } <nl>   
import org . mockito . internal . junit . JUnitRule ; <nl> <nl> <nl> <nl> + <nl> public class MockitoJUnitRule implements MethodRule , MockitoRule { <nl> <nl> private final JUnitRule jUnitRule ; <nl>   } 
public class PreviewParseWriter extends Iced implements ParseWriter { public void test ( ) { { { <nl> } <nl> <nl> - types [ i ] = Vec . T_BAD ; <nl> + types [ i ] = Vec . T_NUM ; <nl> } <nl> return types ; <nl> } <nl>   } 
public class ChatEventStream extends EventStream { <nl> <nl> public String getApplication ( ) { <nl> - return " fitcDemo " ; <nl> + return " chatServer " ; <nl> } <nl> public void connectionOpened ( RTMPConnection conn , RTMP state ) { <nl>   } } 
public class EthernetDataTracker implements NetworkStateTracker { <nl> public String getTcpBufferSizesPropName ( ) { <nl> return " net . tcp . buffersize . wifi " ; <nl> } <nl> + <nl> + public void setDependencyMet ( boolean met ) { <nl> + <nl> + } <nl> } <nl>   
public class AbstractAggregationTest <nl> { public static void startup ( ) { { <nl> HAZELCAST_INSTANCE = Hazelcast . newHazelcastInstance ( ) ; <nl> Hazelcast . newHazelcastInstance ( ) ; <nl> - Hazelcast . newHazelcastInstance ( ) ; <nl> } <nl> <nl>   } } 
public class SomeRunnableTask implements Runnable , Serializable , ApplicationCont <nl> { public void setApplicationContext ( final ApplicationContext applicationContext ) throws BeansException { { { <nl> context = applicationContext ; <nl> } <nl> + <nl> } <nl>   } } 
public abstract class CreateStreamRequest { <nl> public abstract String contentPack ( ) ; <nl> <nl> - <nl> public abstract Stream . MatchingType matchingType ( ) ; <nl> <nl>   } 
public class SlidingUpPanelLayout extends ViewGroup { <nl> <nl> <nl> <nl> <nl> <nl> <nl> protected void onFinishInflate ( ) { <nl>   } } 
public class HighlightBuilder implements ToXContent { <nl> int numOfFragments = - 1 ; <nl> Boolean requireFieldMatch ; <nl> - private Field ( String name ) { <nl> + public Field ( String name ) { <nl> this . name = name ; <nl> } <nl>   } } 
public class Tmp { public static void main ( String [ ] args ) throws Exception { { { { <nl> { <nl> e . printStackTrace ( err ) ; <nl> } <nl> + Agent . shutdown ( ) ; <nl> } <nl> } <nl> } <nl>   } } 
import java . util . regex . Pattern ; <nl> <nl> <nl> <nl> <nl> <nl> public class DefaultGroovyMethods extends DefaultGroovyMethodsSupport { public void test ( ) { <nl>   } } 
public class GroupServiceTest { public void test ( ) { <nl> testGroup ( <nl> user , group , null , null , true , false , false , false , true , true , <nl> true ) ; <nl> - <nl> - <nl> - <nl> } <nl> <nl>   } 
public class Tmp { public enum Material { <nl> SUGAR ( 353 ) , <nl> CAKE ( 354 , 1 ) , <nl> BED ( 355 ) , <nl> - DIODE ( 100 ) , <nl> + DIODE ( 356 ) , <nl> GOLD_RECORD ( 2256 , 1 ) , <nl> GREEN_RECORD ( 2257 , 1 ) ; <nl>   } } 
public abstract class Transition implements Cloneable { <nl> <nl> public Transition removeTarget ( int targetId ) { <nl> if ( targetId > 0 ) { <nl> - mTargetIds . remove ( targetId ) ; <nl> + mTargetIds . remove ( ( Integer ) targetId ) ; <nl> } <nl> return this ; <nl> } <nl>   } 
public class NoSpamLoggerTest <nl> <nl> { public void testLoggedResult ( ) throws Exception <nl> { <nl> + now = 5 ; <nl> + <nl> NoSpamLogger . log ( mock , Level . INFO , 5 , TimeUnit . NANOSECONDS , statement , param ) ; <nl> checkMock ( Level . INFO ) ; <nl>   } } 
public class ByteBufferSend implements Send { <nl> <nl> public boolean complete ( ) { <nl> - return remaining > 0 ; <nl> + return remaining <= 0 ; <nl> } <nl> <nl>   } 
public abstract class DurationType implements Serializable { <nl> private static final class MillisType extends DurationType { <nl> static final long serialVersionUID = - 4314867016852780422L ; <nl> + public MillisType ( ) { <nl> + } <nl> + <nl> public boolean isPrecise ( ) { <nl> return true ; <nl> } <nl>   } } 
public class BuildAndDecodeTest { <nl> <nl> public static void afterClass ( ) throws BrutException { <nl> - <nl> + OS . rmdir ( sTmpDir ) ; <nl> } <nl> <nl>   } 
public class Matrix2f { <nl> <nl> <nl> public Matrix2f ( float [ ] dataArray ) { <nl> - mMat = new float [ 2 ] ; <nl> + mMat = new float [ 4 ] ; <nl> System . arraycopy ( dataArray , 0 , mMat , 0 , mMat . length ) ; <nl> } <nl>   } 
public abstract class DebuggerTestCase extends ExecutionWithDebuggerToolsTestCas <nl> <nl> <nl> { public ConfigurationType getType ( ) { { <nl> - return null ; <nl> + return UnknownConfigurationType . INSTANCE ; <nl> } <nl> <nl>   } } 
public class CallSessionImpl <nl> { public void test ( ) { <nl> Player player = ( Player ) playersIter . next ( ) ; <nl> player . stop ( ) ; <nl> + player . deallocate ( ) ; <nl> + player . close ( ) ; <nl> playersIter . remove ( ) ; <nl> } <nl>   } 
import org . junit . Assert ; <nl> import org . junit . Before ; <nl> import org . junit . Test ; <nl> - import tachyon . master . IndexedSet ; <nl> - <nl> public class IndexedSetTest { <nl> private static class Pair { <nl> private int mInt ; <nl>   } } 
public class RajawaliRenderer implements GLSurfaceView . Renderer , INode { <nl> public void setCamera ( Camera mCamera ) { <nl> this . mCamera = mCamera ; <nl> + mCamera . setProjectionMatrix ( mViewportWidth , mViewportHeight ) ; <nl> } <nl> public Camera getCamera ( ) { <nl>   } } 
public class Tmp { public interface CordovaWebView { <nl> void setNetworkAvailable ( boolean online ) ; <nl> + String getUrl ( ) ; <nl> + <nl> <nl> Context getContext ( ) ; <nl> void loadUrl ( String url ) ; <nl>   } } 
public class DBMaker { <nl> <nl> <nl> <nl> - public DBMaker asyncThreadDeamonEnable ( ) { <nl> + } public DBMaker asyncThreadSetDeamon ( ) { <nl> this . _asyncThreadDeamon = true ; <nl> return this ; <nl> } <nl>   } 
public class EditGroupAction extends PortletAction { public void test ( ) { <nl> String friendlyURL = null ; <nl> boolean active = false ; <nl> boolean manualMembership = true ; <nl> - <nl> int membershipRestriction = <nl> GroupConstants . DEFAULT_MEMBERSHIP_RESTRICTION ; <nl>   } } 
public class MasterClient extends CommunicationProtocol implements Master , Chann <nl> { public void test ( ) { { <nl> msgLog . logMessage ( " MasterClient shutdown " , true ) ; <nl> channelPool . close ( true ) ; <nl> + executor . shutdownNow ( ) ; <nl> } <nl> } <nl>   } 
public final class Futures { public void test ( ) { { { { <nl> } <nl> } <nl> } <nl> + <nl> } <nl> <nl>   } 
package com . mongodb ; <nl> import com . mongodb . util . TestCase ; <nl> - import org . testng . Assert ; <nl> import org . testng . annotations . Test ; <nl> import java . net . UnknownHostException ; <nl>   
public class Tmp { public interface PConstants { <nl> static final int ENABLE_STROKE_PURE = 9 ; <nl> static final int DISABLE_STROKE_PURE = - 9 ; <nl> - static final int ENABLE_RETINA_PIXELS = 10 ; <nl> - static final int DISABLE_RETINA_PIXELS = - 10 ; <nl> - <nl> static final int HINT_COUNT = 11 ; <nl> <nl>   } } 
public class ExtractEditLayout extends LinearLayout { public void test ( ) { <nl> mCallback . onDestroyActionMode ( this ) ; <nl> mCallback = null ; <nl> + mMenu . close ( ) ; <nl> + <nl> mExtractActionButton . setVisibility ( VISIBLE ) ; <nl> mEditButton . setVisibility ( INVISIBLE ) ; <nl>   } } 
public final class Util { <nl> <nl> <nl> <nl> + <nl> public static int getSize ( Bitmap bitmap ) { <nl> return getBitmapByteSize ( bitmap ) ; <nl> } <nl>   } 
public class ShutdownTest <nl> <nl> { public void testShutdown4 ( ) throws SQLException <nl> { <nl> - int threadCountStart = threadCount ( ) ; <nl> - <nl> StubConnection . slowCreate = true ; <nl> HikariConfig config = new HikariConfig ( ) ; <nl>   } } 
public abstract class BaseButtonBehavior { <nl> private boolean myPressedByMouse ; <nl> private boolean mySelected ; <nl> - private TimedDeadzone myMouseDeadzone ; <nl> + private final TimedDeadzone myMouseDeadzone ; <nl> private int myActionTrigger ; <nl>   } 
public class Instruction3rmi extends Instruction implements RegisterRangeInstruc <nl> <nl> { public Format getFormat ( ) { <nl> - return Format . Format3rms ; <nl> + return Format . Format3rmi ; <nl> } <nl> public int getRegCount ( ) { <nl>   } } 
public final class CookieManager { <nl> public void setCookie ( String url , String value ) { <nl> if ( JniUtil . useChromiumHttpStack ( ) ) { <nl> setCookie ( url , value , false ) ; <nl> + return ; <nl> } <nl> WebAddress uri ; <nl>   } } 
public class ConversationFragment extends Fragment { <nl> <nl> public void onBackendConnected ( ) { <nl> + this . activity = ( ConversationActivity ) getActivity ( ) ; <nl> this . conversation = activity . getSelectedConversation ( ) ; <nl> if ( this . conversation == null ) { <nl> return ; <nl>   } } } 
public final class ReplayOutputChannelContext extends AbstractOutputChannelConte <nl> <nl> { public boolean isInputChannel ( ) { { <nl> - return true ; <nl> + return false ; <nl> } <nl> <nl>   } } 
public abstract class AbstractType <nl> <nl> { public final int hashCode ( ) <nl> { { { <nl> - return getClass ( ) . hashCode ( ) ; <nl> + return signature . hashCode ( ) ; <nl> } <nl> } <nl>   } } 
public class NonBooleanMethodNameMayNotStartWithQuestionInspection <nl> <nl> { public void readSettings ( Element element ) throws InvalidDataException { { <nl> - System . out . println ( " read settings " ) ; <nl> super . readSettings ( element ) ; <nl> parseQuestionString ( ) ; <nl> } <nl>   } } 
public class Sprite extends TextureRegion { <nl> <nl> <nl> public Sprite ( ) { <nl> + setColor ( 1 , 1 , 1 , 1 ) ; <nl> } <nl> <nl>   } 
public class ParticleSystem extends Entity { <nl> public void reset ( ) { <nl> super . reset ( ) ; <nl> + this . mParticlesDueToSpawn = 0 ; <nl> this . mParticlesAlive = 0 ; <nl> } <nl>   } 
package com . lmax . disruptor ; <nl> + <nl> <nl> <nl> public class EventPoller < T > <nl> { <nl> private final DataProvider < T > dataProvider ; <nl>   } 
public class FastArray implements Cloneable { <nl> <nl> public String toString ( ) { { <nl> + if ( size ( ) == 0 ) return " [ ] " ; <nl> return toList ( ) . toString ( ) ; <nl> } <nl> } <nl>   } 
public class ProjectSourceControlPreferencesPane extends ProjectPreferencesPane <nl> <nl> { public String getName ( ) <nl> { { <nl> - return " Source Control " ; <nl> + return " Version Control " ; <nl> } <nl> <nl>   } } 
public class AstridNewSyncMigrationTest extends NewSyncTestCase { <nl> public void testAstridSyncMigration ( ) { <nl> setupOldDatabase ( ) ; <nl> - Preferences . clear ( AstridNewSyncMigrator . PREF_SYNC_MIGRATION ) ; <nl> new AstridNewSyncMigrator ( ) . performMigration ( ) ; <nl> assertAllModelsHaveUUID ( ) ; <nl> assertAllTagsHaveTagData ( ) ; <nl>   } } 
public class TvView extends ViewGroup { public void test ( ) { <nl> if ( this != mSessionCallback ) { <nl> return ; <nl> } <nl> + mOverlayViewCreated = false ; <nl> + mOverlayViewFrame = null ; <nl> mSessionCallback = null ; <nl> mSession = null ; <nl> if ( mListener != null ) { <nl>   } } } 
public class GCalControlSet extends PopupControlSet { public void test ( ) { <nl> DependencyInjectionService . getInstance ( ) . inject ( this ) ; <nl> this . title = title ; <nl> calendars = Calendars . getCalendars ( ) ; <nl> + getView ( ) ; <nl> } <nl> <nl>   } 
public class PortletKeys { <nl> public static final String ITEM_SELECTOR = <nl> " com_liferay_item_selector_web_portlet_ItemSelectorPortlet " ; <nl> - public static final String JOURNAL = <nl> - " com_liferay_journal_web_portlet_JournalPortlet " ; <nl> - <nl> public static final String LAYOUTS_ADMIN = <nl> " com_liferay_layout_admin_web_portlet_LayoutAdminPortlet " ; <nl>   } 
public class HighLevelFilter extends Filter { public void test ( ) { { <nl> if ( loggingEvent . getMarker ( ) == Logging . LIFECYCLE ) { <nl> return FilterReply . ACCEPT ; <nl> } else { <nl> - return FilterReply . DENY ; <nl> + return FilterReply . NEUTRAL ; <nl> } <nl> } <nl> } <nl>   } 
public class AsyncStateMachine { <nl> <nl> - public void recycle ( ) { <nl> + } public synchronized void recycle ( ) { <nl> asyncCtxt = null ; <nl> state = AsyncState . DISPATCHED ; <nl> } <nl>   } 
abstract class Platform { public void test ( ) { <nl> try { <nl> Class . forName ( " rx . Observable " ) ; <nl> return true ; <nl> - } catch ( ClassNotFoundException e ) { <nl> + } catch ( ClassNotFoundException ignored ) { <nl> } <nl> return false ; <nl> } <nl>   } 
public class YUICompressor { public void test ( ) { <nl> if ( inputFilename . equals ( " - " ) ) { <nl> in = new InputStreamReader ( System . in , charset ) ; <nl> + type = typeOverride ; <nl> } else { <nl>   } } } 
public class Files { public void test ( ) { <nl> <nl> class Native { <nl> static { <nl> - System . loadLibrary ( " retrofit " ) ; <nl> + System . loadLibrary ( " retrofit - android - native " ) ; <nl> } <nl> static native void sync ( String path ) ; <nl>   } } } 
public class MessageListFragment extends SherlockFragment implements OnItemClick <nl> <nl> { public void onLoaderReset ( Loader < Cursor > loader ) { { <nl> - mSelected = null ; <nl> + mSelected . clear ( ) ; <nl> mAdapter . swapCursor ( null ) ; <nl> } <nl>   } } 
public class PApplet extends Applet <nl> <nl> <nl> { public boolean saveJSONArray ( JSONArray json , String filename ) { { <nl> - return saveJSONArray ( json , filename ) ; <nl> + return saveJSONArray ( json , filename , null ) ; <nl> } <nl>   } } 
public final class CdmaCallTracker extends CallTracker { public void test ( ) { <nl> if ( ar . exception == null ) { <nl> <nl> pendingMO . onConnectedInOrOut ( ) ; <nl> + pendingMO = null ; <nl> } <nl> break ; <nl>   } } 
public class WordPress extends Application { public void test ( ) { <nl> editor . remove ( WordPress . ACCESS_TOKEN_PREFERENCE ) ; <nl> editor . commit ( ) ; <nl> if ( wpDB != null ) { <nl> - wpDB . deleteAllAccounts ( ) ; <nl> wpDB . updateLastBlogId ( - 1 ) ; <nl> wpDB . deleteDatabase ( this ) ; <nl> } <nl>   } } 
public final class Phases { public void test ( ) { <nl> this . persistenceManager = persistenceManager ; <nl> this . sensorContext = sensorContext ; <nl> this . index = index ; <nl> + this . eventBus = eventBus ; <nl> } <nl> <nl>   } 
import org . mockito . internal . matchers . Equals ; <nl> public class Invocation implements PrintableInvocation { <nl> private static final int MAX_LINE_LENGTH = 35 ; <nl> - private static final String TAB = " " ; <nl> private final int sequenceNumber ; <nl> private final Object mock ; <nl> private final Method method ; <nl>   } 
public class SnackBar { <nl> <nl> public SnackBar show ( int message , short duration ) { <nl> - show ( message , duration ) ; <nl> + show ( message , 0 , duration ) ; <nl> return this ; <nl> } <nl>   } 
public class StreamStateMachine { <nl> <nl> - public synchronized void receivedPushPromis ( ) { <nl> + } public synchronized void receivedPushPromise ( ) { <nl> stateChange ( State . IDLE , State . RESERVED_REMOTE ) ; <nl> } <nl>   } 
class BazaarHistoryParser implements HistoryParser , Executor . StreamHandler { public void test ( ) { { <nl> entries . add ( entry ) ; <nl> } <nl> + history = new History ( ) ; <nl> history . setHistoryEntries ( entries ) ; <nl> } <nl>   } 
public final class MenuItemImpl implements MenuItem { <nl> <nl> public boolean expandActionView ( ) { <nl> - if ( hasCollapsibleActionView ( ) ) { <nl> + if ( ! hasCollapsibleActionView ( ) ) { <nl> return false ; <nl> } <nl>   } } } 
public class DisUnity { <nl> <nl> public static String getVersion ( ) { <nl> - return " 0 . 3 . 3 " ; <nl> + return " 0 . 4 . 0 " ; <nl> } <nl> public static String getSignature ( ) { <nl>   } } 
