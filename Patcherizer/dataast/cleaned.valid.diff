public class GoPerformanceTest extends GoCodeInsightFixtureTestCase { <nl> <nl> public void testUnusedFunction ( ) { <nl> - doInspectionTest ( new GoUnusedFunctionInspection ( ) , TimeUnit . MINUTES . toMillis ( 3 ) ) ; <nl> + doInspectionTest ( new GoUnusedFunctionInspection ( ) , TimeUnit . SECONDS . toMillis ( 30 ) ) ; <nl> } <nl> public void testUnusedImport ( ) { <nl>   } } 
public abstract class BaseActivity extends SlidingFragmentActivity { public void test ( ) { <nl> SlidingMenu sm = getSlidingMenu ( ) ; <nl> sm . setTouchModeAbove ( SlidingMenu . TOUCHMODE_MARGIN ) ; <nl> sm . setBehindOffsetRes ( R . dimen . slidingmenu_offset ) ; <nl> - setSlidingActionBarEnabled ( false ) ; <nl> } <nl> <nl>   } 
public class ApplicationMasterTest { <nl> ; <nl> } <nl> - private static class ApplicationMasterPrivateAccess { <nl> + private static final class ApplicationMasterPrivateAccess { <nl> private final ApplicationMaster mMaster ; <nl> private ApplicationMasterPrivateAccess ( ApplicationMaster master ) { <nl>   } } } 
public final class ChannelImpl implements Channel { <nl> <nl> public void request ( int numMessages ) { <nl> + Preconditions . checkState ( stream != null , " Not started " ) ; <nl> stream . request ( numMessages ) ; <nl> } <nl>   } 
public class EngineWrapper_ImmutabilityCheckEngine { <nl> <nl> public void test ( ) { <nl> Engine e = new StoreDirect ( null ) ; <nl> + ( ( StoreDirect ) e ) . init ( ) ; <nl> e = new EngineWrapper . ImmutabilityCheckEngine ( e ) ; <nl> List rec = new ArrayList ( ) ; <nl>   } } 
public class Tmp { public interface CC { <nl> <nl> - int DEFAULT_CACHE_SIZE = 1024 * 32 ; <nl> + int DEFAULT_CACHE_SIZE = 2048 ; <nl> String DEFAULT_CACHE = DBMaker . Keys . cache_hashTable ; <nl>   } } 
import static org . junit . Assert . assertNull ; <nl> public class BsonDocumentBufferSerializerTest extends MongoClientTestBase { <nl> - BsonDocumentBufferSerializer serializer = <nl> + private BsonDocumentBufferSerializer serializer = <nl> new BsonDocumentBufferSerializer ( new PowerOfTwoByteBufferPool ( 24 ) , PrimitiveSerializers . createDefault ( ) ) ; <nl> <nl>   } 
public class DatastoreImpl implements Datastore { <nl> <nl> public void ensureSuggestedIndexes ( ) { <nl> <nl> - <nl> } <nl>   } 
public class HSQLDialect extends Dialect { <nl> public boolean supportsTupleDistinctCounts ( ) { <nl> return false ; <nl> } <nl> + <nl> + <nl> + public boolean supportsNotNullUnique ( ) { <nl> + return false ; <nl> + } <nl> } <nl>   
public abstract class AbstractBox extends Mesh { public void test ( ) { <nl> duUpdateGeometryNormals ( ) ; <nl> duUpdateGeometryTextures ( ) ; <nl> duUpdateGeometryIndices ( ) ; <nl> + setStatic ( ) ; <nl> } <nl> <nl>   } 
public class UpdateSettingsConfigurable extends BaseConfigurable implements Appl <nl> <nl> { public String getHelpTopic ( ) { <nl> - return " preferences . versionUpdates " ; <nl> + return " preferences . updates " ; <nl> } <nl> public Icon getIcon ( ) { <nl>   } } 
public class TreeMultisetTest extends AbstractMultisetTest { public void test ( ) { { <nl> fail ( " No bridge method found " ) ; <nl> } <nl> } <nl> - <nl>   } 
import processing . core . * ; <nl> import java . net . URL ; <nl> import java . nio . * ; <nl> import java . util . * ; <nl> - import java . util . regex . Pattern ; <nl> <nl> <nl>   
public class CrashTest { public void test ( ) { <nl> maker . fileLockDisable ( ) ; <nl> if ( mmap ) <nl> - maker . fileMmapEnableIfSupported ( ) ; <nl> + maker . fileMmapEnableIfSupported ( ) . fileMmapCleanerHackEnable ( ) ; <nl> if ( cache ) <nl> maker . cacheHashTableEnable ( ) ; <nl>   } } 
public class Order { <nl> private Customer customer ; <nl> <nl> - private Long customer__resolvedKey ; <nl> + private transient Long customer__resolvedKey ; <nl> public Order ( ) { <nl>   } } 
public class JvmRouteBinderValve extends ValveBase implements ClusterValve { public void test ( ) { <nl> } <nl> <nl> <nl> <nl> <nl> <nl> <nl>   } 
public class LeftOverlaySample extends Activity { public void test ( ) { <nl> mDrawer . setContentView ( content ) ; <nl> mDrawer . setSlideDrawable ( R . drawable . ic_drawer ) ; <nl> mDrawer . setDrawerIndicatorEnabled ( true ) ; <nl> + mDrawer . peekDrawer ( 1000 , 0 ) ; <nl> } <nl> <nl>   } 
public final class H2O { <nl> public static URI ICE_ROOT ; <nl> <nl> - public static boolean INHERIT_LOG4J = true ; <nl> + public static boolean INHERIT_LOG4J = false ; <nl> <nl> public static String [ ] ARGS ; <nl>   } 
public class TemplatesPanel extends NamedItemsListEditor < TemplateResource > { <nl> <nl> <nl> public String getHelpTopic ( ) { <nl> - return null ; <nl> + return " Templates Dialog " ; <nl> } <nl> <nl>   } 
public class BooleanSubscription implements Subscription { <nl> <nl> public void unsubscribe ( ) { { <nl> - unsubscribed . set ( false ) ; <nl> + unsubscribed . set ( true ) ; <nl> } <nl> } <nl>   } 
package com . github . pedrovgs . problem78 ; <nl> <nl> public class AutoBoxingTrick { <nl> + public boolean compare ( Integer n1 , Integer n2 ) { { <nl> + return n1 == n2 ; <nl> + } <nl> } <nl>   } 
public class Mappings { public void test ( ) { { { { <nl> myAffectedFiles . add ( srcFile ) ; <nl> return ; <nl> } <nl> - break ; <nl> } <nl> } <nl> } <nl>   } 
public class GraphServiceBeanImpl implements GraphService { <nl> <nl> public Graph getGraph ( String routerId ) { { <nl> - <nl> - return null ; <nl> + return graph ; <nl> } <nl> } <nl>   } 
public class HystrixCommandTestWithCustomConcurrencyStrategy { <nl> public void reset ( ) { <nl> HystrixRequestContext . setContextOnCurrentThread ( null ) ; <nl> HystrixPropertiesFactory . reset ( ) ; <nl> + HystrixPlugins . reset ( ) ; <nl> } <nl> <nl>   } 
public class StoreAppendTest < E extends StoreAppend > extends EngineTest < E > { <nl> <nl> + <nl> + public void large_record_larger ( ) { { <nl> + <nl> + } <nl> } <nl>   } 
import groovy . text . SimpleTemplateEngine ; <nl> import groovy . text . Template ; <nl> import junit . framework . TestCase ; <nl> - import java . io . BufferedWriter ; <nl> import java . io . IOException ; <nl> import java . io . StringWriter ; <nl> import java . io . Writer ; <nl>   
public abstract class XDebuggerEditorBase { <nl> public void setText ( String text ) { <nl> saveTextInHistory ( text ) ; <nl> - doSetText ( null ) ; <nl> + doSetText ( text ) ; <nl> } <nl> public abstract String getText ( ) ; <nl>   } 
public class BubbleFlowDraggable extends BubbleFlowView implements Draggable { <nl> <nl> public void onDestroyBubble ( ) { <nl> - <nl> + remove ( getCenterIndex ( ) , true ) ; <nl> } <nl> <nl>   } 
public class ExopackageInstaller { <nl> <nl> <nl> <nl> - private IDevice device = null ; <nl> + private IDevice device ; <nl> <nl> <nl>   } 
public class DrawerLayout extends ViewGroup { public void test ( ) { { <nl> if ( mListener != null ) { <nl> mListener . onDrawerClosed ( drawerView ) ; <nl> } <nl> - sendAccessibilityEvent ( AccessibilityEvent . TYPE_WINDOW_STATE_CHANGED ) ; <nl> + getRootView ( ) . sendAccessibilityEvent ( AccessibilityEvent . TYPE_WINDOW_STATE_CHANGED ) ; <nl> } <nl> } <nl>   } 
package org . geometerplus . android . fbreader ; <nl> import android . content . Intent ; <nl> + import org . geometerplus . fbreader . bookmodel . BookModel ; <nl> import org . geometerplus . fbreader . fbreader . FBReaderApp ; <nl> class ShowTOCAction extends FBAndroidAction { <nl>   } 
import android . content . Context ; <nl> import android . content . Intent ; <nl> import android . graphics . Bitmap ; <nl> import android . graphics . BitmapFactory ; <nl> + import android . net . Uri ; <nl> import android . os . Build ; <nl> import android . os . Bundle ; <nl>   
public class SslHandler <nl> <nl> { public long getCloseNotifyTimeoutMillis ( ) { <nl> - return handshakeTimeoutMillis ; <nl> + return closeNotifyTimeoutMillis ; <nl> } <nl> public void setCloseNotifyTimeout ( long closeNotifyTimeout , TimeUnit unit ) { <nl>   } } 
public final class Index implements ConvertibleToDocument { <nl> T getValue ( ) ; <nl> <nl> - public static class Builder { <nl> + } public static final class Builder { <nl> private String name ; <nl> private boolean unique = false ; <nl> private boolean dropDups = false ; <nl>   } } 
public class UpgradeServletOutputStream extends ServletOutputStream { public void test ( ) { { <nl> return ; <nl> } <nl> closed = true ; <nl> - flushInternal ( false , false ) ; <nl> + flushInternal ( ( listener == null ) , false ) ; <nl> } <nl>   } 
public class SyncStorageEngine extends Handler { public void test ( ) { { { <nl> syncs = new ArrayList < SyncInfo > ( ) ; <nl> mCurrentSyncs . put ( userId , syncs ) ; <nl> } <nl> - return new ArrayList < SyncInfo > ( syncs ) ; <nl> + return syncs ; <nl> } <nl> } <nl>   } 
public class NumberProgressBar extends View { <nl> public void setUnreachedBarColor ( int barColor ) { <nl> this . mUnreachedBarColor = barColor ; <nl> - mUnreachedBarPaint . setColor ( mReachedBarColor ) ; <nl> + mUnreachedBarPaint . setColor ( mUnreachedBarColor ) ; <nl> invalidate ( ) ; <nl> } <nl>   } 
public class NewEnvTestRule implements TestRule { public void test ( ) { { { <nl> } <nl> currentThread . setContextClassLoader ( contextClassLoader ) ; <nl> + <nl> + MethodCache . reset ( ) ; <nl> } <nl> } <nl>   } 
public class NodePencil implements Tool { <nl> public NodePencil ( ) { <nl> <nl> - color = Color . BLACK ; <nl> + color = new Color ( 153 , 153 , 153 ) ; <nl> size = 10f ; <nl> } <nl>   } 
public class WifiNative { <nl> <nl> public void bssFlush ( ) { <nl> - doBooleanCommand ( " BSS_FLUSH " ) ; <nl> + doBooleanCommand ( " BSS_FLUSH 0 " ) ; <nl> } <nl> public boolean startWpsPbc ( String bssid ) { <nl>   } } 
import java . io . IOException ; <nl> <nl> <nl> - public class XMMapFSDirectory extends NIOFSDirectory { <nl> + public class XMMapFSDirectory extends MMapDirectory { <nl> private final StoreRateLimiting . Provider rateLimitingProvider ; <nl>   } } 
public class BindingTraceContext extends BindingTrace implements BindingContext <nl> <nl> { public PsiElement getDeclarationPsiElement ( DeclarationDescriptor descriptor ) { { { <nl> - return descriptorToDeclarations . get ( descriptor ) ; <nl> + return descriptorToDeclarations . get ( descriptor . getOriginal ( ) ) ; <nl> } <nl> } <nl>   } } 
public final class ConsumerIrManager { public void test ( ) { <nl> } <nl> <nl> <nl> <nl> <nl> <nl> <nl>   } 
import tachyon . conf . TachyonConf ; <nl> public final class Version { <nl> public static final String VERSION ; <nl> + private Version ( ) { } <nl> + <nl> static { <nl> TachyonConf tachyonConf = new TachyonConf ( ) ; <nl> VERSION = tachyonConf . get ( Constants . TACHYON_VERSION ) ; <nl>   } } 
package org . jetbrains . ether ; <nl> import junit . framework . TestCase ; <nl> import junitx . framework . FileAssert ; <nl> + import org . jetbrains . ether . dependencyView . Mappings ; <nl> import java . io . * ; <nl>   
public class SessionImpl implements Session { public void test ( ) { { { <nl> } <nl> return null ; <nl> <nl> - throw new UnsupportedOperationException ( " Received an uknown message type . " ) ; <nl> + throw new UnsupportedOperationException ( " Received an unknown message type . " ) ; <nl> } <nl> } <nl>   } 
public class CarrierConfigManager { <nl> <nl> <nl> public static final String KEY_ALLOW_NON_EMERGENCY_CALLS_IN_ECM_BOOL = <nl> - " allowNonEmergencyCallsInEcm " ; <nl> + " allow_non_emergency_calls_in_ecm_bool " ; <nl> <nl> private final static PersistableBundle sDefaults ; <nl>   } 
public abstract class WindowOrientationListener { <nl> <nl> public void setAllow180Rotation ( boolean allowed ) { <nl> - mSensorEventListener . setAllow180Rotation ( allowed ) ; <nl> + if ( mSensorEventListener != null ) { <nl> + mSensorEventListener . setAllow180Rotation ( allowed ) ; <nl> + } <nl> } <nl> public int getCurrentRotation ( int lastRotation ) { <nl>   } } 
import buildcraft . core . DefaultProps ; <nl> import buildcraft . core . InterModComms ; <nl> import buildcraft . core . Version ; <nl> import buildcraft . core . proxy . CoreProxy ; <nl> + import buildcraft . core . render . BlockHighlightHandler ; <nl> import buildcraft . core . triggers . BCTrigger ; <nl> import buildcraft . energy . BlockBuildcraftFluid ; <nl> import buildcraft . energy . BlockEnergyEmitter ; <nl>   
public class RecyclerView extends ViewGroup { public void test ( ) { <nl> if ( mEatRunOnAnimationRequest ) { <nl> mReSchedulePostAnimationCallback = true ; <nl> } else { <nl> + removeCallbacks ( this ) ; <nl> ViewCompat . postOnAnimation ( RecyclerView . this , this ) ; <nl> } <nl> } <nl>   } 
public class Tmp { public interface RemoteConnector { <nl> <nl> String getName ( ) ; <nl> - <nl> + <nl> RemoteConnectionType getType ( ) ; <nl> void produceRemoteCredentials ( Consumer < RemoteCredentials > remoteCredentialsConsumer ) ; <nl>   } } 
public class State { public void test ( ) { <nl> this . sentence = sentence ; <nl> this . tokenPosition = tokenPosition ; <nl> this . score = score ; <nl> - this . finished = true ; <nl> + this . finished = finished ; <nl> } <nl> <nl>   } 
public class SslConduit implements StreamSourceConduit , StreamSinkConduit { <nl> <nl> public void startHandshake ( ) throws SSLException { <nl> + state |= FLAG_READ_REQUIRES_WRITE ; <nl> engine . beginHandshake ( ) ; <nl> } <nl>   } 
public class GoLanguage extends Language { <nl> public LanguageFileType getAssociatedFileType ( ) { <nl> return GoFileType . INSTANCE ; <nl> } <nl> + <nl> + <nl> + public boolean isCaseSensitive ( ) { <nl> + return true ; <nl> + } <nl> } <nl>   
public abstract class UIDisplayElement { public void test ( ) { { <nl> if ( focusedElement != null ) { <nl> focusedElement . notifyFocusListeners ( true ) ; <nl> } <nl> - <nl> - System . out . println ( focusedElement ) ; <nl> } <nl> } <nl>   } 
public class LinkProperties implements Parcelable { <nl> <nl> public LinkProperties ( ) { <nl> - clear ( ) ; <nl> } <nl> <nl>   } 
public class RequestQueue implements RequestFeeder { public void test ( ) { { <nl> mContext . registerReceiver ( mProxyChangeReceiver , <nl> new IntentFilter ( Proxy . PROXY_CHANGE_ACTION ) ) ; <nl> } <nl> + <nl> + setProxyConfig ( ) ; <nl> } <nl> <nl>   } 
public class FMLServerTweaker extends FMLTweaker { public void test ( ) { { <nl> classLoader . addClassLoaderExclusion ( " LZMA . " ) ; <nl> FMLLaunchHandler . configureForServerLaunch ( classLoader , this ) ; <nl> runAdditionalTweaks ( classLoader ) ; <nl> + FMLLaunchHandler . appendCoreMods ( ) ; <nl> } <nl> } <nl>   } 
public class PixmapPacker implements Disposable { public void test ( ) { { { { <nl> atlas . addRegion ( name , region ) ; <nl> } <nl> page . addedRects . clear ( ) ; <nl> - return ; <nl> } <nl> } <nl> } <nl>   } 
package com . liferay . registry . internal ; <nl> public class TrackedOne { <nl> public TrackedOne ( ) { <nl> + _key = null ; <nl> } <nl> public TrackedOne ( String key ) { <nl>   } } 
public class PyPushDownDialog extends RefactoringDialog { <nl> <nl> protected String getHelpId ( ) { <nl> - return " refactoring . pushMembersDown " ; <nl> + return " python . reference . pushMembersDown " ; <nl> } <nl> <nl>   } 
public class ScopeTreeViewPanel extends JPanel implements JDOMExternalizable , Di <nl> <nl> { public void dispose ( ) { { <nl> + TreeModelBuilder . clearCaches ( myProject ) ; <nl> PsiManager . getInstance ( myProject ) . removePsiTreeChangeListener ( myPsiTreeChangeAdapter ) ; <nl> WolfTheProblemSolver . getInstance ( myProject ) . removeProblemListener ( myProblemListener ) ; <nl> } <nl>   } } 
public class SubclassInstrumentedType <nl> <nl> { public TypeDescription getSupertype ( ) { { <nl> - return superClass ; <nl> + return isInterface ( ) ? null : superClass ; <nl> } <nl> <nl>   } } 
public class FontSizes { public void test ( ) { <nl> accountName = MEDIUM ; <nl> accountDescription = SMALL ; <nl> - folderName = FONT_16SP ; <nl> + folderName = MEDIUM ; <nl> folderStatus = SMALL ; <nl> messageListSubject = FONT_16SP ; <nl>   } } 
public class JSSEImplementation extends SSLImplementation { <nl> <nl> public String getImplementationName ( ) { <nl> - return " JSSE " ; <nl> + return " JSSE " ; <nl> } <nl> <nl>   } 
public class WordPress extends Application { <nl> <nl> <nl> - public void onActivityCreated ( Activity activity , Bundle arg1 ) { <nl> + } public void onActivityCreated ( Activity arg0 , Bundle arg1 ) { <nl> } <nl> <nl>   } 
public class ClusterMembershipTest extends HazelcastTestSupport { <nl> <nl> public static void tearDown ( ) throws Exception { <nl> - if ( executorService == null ) { <nl> - return ; <nl> - } <nl> - <nl> executorService . shutdown ( ) ; <nl> } <nl>   } 
public abstract class DB { public void test ( ) { <nl> <nl> <nl> <nl> <nl> <nl> <nl>   } } 
class AppCompatTextHelper { public void test ( ) { { <nl> final TintInfo tintInfo = new TintInfo ( ) ; <nl> tintInfo . mHasTintList = true ; <nl> tintInfo . mTintList = tintList ; <nl> + return tintInfo ; <nl> } <nl> return null ; <nl> } <nl>   } 
public class TreeChangeImpl implements TreeChange { public void test ( ) { { <nl> optimizedResult = myLastOffsetInNewTree ; <nl> myLastNode = node ; <nl> - myLastOffsetInNewTree = optimizedResult ; <nl> if ( ! ourDoChecks ) return optimizedResult ; <nl> } <nl> } <nl>   } 
package com . fsck . k9 . helper ; <nl> - import android . app . Activity ; <nl> import android . content . Context ; <nl> import android . content . Intent ; <nl> import android . database . Cursor ; <nl>   
public class RomanianTagger extends BaseTagger { <nl> <nl> public final String getFileName ( ) { <nl> - return DEFAULT_BINARY_DICT ; <nl> + return binaryDictPath ; <nl> } <nl> <nl>   } 
public class LayerDrawable extends Drawable implements Drawable . Callback { public void test ( ) { { { <nl> layer . mDrawable . getChangingConfigurations ( ) ; <nl> layer . mDrawable . setCallback ( this ) ; <nl> } <nl> + <nl> + addLayer ( layer ) ; <nl> } <nl> } <nl>   } 
import io . fabric . sdk . android . Fabric ; <nl> public class BottomNavigationActivity extends AppCompatActivity implements View . OnClickListener , CompoundButton . OnCheckedChangeListener , BottomNavigationBar . OnTabSelectedListener { public void test ( ) { <nl> - <nl> BottomNavigationBar bottomNavigationBar ; <nl> CheckBox modeFixed ; <nl>   } } 
public abstract class TvInputService extends Service { public void test ( ) { <nl> } <nl> <nl> <nl> <nl> <nl> void setMainSession ( boolean isMainSession ) { <nl> onSetMainSession ( isMainSession ) ; <nl>   } } 
public class TestMusicPlayer extends javax . swing . JFrame { public void test ( ) { <nl> ar = JmeSystem . newAudioRenderer ( settings ) ; <nl> ar . initialize ( ) ; <nl> ar . setListener ( listener ) ; <nl> + AudioContext . setAudioRenderer ( ar ) ; <nl> } <nl> <nl>   } 
public class FeedRefreshTaskGiver { <nl> <nl> public void giveBack ( Feed feed ) { <nl> + metricsBean . feedUpdated ( ) ; <nl> giveBackQueue . add ( feed ) ; <nl> } <nl>   } 
public class ImapStore extends Store { public void test ( ) { { <nl> message . parse ( literal ) ; <nl> <nl> - return new Integer ( 1 ) ; <nl> + return Integer . valueOf ( 1 ) ; <nl> } <nl> return null ; <nl> } <nl>   } 
public class KeyIndexableGraphHelper { public void test ( ) { { { { { <nl> } <nl> } <nl> } <nl> + if ( isTransactional ) { <nl> + ( ( TransactionalGraph ) graph ) . commit ( ) ; <nl> + } <nl> return counter ; <nl> } <nl> } <nl>   } 
public class SlidingUpPanelLayout extends ViewGroup { public void test ( ) { <nl> mCanSlide = true ; <nl> mIsSlidingEnabled = true ; <nl> - setCoveredFadeColor ( DEFAULT_FADE_COLOR ) ; <nl> - <nl> ViewConfiguration vc = ViewConfiguration . get ( context ) ; <nl> mScrollTouchSlop = vc . getScaledTouchSlop ( ) ; <nl> } <nl>   } 
public final class RxCheckedTextView { <nl> <nl> private RxCheckedTextView ( ) { <nl> - throw new AssertionError ( " No Instances . " ) ; <nl> + throw new AssertionError ( " No instances . " ) ; <nl> } <nl> } <nl>   
public class GitFileAnnotation implements FileAnnotation { <nl> private class MyFileStatusListener implements FileStatusListener { <nl> public void fileStatusesChanged ( ) { <nl> + checkAndFire ( ) ; <nl> } <nl> public void fileStatusChanged ( VirtualFile virtualFile ) { <nl>   } } } 
public class YAMLLanguage extends Language { <nl> <nl> <nl> public String getDisplayName ( ) { { <nl> - return " Yaml " ; <nl> + return " YAML " ; <nl> } <nl> } <nl>   } 
public class ElasticSearchConnection implements Connection { <nl> <nl> public void close ( ) throws SQLException { <nl> - <nl> + client . close ( ) ; <nl> } <nl> <nl>   } 
public class RedisBroadcaster extends AbstractBroadcasterProxy { public void test ( ) { { { <nl> } <nl> if ( jedisSubscriber != null ) { <nl> - jedisPool . returnResource ( jedisSubscriber ) ; <nl> + disconnectSubscriber ( ) ; <nl> } <nl> } <nl> } <nl>   } 
public class UserScreenNameException extends PortalException { public void test ( ) { { <nl> super ( <nl> " Screen Name must be alpha - numeric . Only the following " + <nl> " additional special characters are allowed : " + <nl> - validSpecialChars ) ; <nl> + new String ( validSpecialChars ) ) ; <nl> } <nl> } <nl>   } 
package com . battlelancer . seriesguide ; <nl> - import com . battlelancer . seriesguide . beta . R ; <nl> public class Constants { public void test ( ) { <nl>   } } 
public class Tmp { public interface BSONObject { <nl> <nl> <nl> <nl> + <nl> } public boolean containsKey ( String s ) ; <nl> <nl>   } 
public abstract class Lexer extends Recognizer < Integer , LexerATNSimulator > <nl> <nl> { public String _text ; <nl> + public Lexer ( ) { } <nl> + <nl> public Lexer ( CharStream input ) { { <nl> this . _input = input ; <nl> } <nl>   } } 
public abstract class BaseLayer implements Layer { <nl> <nl> public INDArray activate ( ) { <nl> - return activate ( ) ; <nl> + return activate ( false ) ; <nl> } <nl>   } 
public class PyPullUpDialog extends UpDirectedMembersMovingDialog { <nl> <nl> protected String getHelpId ( ) { <nl> - return " refactoring . pullMembersUp " ; <nl> + return " python . reference . pullMembersUp " ; <nl> } <nl> protected JComponent createNorthPanel ( ) { <nl>   } } 
public class Activity extends ContextThemeWrapper <nl> <nl> <nl> <nl> + <nl> { public interface TranslucentConversionListener { <nl> <nl> <nl>   } } 
public final class MediaBrowserCompat { <nl> <nl> <nl> <nl> - public static class SubscriptionCallbackApi21 extends SubscriptionCallback { <nl> + static class SubscriptionCallbackApi21 extends SubscriptionCallback { <nl> SubscriptionCallback mSubscriptionCallback ; <nl> private final Object mSubscriptionCallbackObj ; <nl> private Bundle mOptions ; <nl>   } } } 
public class ItemSelectorBrowserTag extends IncludeTag { <nl> <nl> protected String getUploadMessage ( ) { <nl> - if ( Validator . isNull ( _uploadMessage ) ) { <nl> + if ( Validator . isNotNull ( _uploadMessage ) ) { <nl> return _uploadMessage ; <nl> } <nl>   } } } 
public class ActionBarImpl extends ActionBar { public void test ( ) { { <nl> break ; <nl> <nl> throw new IllegalStateException ( <nl> - " setSelectedNavigationIndex not valid for current navigation mode " ) ; <nl> + " setSelectedNavigationItem not valid for current navigation mode " ) ; <nl> } <nl> } <nl>   } 
public abstract class BuilderSupport extends GroovyObjectSupport { <nl> protected Object getCurrent ( ) { <nl> return current ; <nl> } <nl> + <nl> + protected void setCurrent ( Object current ) { <nl> + this . current = current ; <nl> + } <nl> } <nl>   
public class LazyInitializationException extends HibernateException { <nl> public LazyInitializationException ( String msg ) { { <nl> super ( msg ) ; <nl> - LOG . error ( msg , this ) ; <nl> + LOG . trace ( msg , this ) ; <nl> } <nl> } <nl>   } 
public class BsonBinaryReader extends AbstractBsonReader { <nl> <nl> protected class Mark extends AbstractBsonReader . Mark { <nl> - private int startPosition ; <nl> - private int size ; <nl> + private final int startPosition ; <nl> + private final int size ; <nl> protected Mark ( ) { <nl> super ( ) ; <nl>   } } } 
public interface CommonClassNames { public void test ( ) { <nl> String JAVA_LANG_CLONEABLE = " java . lang . Cloneable " ; <nl> + String JAVA_LANG_COMPARABLE = " java . lang . Comparable " ; <nl> String CLASS_FILE_EXTENSION = " . class " ; <nl> String JAVA_LANG_STRING_SHORT = " String " ; <nl>   } } 
public class CheckServerClocksNotification implements NotificationType { <nl> <nl> public boolean isCloseable ( ) { { <nl> - return false ; <nl> + return true ; <nl> } <nl> } <nl>   } 
public class DefaultAgent implements Agent { public void test ( ) { { <nl> if ( this . factory != null ) { <nl> this . factory . release ( ) ; <nl> } <nl> + PLoggerFactory . unregister ( this . binder ) ; <nl> } <nl> } <nl>   } 
public class Protocol { <nl> public static final int BASE_NETWORK_AGENT = 0x00081000 ; <nl> public static final int BASE_NETWORK_MONITOR = 0x00082000 ; <nl> public static final int BASE_NETWORK_FACTORY = 0x00083000 ; <nl> + public static final int BASE_ETHERNET = 0x00084000 ; <nl> <nl> } <nl>   
public class Instruction35s extends InstructionWithReference { <nl> <nl> public Format getFormat ( ) { <nl> - return Format . Format35c ; <nl> + return Format . Format35s ; <nl> } <nl> public byte getRegisterA ( ) { <nl>   } } 
public class TesterServletContext implements ServletContext { <nl> <nl> public URL getResource ( String path ) throws MalformedURLException { <nl> - throw new RuntimeException ( " Not implemented " ) ; <nl> + return null ; <nl> } <nl> <nl>   } 
public class ParserContext { <nl> <nl> public void setWorld ( World world ) { <nl> this . world = world ; <nl> + setExtent ( world ) ; <nl> } <nl> <nl>   } 
public class GroovyClassLoader extends ClassLoader { <nl> public GroovyClassLoader ( ) { <nl> } <nl> + public GroovyClassLoader ( ClassLoader loader ) { <nl> + super ( loader ) ; <nl> + } <nl> + <nl> <nl> <nl> <nl>   } 
class GitNewChangesCollector extends GitChangesCollector { public void test ( ) { { <nl> handler . addParameters ( params ) ; <nl> handler . endOptions ( ) ; <nl> } <nl> + handler . setSilent ( true ) ; <nl> return handler ; <nl> } <nl>   } 
public class ViewPager extends ViewGroup { <nl> private boolean mIsBeingDragged ; <nl> private boolean mIsUnableToDrag ; <nl> - private boolean mIgnoreGutter ; <nl> private int mDefaultGutterSize ; <nl> private int mGutterSize ; <nl> private int mTouchSlop ; <nl>   } 
import java . io . IOException ; <nl> public class CopyReferenceAction extends AnAction { <nl> public CopyReferenceAction ( ) { <nl> super ( ) ; <nl> + setEnabledInModalContext ( true ) ; <nl> setInjectedContext ( true ) ; <nl> } <nl>   } 
public abstract class AdapterView < T extends Adapter > extends ViewGroup { <nl> <nl> protected void dispatchRestoreInstanceState ( SparseArray < Parcelable > container ) { <nl> dispatchThawSelfOnly ( container ) ; <nl> + handleDataChanged ( ) ; <nl> } <nl> class AdapterDataSetObserver extends DataSetObserver { <nl>   } } 
public class DefaultImportingController implements ImportingController { <nl> <nl> public void doGet ( HttpServletRequest request , HttpServletResponse response ) <nl> throws ServletException , IOException { <nl> - <nl> + throw new ServletException ( " GET verb not implemented " ) ; <nl> } <nl> <nl>   } 
public class AccountActivity extends ActionBarActivity { public void test ( ) { <nl> if ( isSignedIn ) { <nl> signOut ( ) ; <nl> isSignedIn = false ; <nl> + setSupportProgressBarIndeterminateVisibility ( false ) ; <nl> } else { <nl> setAccountKeepSignedIn ( rememberPass ) ; <nl>   } } } 
public class Mongo { <nl> <nl> public static final int MINOR_VERSION = 10 ; <nl> - private static final String FULL_VERSION = " 2 . 10 . 0 " ; <nl> + private static final String FULL_VERSION = " 2 . 10 . 1 - SNAPSHOT " ; <nl> static int cleanerIntervalMS ; <nl>   } 
public class Settings implements SearchableConfigurable { <nl> <nl> public String getId ( ) { <nl> - return getHelpTopic ( ) ; <nl> + return " IntelliLang . Configuration " ; <nl> } <nl> public Runnable enableSearch ( String option ) { <nl>   } } 
public class RenderPipe extends TileEntitySpecialRenderer { <nl> final static private int renderDistanceSq = 24 * 24 ; <nl> - final static private int numItemsToRender = 5 ; <nl> + final static private int numItemsToRender = 10 ; <nl> private final static EntityItem dummyEntityItem = new EntityItem ( null ) ; <nl>   } 
public class EventBusOrderedSubscriptionsTest extends AbstractEventBusTest { <nl> <nl> public void testOrderedBackgroundThread ( ) { <nl> - runTestOrdered ( new Integer ( 42 ) ) ; <nl> + runTestOrdered ( Integer . valueOf ( 42 ) ) ; <nl> } <nl> protected void runTestOrdered ( Object event ) { <nl>   } } 
public class HomeActivity extends Activity { <nl> public void onDrawerClosed ( View drawerView ) { <nl> <nl> filtersList . setOnTouchListener ( null ) ; <nl> + drawer . setDrawerListener ( null ) ; <nl> } <nl> <nl>   } 
public final class MediaBrowserCompat { <nl> <nl> <nl> <nl> - public static class SubscriptionCallbackApi21 extends SubscriptionCallback { <nl> + static class SubscriptionCallbackApi21 extends SubscriptionCallback { <nl> SubscriptionCallback mSubscriptionCallback ; <nl> private final Object mSubscriptionCallbackObj ; <nl> private Bundle mOptions ; <nl>   } } } 
public class SessionDialog extends DialogWrapper { public void test ( ) { <nl> myChanges = changes ; <nl> myCommitMessage = commitMessage ; <nl> setTitle ( title ) ; <nl> - updateButtons ( ) ; <nl> init ( ) ; <nl> + updateButtons ( ) ; <nl> } <nl>   } 
import java . util . HashMap ; <nl> import java . util . HashSet ; <nl> import java . util . Set ; <nl> - import android . util . Log ; <nl> - <nl> import com . owncloud . android . R ; <nl> <nl>   
public class TextAnnotationPatternsInterface { <nl> static private void doRemovePhrases ( String line ) { <nl> - model . labelWords ( ) ; <nl> + <nl> System . out . println ( " removing phrases " ) ; <nl> } <nl>   } 
public class TableQuery { <nl> <nl> protected native void nativeSubTable ( long nativeQueryPtr , long columnIndex ) ; <nl> - public TableQuery parent ( ) { <nl> + } public TableQuery endSubTable ( ) { <nl> nativeParent ( nativePtr ) ; <nl> return this ; <nl> } <nl>   } 
public class Tool { <nl> public Grammar loadGrammar ( String fileName ) { <nl> GrammarRootAST grammarRootAST = parseGrammar ( fileName ) ; <nl> final Grammar g = createGrammar ( grammarRootAST ) ; <nl> + g . fileName = fileName ; <nl> process ( g , false ) ; <nl> return g ; <nl> } <nl>   } 
final class DexterInstance { <nl> private final AtomicBoolean rationaleAccepted ; <nl> private Activity activity ; <nl> private MultiplePermissionsListener listener = EMPTY_LISTENER ; <nl> - private ThreadSpec threadSpec ; <nl> DexterInstance ( Context context , AndroidPermissionService androidPermissionService , <nl> IntentProvider intentProvider ) { <nl>   } } 
public class ListenerTest extends HazelcastTestSupport { <nl> <nl> public void mapEvicted ( MapEvent event ) { <nl> + } <nl> + <nl> + public void mapCleared ( MapEvent event ) { <nl> } <nl> <nl>   } 
public class CompositeShader implements Shader { <nl> <nl> <nl> + public void init ( ) { <nl> + } <nl> + <nl> + <nl> public int compareTo ( Shader other ) { <nl> return 0 ; <nl> } <nl>   } 
package org . codehaus . groovy . reflection ; <nl> - import com . sun . jmx . snmp . internal . SnmpDecryptedPdu ; <nl> - <nl> import java . util . AbstractList ; <nl> import java . util . Collection ; <nl> import java . util . Iterator ; <nl>   
public class XMLChangeLogSAXParser implements ChangeLogParser { <nl> <nl> public static String getSchemaVersion ( ) { <nl> - return " 3 . 0 " ; <nl> + return " 3 . 1 " ; <nl> } <nl> <nl>   } 
package water ; <nl> import java . lang . management . ManagementFactory ; <nl> import javax . management . * ; <nl> - import water . persist . Persist ; <nl> import water . util . LinuxProcFileReader ; <nl> import water . util . Log ; <nl> import water . init . * ; <nl>   
public class ListView extends AbsListView { public void test ( ) { <nl> int childrenBottom = mBottom - mTop - mListPadding . bottom ; <nl> int childCount = getChildCount ( ) ; <nl> - int index ; <nl> + int index = 0 ; <nl> int delta = 0 ; <nl> View sel ; <nl>   } } 
public class BinaryDoubleExpressionHelper extends BinaryLongExpressionHelper { <nl> <nl> protected ClassNode getNormalOpResultType ( ) { <nl> - return ClassHelper . long_TYPE ; <nl> + return ClassHelper . double_TYPE ; <nl> } <nl> <nl>   } 
public class DroidGap extends PhonegapActivity { <nl> <nl> <nl> public void endActivity ( ) { <nl> + this . activityState = ACTIVITY_EXITING ; <nl> this . finish ( ) ; <nl> } <nl>   } 
public final class R { <nl> public static final int sugarinessPercent = 0x10a10 ; <nl> public static final int numColumns = 0x10a11 ; <nl> public static final int sugaryScale = 0x10a12 ; <nl> + public static final int selectableItemBackground = 0x10a13 ; <nl> } <nl> public static final class menu { <nl>   } 
public class PdePreprocessorOro extends PdePreprocessor { <nl> public PdePreprocessorOro ( String program , String buildPath ) { <nl> super ( program , buildPath ) ; <nl> + this . program = program ; <nl> } <nl> <nl>   } 
package org . robolectric . util ; <nl> - import android . util . Log ; <nl> - <nl> import java . util . ArrayList ; <nl> import java . util . Collections ; <nl> import java . util . List ; <nl>   
public class JavaSourceJar extends AbstractBuildRule { <nl> <nl> protected RuleKey . Builder appendDetailsToRuleKey ( RuleKey . Builder builder ) { <nl> - return builder . setReflectively ( " srcs " , getResolver ( ) . filterInputsToCompareToOutput ( sources ) ) ; <nl> + return builder ; <nl> } <nl> <nl>   } 
public abstract class VideoCallProvider { public void test ( ) { <nl> switch ( msg . what ) { <nl> case MSG_SET_VIDEO_CALL_LISTENER : <nl> mVideoCallListener = IVideoCallCallback . Stub . asInterface ( ( IBinder ) msg . obj ) ; <nl> + break ; <nl> case MSG_SET_CAMERA : <nl> onSetCamera ( ( String ) msg . obj ) ; <nl> break ; <nl>   } } } 
class WifiController extends StateMachine { public void test ( ) { <nl> registerForStayAwakeModeChange ( handler ) ; <nl> readWifiIdleTime ( ) ; <nl> registerForWifiIdleTimeChange ( handler ) ; <nl> - readStayAwakeConditions ( ) ; <nl> + readWifiSleepPolicy ( ) ; <nl> registerForWifiSleepPolicyChange ( handler ) ; <nl> } <nl>   } 
package alluxio . cli ; <nl> import alluxio . Configuration ; <nl> import alluxio . Constants ; <nl> - import alluxio . cli . Version ; <nl> import alluxio . master . AlluxioMaster ; <nl> import alluxio . underfs . UnderFileSystem ; <nl> import alluxio . util . UnderFileSystemUtils ; <nl>   
public class WifiManager { <nl> <nl> <nl> <nl> <nl> <nl> public boolean isNanSupported ( ) { <nl> return isFeatureSupported ( WIFI_FEATURE_NAN ) ; <nl>   } } 
package com . xtremelabs . droidsugar . view ; <nl> - import android . * ; <nl> import android . app . * ; <nl> import android . view . * ; <nl> import android . widget . * ; <nl>   
public final class UniqueId implements UniqueIdInterface { public void test ( ) { { { <nl> <nl> return new UniqueIdAllocator ( name , assignment ) . tryAllocate ( ) ; <nl> } <nl> - System . out . println ( " Caught an exception here " ) ; <nl> return e ; <nl> } <nl> } <nl>   } 
public class BSONBinaryWriter extends BSONWriter { <nl> <nl> <nl> - public void close ( ) { <nl> - } <nl> - <nl> - <nl> public void writeStartArray ( ) { <nl> checkPreconditions ( " writeStartArray " , State . VALUE ) ; <nl>   } } 
class PicassoExecutorService extends ThreadPoolExecutor { <nl> <nl> private void setThreadCount ( int threadCount ) { <nl> - setCorePoolSize ( threadCount ) ; <nl> setMaximumPoolSize ( threadCount ) ; <nl> + setCorePoolSize ( threadCount ) ; <nl> } <nl> <nl>   } 
public class InMemoryGraphTest extends TitanGraphTest { <nl> <nl> <nl> + public void testConfiguration ( ) { } <nl> + <nl> + <nl> public void testDataTypes ( ) { } <nl> <nl>   } 
public class GitHistoryProvider implements VcsHistoryProvider { <nl> <nl> <nl> public HistoryAsTreeProvider getTreeHistoryProvider ( ) { <nl> - return new GitHistoryTreeProvider ( ) ; <nl> + return null ; <nl> } <nl> <nl>   } 
package org . codehaus . groovy . grails . orm . hibernate ; <nl> - public abstract class AbstractJavaClass { <nl> + public class AbstractJavaClass { <nl> } <nl>   } 
public class ShadowWranglerTest { <nl> <nl> public int hashCode ( ) { <nl> - System . out . println ( " hashCode got called " ) ; <nl> return 42 ; <nl> } <nl>   } 
class SingleEntityStoreFromBlocking < T > implements SingleEntityStore < T > { <nl> <nl> public Transaction transaction ( ) { <nl> - return null ; <nl> + return delegate . transaction ( ) ; <nl> } <nl> <nl>   } 
public class BdbSplitStorageEngineTest extends TestCase { <nl> public void testSharedCache ( ) throws DatabaseException { <nl> EnvironmentConfig environmentConfig = new EnvironmentConfig ( ) ; <nl> - environmentConfig = new EnvironmentConfig ( ) ; <nl> environmentConfig . setTxnNoSync ( true ) ; <nl> environmentConfig . setAllowCreate ( true ) ; <nl> environmentConfig . setTransactional ( true ) ; <nl>   } } 
package com . iluwatar ; <nl> import java . io . FileInputStream ; <nl> - import java . io . FileNotFoundException ; <nl> import java . io . FileOutputStream ; <nl> import java . io . IOException ; <nl> import java . io . ObjectInputStream ; <nl>   
public class DisUnity { <nl> <nl> public static String getVersion ( ) { <nl> - return " 0 . 3 . 0 " ; <nl> + return " 0 . 3 . 1 " ; <nl> } <nl> public static String getSignature ( ) { <nl>   } } 
public abstract class LayoutInflater { public void test ( ) { <nl> mFactory = original . mFactory ; <nl> mFactory2 = original . mFactory2 ; <nl> mPrivateFactory = original . mPrivateFactory ; <nl> - mFilter = original . mFilter ; <nl> + setFilter ( original . mFilter ) ; <nl> } <nl> <nl>   } 
public class PlainSaslServerTest { <nl> private PlainSaslServer mPlainSaslServer = null ; <nl> <nl> - public void setup ( ) throws Exception { <nl> + } public void before ( ) throws Exception { <nl> mPlainSaslServer = new PlainSaslServer ( new MockCallbackHandler ( ) ) ; <nl> } <nl>   } 
public class Tmp { public void test ( ) { <nl> - <nl> <nl>   } } 
public class SourceFormatter { public void test ( ) { <nl> String content = _fileUtil . read ( file ) ; <nl> if ( _isGenerated ( content ) ) { <nl> - return ; <nl> + continue ; <nl> } <nl> String className = file . getName ( ) ; <nl>   } } 
public class Tmp { public void test ( ) { interface ConversionOps < T > { <nl> <nl> <nl> <nl> <nl> <nl> <nl> <nl>   } } } 
public class DefaultDSLContext implements DSLContext , Serializable { <nl> <nl> <nl> + <nl> public int bind ( QueryPart part , PreparedStatement stmt ) { <nl> return bindContext ( stmt ) . bind ( part ) . peekIndex ( ) ; <nl> } <nl>   } 
public final class ProxyFactory <nl> { <nl> private ProxyFactory ( ) <nl> { <nl> - <nl> + <nl> } <nl> <nl>   } 
public class GpxSelectionHelper { <nl> public void clearAllGpxFileToShow ( ) { <nl> selectedGPXFiles . clear ( ) ; <nl> + saveCurrentSelections ( ) ; <nl> } <nl> public boolean isShowingAnyGpxFiles ( ) { <nl>   } } 
public class DataStructures { public void test ( ) { <nl> } <nl> { <nl> - <nl> <nl> System . out . println ( " Max - Heap . " ) ; <nl> BinaryHeap maxHeap = new BinaryHeap ( unsorted , TYPE . MAX ) ; <nl>   } } 
public abstract class ForwardingEjbClientConfiguration implements EJBClientConfi <nl> <nl> { public long getInvocationTimeout ( ) { { { <nl> - return 0 ; <nl> + return delegate . getInvocationTimeout ( ) ; <nl> } <nl> } <nl>   } } 
public class ConcurrentHashIndex < E > extends AbstractCollection < E > implements Ind <nl> <nl> { public int size ( ) { { <nl> - return index . get ( ) ; <nl> + return index2Item . size ( ) ; <nl> } <nl> <nl>   } } 
public class Editor { <nl> private boolean mCancelled ; <nl> public void run ( ) { <nl> - Log . d ( " GILLES " , " blinking ! ! ! " ) ; <nl> if ( mCancelled ) { <nl> return ; <nl> } <nl>   } } 
public class QueryRescorerTests extends ElasticsearchIntegrationTest { <nl> <nl> <nl> + <nl> <nl> public void testRescorerMadeScoresWorse ( ) throws Exception { <nl> Builder builder = ImmutableSettings . builder ( ) ; <nl>   } } 
import java . util . regex . Pattern ; <nl> <nl> <nl> <nl> <nl> <nl> public class DefaultGroovyMethods extends DefaultGroovyMethodsSupport { public void test ( ) { <nl>   } } 
public class UpdateByBranchUpdateSettings implements UpdateSettings { <nl> <nl> public boolean getPruneEmptyDirectories ( ) { <nl> - return false ; <nl> + return true ; <nl> } <nl> public String getBranch1ToMergeWith ( ) { <nl>   } } 
public class BookReference { public void test ( ) { <nl> URI uri ; <nl> try { <nl> uri = new URI ( url ) ; <nl> - } catch ( java . net . URISyntaxException ex ) { <nl> + } catch ( Throwable ex ) { <nl> return null ; <nl> } <nl>   } } 
public class SimpleValidateQueryTests extends ElasticsearchIntegrationTest { <nl> <nl> + <nl> public void explainValidateQueryTwoNodes ( ) throws IOException { <nl> createIndex ( " test ( ) " ) ; <nl> ensureGreen ( ) ; <nl>   } } 
public class StandardReconConfig extends ReconConfig { <nl> <nl> public int getBatchSize ( ) { <nl> - return 7 ; <nl> + return 3 ; <nl> } <nl> <nl>   } 
import java . net . SocketAddress ; <nl> public class Address <nl> { <nl> - static interface IZAddress <nl> + public interface IZAddress <nl> { <nl> String toString ( ) ; <nl> void resolve ( String name , boolean ip4only ) ; <nl>   } } 
abstract class AbstractRecord extends AbstractStore implements Record { <nl> <nl> <nl> - public int getIndex ( String fieldName ) { <nl> + } public final int getIndex ( String fieldName ) { <nl> return fields . getIndex ( fieldName ) ; <nl> } <nl>   } 
public final class MysqlDefs { public void test ( ) { <nl> switch ( javaType ) { <nl> case Types . NUMERIC : <nl> - return MysqlDefs . FIELD_TYPE_LONG ; <nl> + return MysqlDefs . FIELD_TYPE_DECIMAL ; <nl> case Types . DECIMAL : <nl> return MysqlDefs . FIELD_TYPE_NEW_DECIMAL ; <nl>   } } } 
import javax . management . ObjectName ; <nl> import org . apache . log4j . Logger ; <nl> - import org . mockito . internal . matchers . InstanceOf ; <nl> import voldemort . annotations . jmx . JmxManaged ; <nl> import voldemort . cluster . Cluster ; <nl> import voldemort . server . AbstractService ; <nl>   
public class RequestLogConfiguration { <nl> <nl> private boolean enabled = false ; <nl> - <nl> <nl> private String filenamePattern = " . / logs / yyyy_mm_dd . log " ; <nl>   } 
import java . nio . charset . CharsetEncoder ; <nl> <nl> <nl> <nl> - class Entities { <nl> + public class Entities { <nl> } public enum EscapeMode { <nl> base , extended <nl> } <nl>   } 
public class MyProfileFragment extends Fragment { <nl> <nl> public void onStart ( ) { <nl> super . onStart ( ) ; <nl> - <nl> EventBus . getDefault ( ) . register ( this ) ; <nl> } <nl>   } 
import java . util . Set ; <nl> <nl> <nl> <nl> - <nl> class Normalize implements CompilerPass { <nl> private final AbstractCompiler compiler ; <nl>   } 
public class ValidateConf { public void test ( ) { <nl> if ( ! validate ( ) ) { <nl> System . exit ( - 1 ) ; <nl> } <nl> + System . out . println ( " All configuration entries are valid . " ) ; <nl> System . exit ( 0 ) ; <nl> } <nl>   } 
public class ContactHeaderWidget extends FrameLayout implements View . OnClickList <nl> <nl> { public void setExcludeMimes ( String [ ] excludeMimes ) { { <nl> mExcludeMimes = excludeMimes ; <nl> + mPhotoView . setExcludeMimes ( excludeMimes ) ; <nl> } <nl> <nl>   } } 
public class Tmp { public interface QueryCacheRecord < V > extends Evictable { <nl> Data getKey ( ) ; <nl> + <nl> V getValue ( ) ; <nl> <nl>   } } 
public class SearchView extends LinearLayout { public void test ( ) { <nl> if ( mIconifiedByDefault == iconified ) return ; <nl> mIconifiedByDefault = iconified ; <nl> updateViewsVisibility ( iconified ) ; <nl> - setImeVisibility ( ! iconified ) ; <nl> } <nl> <nl>   } 
public class Tmp { public interface ReadListener extends java . util . EventListener { <nl> } public abstract void onDataAvailable ( ) throws IOException ; <nl> <nl> <nl> <nl> <nl> <nl> <nl>   } 
public class TestAsyncContextImpl extends TomcatBaseTest { <nl> <nl> public void testErrorHandling ( ) throws Exception { <nl> + resetTracker ( ) ; <nl> <nl> Tomcat tomcat = getTomcatInstance ( ) ; <nl>   } } 
public class DefaultRegistry implements Registry { public void test ( ) { <nl> if ( object == null ) { <nl> throw new NotInRegistryException ( type ) ; <nl> } else { <nl> - return null ; <nl> + return object ; <nl> } <nl> } <nl>   } 
public abstract class ConnectionService extends Service { <nl> <nl> <nl> <nl> <nl> <nl> <nl> public Connection onCreateUnknownConnection ( PhoneAccountHandle connectionManagerPhoneAccount , <nl> ConnectionRequest request ) { <nl>   } } 
public final class SecurityClassLoad { public void test ( ) { <nl> loader . loadClass <nl> ( basePackage + <nl> " loader . WebappClassLoader $ PrivilegedFindResource " ) ; <nl> - loader . loadClass <nl> - ( basePackage + " loader . ResourceEntry " ) ; <nl> } <nl>   } 
public class UserTypeProvider implements TraceMetadataProvider { <nl> <nl> public void setup ( TraceMetadataSetupContext context ) { { <nl> - context . addServiceType ( UserConstants . USER_INCLUDE ) ; <nl> } <nl> } <nl>   } 
public final class PlatformDependent { <nl> private static final boolean HAS_JAVASSIST = hasJavassist0 ( ) ; <nl> - <nl> <nl> <nl> <nl>   } 
public class FindInProjectUtil { <nl> <nl> public VirtualFile [ ] getFiles ( ) { <nl> - throw new UnsupportedOperationException ( ) ; <nl> + return null ; <nl> } <nl> public String getName ( ) { <nl>   } } 
